{
    "name": "rabbitmq",
    "description": "A Pulumi package for creating and managing RabbitMQ resources.",
    "keywords": [
        "pulumi",
        "rabbitmq"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`rabbitmq` Terraform Provider](https://github.com/terraform-providers/terraform-provider-rabbitmq).",
    "repository": "https://github.com/pulumi/pulumi-rabbitmq",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": {
                "rabbitmq": "RabbitMQ"
            },
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-rabbitmq/sdk/v3/go/rabbitmq"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing RabbitMQ resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-rabbitmq)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-rabbitmq` repo](https://github.com/pulumi/pulumi-rabbitmq/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-rabbitmq` repo](https://github.com/terraform-providers/terraform-provider-rabbitmq/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-rabbitmq)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-rabbitmq` repo](https://github.com/pulumi/pulumi-rabbitmq/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-rabbitmq` repo](https://github.com/terraform-providers/terraform-provider-rabbitmq/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "cacertFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "RABBITMQ_CACERT"
                    ]
                }
            },
            "clientcertFile": {
                "type": "string"
            },
            "clientkeyFile": {
                "type": "string"
            },
            "endpoint": {
                "type": "string"
            },
            "insecure": {
                "type": "boolean",
                "defaultInfo": {
                    "environment": [
                        "RABBITMQ_INSECURE"
                    ]
                }
            },
            "password": {
                "type": "string"
            },
            "proxy": {
                "type": "string"
            },
            "username": {
                "type": "string"
            }
        },
        "defaults": [
            "endpoint",
            "password",
            "username"
        ]
    },
    "types": {
        "rabbitmq:index/ExchangeSettings:ExchangeSettings": {
            "properties": {
                "arguments": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional key/value settings for the exchange.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoDelete": {
                    "type": "boolean",
                    "description": "Whether the exchange will self-delete when all\nqueues have finished using it.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "durable": {
                    "type": "boolean",
                    "description": "Whether the exchange survives server restarts.\nDefaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of exchange.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "rabbitmq:index/FederationUpstreamDefinition:FederationUpstreamDefinition": {
            "properties": {
                "ackMode": {
                    "type": "string",
                    "description": "Determines how the link should acknowledge messages. Valid values are `on-confirm`, `on-publish`, and `no-ack`. Default is `on-confirm`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "exchange": {
                    "type": "string",
                    "description": "The name of the upstream exchange.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expires": {
                    "type": "integer",
                    "description": "The expiry time (in milliseconds) after which an upstream queue for a federated exchange may be deleted if a connection to the upstream is lost.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxHops": {
                    "type": "integer",
                    "description": "Maximum number of federation links that messages can traverse before being dropped. Default is `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "messageTtl": {
                    "type": "integer",
                    "description": "The expiry time (in milliseconds) for messages in the upstream queue for a federated exchange (see expires).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefetchCount": {
                    "type": "integer",
                    "description": "Maximum number of unacknowledged messages that may be in flight over a federation link at one time. Default is `1000`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queue": {
                    "type": "string",
                    "description": "The name of the upstream queue.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reconnectDelay": {
                    "type": "integer",
                    "description": "Time in seconds to wait after a network link goes down before attempting reconnection. Default is `5`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "trustUserId": {
                    "type": "boolean",
                    "description": "Determines how federation should interact with the validated user-id feature. Default is `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "The AMQP URI(s) for the upstream. Note that the URI may contain sensitive information, such as a password.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "uri"
            ]
        },
        "rabbitmq:index/PermissionsPermissions:PermissionsPermissions": {
            "properties": {
                "configure": {
                    "type": "string",
                    "description": "The \"configure\" ACL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "read": {
                    "type": "string",
                    "description": "The \"read\" ACL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "write": {
                    "type": "string",
                    "description": "The \"write\" ACL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "configure",
                "read",
                "write"
            ]
        },
        "rabbitmq:index/PolicyPolicy:PolicyPolicy": {
            "properties": {
                "applyTo": {
                    "type": "string",
                    "description": "Can either be \"exchanges\", \"queues\", or \"all\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "definition": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value pairs of the policy definition. See the\nRabbitMQ documentation for definition references and examples.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pattern": {
                    "type": "string",
                    "description": "A pattern to match an exchange or queue name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The policy with the greater priority is applied first.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "applyTo",
                "definition",
                "pattern",
                "priority"
            ]
        },
        "rabbitmq:index/QueueSettings:QueueSettings": {
            "properties": {
                "arguments": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional key/value settings for the queue.\nAll values will be sent to RabbitMQ as a string. If you require non-string\nvalues, use `arguments_json`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "argumentsJson": {
                    "type": "string",
                    "description": "A nested JSON string which contains additional\nsettings for the queue. This is useful for when the arguments contain\nnon-string values.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "autoDelete": {
                    "type": "boolean",
                    "description": "Whether the queue will self-delete when all\nconsumers have unsubscribed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                },
                "durable": {
                    "type": "boolean",
                    "description": "Whether the queue survives server restarts.\nDefaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "type": "object"
        },
        "rabbitmq:index/ShovelInfo:ShovelInfo": {
            "properties": {
                "ackMode": {
                    "type": "string",
                    "description": "Determines how the shovel should acknowledge messages. Possible values are: `on-confirm`, `on-publish` and `no-ack`.\nDefaults to `on-confirm`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "addForwardHeaders": {
                    "type": "boolean",
                    "description": "Whether to add `x-shovelled` headers to shovelled messages.\n",
                    "deprecationMessage": "use destination_add_forward_headers instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleteAfter": {
                    "type": "string",
                    "description": "Determines when (if ever) the shovel should delete itself. Possible values are: `never`, `queue-length` or an integer.\n",
                    "deprecationMessage": "use source_delete_after instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationAddForwardHeaders": {
                    "type": "boolean",
                    "description": "Whether to add `x-shovelled` headers to shovelled messages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationAddTimestampHeader": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationAddress": {
                    "type": "string",
                    "description": "The AMQP 1.0 destination link address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationApplicationProperties": {
                    "type": "string",
                    "description": "Application properties to set when shovelling messages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationExchange": {
                    "type": "string",
                    "description": "The exchange to which messages should be published.\nEither this or `destination_queue` must be specified but not both.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationExchangeKey": {
                    "type": "string",
                    "description": "The routing key when using `destination_exchange`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationProperties": {
                    "type": "string",
                    "description": "Properties to overwrite when shovelling messages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationProtocol": {
                    "type": "string",
                    "description": "The protocol (`amqp091` or `amqp10`) to use when connecting to the destination.\nDefaults to `amqp091`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationPublishProperties": {
                    "type": "string",
                    "description": "A map of properties to overwrite when shovelling messages.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationQueue": {
                    "type": "string",
                    "description": "The queue to which messages should be published.\nEither this or `destination_exchange` must be specified but not both.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "destinationUri": {
                    "type": "string",
                    "description": "The amqp uri for the destination .\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "prefetchCount": {
                    "type": "integer",
                    "description": "The maximum number of unacknowledged messages copied over a shovel at any one time.\n",
                    "deprecationMessage": "use source_prefetch_count instead",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reconnectDelay": {
                    "type": "integer",
                    "description": "The duration in seconds to reconnect to a broker after disconnected.\nDefaults to `1`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceAddress": {
                    "type": "string",
                    "description": "The AMQP 1.0 source link address.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceDeleteAfter": {
                    "type": "string",
                    "description": "Determines when (if ever) the shovel should delete itself. Possible values are: `never`, `queue-length` or an integer.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceExchange": {
                    "type": "string",
                    "description": "The exchange from which to consume.\nEither this or `source_queue` must be specified but not both.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceExchangeKey": {
                    "type": "string",
                    "description": "The routing key when using `source_exchange`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourcePrefetchCount": {
                    "type": "integer",
                    "description": "The maximum number of unacknowledged messages copied over a shovel at any one time.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceProtocol": {
                    "type": "string",
                    "description": "The protocol (`amqp091` or `amqp10`) to use when connecting to the source.\nDefaults to `amqp091`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceQueue": {
                    "type": "string",
                    "description": "The queue from which to consume.\nEither this or `source_exchange` must be specified but not both.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sourceUri": {
                    "type": "string",
                    "description": "The amqp uri for the source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "destinationUri",
                "sourceUri"
            ]
        },
        "rabbitmq:index/TopicPermissionsPermission:TopicPermissionsPermission": {
            "properties": {
                "exchange": {
                    "type": "string",
                    "description": "The exchange to set the permissions for.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "read": {
                    "type": "string",
                    "description": "The \"read\" ACL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "write": {
                    "type": "string",
                    "description": "The \"write\" ACL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "exchange",
                "read",
                "write"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the rabbitmq package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "cacertFile": {
                "type": "string"
            },
            "clientcertFile": {
                "type": "string"
            },
            "clientkeyFile": {
                "type": "string"
            },
            "endpoint": {
                "type": "string"
            },
            "insecure": {
                "type": "boolean"
            },
            "password": {
                "type": "string"
            },
            "proxy": {
                "type": "string"
            },
            "username": {
                "type": "string"
            }
        },
        "required": [
            "endpoint",
            "password",
            "username"
        ],
        "inputProperties": {
            "cacertFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "RABBITMQ_CACERT"
                    ]
                }
            },
            "clientcertFile": {
                "type": "string"
            },
            "clientkeyFile": {
                "type": "string"
            },
            "endpoint": {
                "type": "string"
            },
            "insecure": {
                "type": "boolean",
                "defaultInfo": {
                    "environment": [
                        "RABBITMQ_INSECURE"
                    ]
                }
            },
            "password": {
                "type": "string"
            },
            "proxy": {
                "type": "string"
            },
            "username": {
                "type": "string"
            }
        },
        "requiredInputs": [
            "endpoint",
            "password",
            "username"
        ]
    },
    "resources": {
        "rabbitmq:index/binding:Binding": {
            "description": "The ``rabbitmq.Binding`` resource creates and manages a binding relationship\nbetween a queue an exchange.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst guest = new rabbitmq.Permissions(\"guest\", {\n    permissions: {\n        configure: \".*\",\n        read: \".*\",\n        write: \".*\",\n    },\n    user: \"guest\",\n    vhost: testVHost.name,\n});\nconst testExchange = new rabbitmq.Exchange(\"test\", {\n    settings: {\n        autoDelete: true,\n        durable: false,\n        type: \"fanout\",\n    },\n    vhost: guest.vhost,\n});\nconst testQueue = new rabbitmq.Queue(\"test\", {\n    settings: {\n        autoDelete: false,\n        durable: true,\n    },\n    vhost: guest.vhost,\n});\nconst testBinding = new rabbitmq.Binding(\"test\", {\n    destination: testQueue.name,\n    destinationType: \"queue\",\n    routingKey: \"#\",\n    source: testExchange.name,\n    vhost: testVHost.name,\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nBindings can be imported using the `id` which is composed of\n\n `vhost/source/destination/destination_type/properties_key`. E.g.\n\n```sh\n $ pulumi import rabbitmq:index/binding:Binding test test/test/test/queue/%23\n```\n\n ",
            "properties": {
                "arguments": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional key/value arguments for the binding.\n"
                },
                "argumentsJson": {
                    "type": "string"
                },
                "destination": {
                    "type": "string",
                    "description": "The destination queue or exchange.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "The type of destination (queue or exchange).\n"
                },
                "propertiesKey": {
                    "type": "string",
                    "description": "A unique key to refer to the binding.\n"
                },
                "routingKey": {
                    "type": "string",
                    "description": "A routing key for the binding.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The source exchange.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "required": [
                "destination",
                "destinationType",
                "propertiesKey",
                "source",
                "vhost"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional key/value arguments for the binding.\n",
                    "willReplaceOnChanges": true
                },
                "argumentsJson": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "destination": {
                    "type": "string",
                    "description": "The destination queue or exchange.\n",
                    "willReplaceOnChanges": true
                },
                "destinationType": {
                    "type": "string",
                    "description": "The type of destination (queue or exchange).\n",
                    "willReplaceOnChanges": true
                },
                "routingKey": {
                    "type": "string",
                    "description": "A routing key for the binding.\n",
                    "willReplaceOnChanges": true
                },
                "source": {
                    "type": "string",
                    "description": "The source exchange.\n",
                    "willReplaceOnChanges": true
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "destination",
                "destinationType",
                "source",
                "vhost"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Binding resources.\n",
                "properties": {
                    "arguments": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Additional key/value arguments for the binding.\n",
                        "willReplaceOnChanges": true
                    },
                    "argumentsJson": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "destination": {
                        "type": "string",
                        "description": "The destination queue or exchange.\n",
                        "willReplaceOnChanges": true
                    },
                    "destinationType": {
                        "type": "string",
                        "description": "The type of destination (queue or exchange).\n",
                        "willReplaceOnChanges": true
                    },
                    "propertiesKey": {
                        "type": "string",
                        "description": "A unique key to refer to the binding.\n"
                    },
                    "routingKey": {
                        "type": "string",
                        "description": "A routing key for the binding.\n",
                        "willReplaceOnChanges": true
                    },
                    "source": {
                        "type": "string",
                        "description": "The source exchange.\n",
                        "willReplaceOnChanges": true
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost to create the resource in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/exchange:Exchange": {
            "description": "The ``rabbitmq.Exchange`` resource creates and manages an exchange.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst guest = new rabbitmq.Permissions(\"guest\", {\n    permissions: {\n        configure: \".*\",\n        read: \".*\",\n        write: \".*\",\n    },\n    user: \"guest\",\n    vhost: testVHost.name,\n});\nconst testExchange = new rabbitmq.Exchange(\"test\", {\n    settings: {\n        autoDelete: true,\n        durable: false,\n        type: \"fanout\",\n    },\n    vhost: guest.vhost,\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nExchanges can be imported using the `id` which is composed of\n\n`name@vhost`. E.g.\n\n```sh\n $ pulumi import rabbitmq:index/exchange:Exchange test test@vhost\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the exchange.\n"
                },
                "settings": {
                    "$ref": "#/types/rabbitmq:index/ExchangeSettings:ExchangeSettings",
                    "description": "The settings of the exchange. The structure is\ndescribed below.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "required": [
                "name",
                "settings"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the exchange.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "$ref": "#/types/rabbitmq:index/ExchangeSettings:ExchangeSettings",
                    "description": "The settings of the exchange. The structure is\ndescribed below.\n",
                    "willReplaceOnChanges": true
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Exchange resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the exchange.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "$ref": "#/types/rabbitmq:index/ExchangeSettings:ExchangeSettings",
                        "description": "The settings of the exchange. The structure is\ndescribed below.\n",
                        "willReplaceOnChanges": true
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost to create the resource in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/federationUpstream:FederationUpstream": {
            "description": "The ``rabbitmq.FederationUpstream`` resource creates and manages a federation upstream parameter.\n\n\n## Import\n\nA Federation upstream can be imported using the resource `id` which is composed of `name@vhost`, e.g.\n\n```sh\n $ pulumi import rabbitmq:index/federationUpstream:FederationUpstream foo foo@test\n```\n\n ",
            "properties": {
                "component": {
                    "type": "string",
                    "description": "Set to `federation-upstream` by the underlying RabbitMQ provider. You do not set this attribute but will see it in state and plan output.\n"
                },
                "definition": {
                    "$ref": "#/types/rabbitmq:index/FederationUpstreamDefinition:FederationUpstreamDefinition",
                    "description": "The configuration of the federation upstream. The structure is described below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the federation upstream.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "required": [
                "component",
                "definition",
                "name",
                "vhost"
            ],
            "inputProperties": {
                "definition": {
                    "$ref": "#/types/rabbitmq:index/FederationUpstreamDefinition:FederationUpstreamDefinition",
                    "description": "The configuration of the federation upstream. The structure is described below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the federation upstream.\n",
                    "willReplaceOnChanges": true
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "definition",
                "vhost"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FederationUpstream resources.\n",
                "properties": {
                    "component": {
                        "type": "string",
                        "description": "Set to `federation-upstream` by the underlying RabbitMQ provider. You do not set this attribute but will see it in state and plan output.\n"
                    },
                    "definition": {
                        "$ref": "#/types/rabbitmq:index/FederationUpstreamDefinition:FederationUpstreamDefinition",
                        "description": "The configuration of the federation upstream. The structure is described below.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the federation upstream.\n",
                        "willReplaceOnChanges": true
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost to create the resource in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/permissions:Permissions": {
            "description": "The ``rabbitmq.Permissions`` resource creates and manages a user's set of\npermissions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst testUser = new rabbitmq.User(\"test\", {\n    password: \"foobar\",\n    tags: [\"administrator\"],\n});\nconst testPermissions = new rabbitmq.Permissions(\"test\", {\n    permissions: {\n        configure: \".*\",\n        read: \".*\",\n        write: \".*\",\n    },\n    user: testUser.name,\n    vhost: testVHost.name,\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPermissions can be imported using the `id` which is composed of\n\n`user@vhost`. E.g.\n\n```sh\n $ pulumi import rabbitmq:index/permissions:Permissions test user@vhost\n```\n\n ",
            "properties": {
                "permissions": {
                    "$ref": "#/types/rabbitmq:index/PermissionsPermissions:PermissionsPermissions",
                    "description": "The settings of the permissions. The structure is\ndescribed below.\n",
                    "language": {
                        "csharp": {
                            "name": "PermissionDetails"
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "The user to apply the permissions to.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "required": [
                "permissions",
                "user"
            ],
            "inputProperties": {
                "permissions": {
                    "$ref": "#/types/rabbitmq:index/PermissionsPermissions:PermissionsPermissions",
                    "description": "The settings of the permissions. The structure is\ndescribed below.\n",
                    "language": {
                        "csharp": {
                            "name": "PermissionDetails"
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "The user to apply the permissions to.\n",
                    "willReplaceOnChanges": true
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "permissions",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Permissions resources.\n",
                "properties": {
                    "permissions": {
                        "$ref": "#/types/rabbitmq:index/PermissionsPermissions:PermissionsPermissions",
                        "description": "The settings of the permissions. The structure is\ndescribed below.\n",
                        "language": {
                            "csharp": {
                                "name": "PermissionDetails"
                            }
                        }
                    },
                    "user": {
                        "type": "string",
                        "description": "The user to apply the permissions to.\n",
                        "willReplaceOnChanges": true
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost to create the resource in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/policy:Policy": {
            "description": "The ``rabbitmq.Policy`` resource creates and manages policies for exchanges\nand queues.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst guest = new rabbitmq.Permissions(\"guest\", {\n    permissions: {\n        configure: \".*\",\n        read: \".*\",\n        write: \".*\",\n    },\n    user: \"guest\",\n    vhost: testVHost.name,\n});\nconst testPolicy = new rabbitmq.Policy(\"test\", {\n    policy: {\n        applyTo: \"all\",\n        definition: {\n            \"ha-mode\": \"all\",\n        },\n        pattern: \".*\",\n        priority: 0,\n    },\n    vhost: guest.vhost,\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPolicies can be imported using the `id` which is composed of `name@vhost`. E.g.\n\n```sh\n $ pulumi import rabbitmq:index/policy:Policy test name@vhost\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the policy.\n"
                },
                "policy": {
                    "$ref": "#/types/rabbitmq:index/PolicyPolicy:PolicyPolicy",
                    "description": "The settings of the policy. The structure is\ndescribed below.\n",
                    "language": {
                        "csharp": {
                            "name": "PolicyBlock"
                        }
                    }
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "required": [
                "name",
                "policy",
                "vhost"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the policy.\n",
                    "willReplaceOnChanges": true
                },
                "policy": {
                    "$ref": "#/types/rabbitmq:index/PolicyPolicy:PolicyPolicy",
                    "description": "The settings of the policy. The structure is\ndescribed below.\n",
                    "language": {
                        "csharp": {
                            "name": "PolicyBlock"
                        }
                    }
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "policy",
                "vhost"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policy resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "policy": {
                        "$ref": "#/types/rabbitmq:index/PolicyPolicy:PolicyPolicy",
                        "description": "The settings of the policy. The structure is\ndescribed below.\n",
                        "language": {
                            "csharp": {
                                "name": "PolicyBlock"
                            }
                        }
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost to create the resource in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/queue:Queue": {
            "description": "The ``rabbitmq.Queue`` resource creates and manages a queue.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n### Basic Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst guest = new rabbitmq.Permissions(\"guest\", {\n    permissions: {\n        configure: \".*\",\n        read: \".*\",\n        write: \".*\",\n    },\n    user: \"guest\",\n    vhost: testVHost.name,\n});\nconst testQueue = new rabbitmq.Queue(\"test\", {\n    settings: {\n        autoDelete: true,\n        durable: false,\n    },\n    vhost: guest.vhost,\n});\n```\n{{% /example %}}\n{{% example %}}\n### Example With JSON Arguments\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst config = new pulumi.Config();\nconst arguments = config.get(\"arguments\") || `{\n  \"x-message-ttl\": 5000\n}\n`;\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst guest = new rabbitmq.Permissions(\"guest\", {\n    permissions: {\n        configure: \".*\",\n        read: \".*\",\n        write: \".*\",\n    },\n    user: \"guest\",\n    vhost: testVHost.name,\n});\nconst testQueue = new rabbitmq.Queue(\"test\", {\n    settings: {\n        argumentsJson: arguments,\n        autoDelete: true,\n        durable: false,\n    },\n    vhost: guest.vhost,\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nQueues can be imported using the `id` which is composed of `name@vhost`. E.g.\n\n```sh\n $ pulumi import rabbitmq:index/queue:Queue test name@vhost\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the queue.\n"
                },
                "settings": {
                    "$ref": "#/types/rabbitmq:index/QueueSettings:QueueSettings",
                    "description": "The settings of the queue. The structure is\ndescribed below.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "required": [
                "name",
                "settings"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the queue.\n",
                    "willReplaceOnChanges": true
                },
                "settings": {
                    "$ref": "#/types/rabbitmq:index/QueueSettings:QueueSettings",
                    "description": "The settings of the queue. The structure is\ndescribed below.\n",
                    "willReplaceOnChanges": true
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Queue resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the queue.\n",
                        "willReplaceOnChanges": true
                    },
                    "settings": {
                        "$ref": "#/types/rabbitmq:index/QueueSettings:QueueSettings",
                        "description": "The settings of the queue. The structure is\ndescribed below.\n",
                        "willReplaceOnChanges": true
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost to create the resource in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/shovel:Shovel": {
            "description": "The ``rabbitmq.Shovel`` resource creates and manages a dynamic shovel.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst testExchange = new rabbitmq.Exchange(\"test\", {\n    settings: {\n        autoDelete: true,\n        durable: false,\n        type: \"fanout\",\n    },\n    vhost: testVHost.name,\n});\nconst testQueue = new rabbitmq.Queue(\"test\", {\n    settings: {\n        autoDelete: true,\n        durable: false,\n    },\n    vhost: testVHost.name,\n});\nconst shovelTest = new rabbitmq.Shovel(\"shovelTest\", {\n    info: {\n        destinationQueue: testQueue.name,\n        destinationUri: \"amqp:///test\",\n        sourceExchange: testExchange.name,\n        sourceExchangeKey: \"test\",\n        sourceUri: \"amqp:///test\",\n    },\n    vhost: testVHost.name,\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nShovels can be imported using the `name` and `vhost` E.g.\n\n```sh\n $ pulumi import rabbitmq:index/shovel:Shovel test shovelTest@test\n```\n\n ",
            "properties": {
                "info": {
                    "$ref": "#/types/rabbitmq:index/ShovelInfo:ShovelInfo",
                    "description": "The settings of the dynamic shovel. The structure is\ndescribed below.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The shovel name.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "required": [
                "info",
                "name",
                "vhost"
            ],
            "inputProperties": {
                "info": {
                    "$ref": "#/types/rabbitmq:index/ShovelInfo:ShovelInfo",
                    "description": "The settings of the dynamic shovel. The structure is\ndescribed below.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "The shovel name.\n",
                    "willReplaceOnChanges": true
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "info",
                "vhost"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Shovel resources.\n",
                "properties": {
                    "info": {
                        "$ref": "#/types/rabbitmq:index/ShovelInfo:ShovelInfo",
                        "description": "The settings of the dynamic shovel. The structure is\ndescribed below.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The shovel name.\n",
                        "willReplaceOnChanges": true
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost to create the resource in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/topicPermissions:TopicPermissions": {
            "description": "The ``rabbitmq.TopicPermissions`` resource creates and manages a user's set of\ntopic permissions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst testUser = new rabbitmq.User(\"test\", {\n    password: \"foobar\",\n    tags: [\"administrator\"],\n});\nconst testTopicPermissions = new rabbitmq.TopicPermissions(\"test\", {\n    permissions: [{\n        exchange: \"amq.topic\",\n        read: \".*\",\n        write: \".*\",\n    }],\n    user: testUser.name,\n    vhost: testVHost.name,\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nPermissions can be imported using the `id` which is composed of\n\n`user@vhost`. E.g.\n\n```sh\n $ pulumi import rabbitmq:index/topicPermissions:TopicPermissions test user@vhost\n```\n\n ",
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rabbitmq:index/TopicPermissionsPermission:TopicPermissionsPermission"
                    },
                    "description": "The settings of the permissions. The structure is\ndescribed below.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The user to apply the permissions to.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "required": [
                "permissions",
                "user"
            ],
            "inputProperties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rabbitmq:index/TopicPermissionsPermission:TopicPermissionsPermission"
                    },
                    "description": "The settings of the permissions. The structure is\ndescribed below.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The user to apply the permissions to.\n",
                    "willReplaceOnChanges": true
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "permissions",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TopicPermissions resources.\n",
                "properties": {
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rabbitmq:index/TopicPermissionsPermission:TopicPermissionsPermission"
                        },
                        "description": "The settings of the permissions. The structure is\ndescribed below.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The user to apply the permissions to.\n",
                        "willReplaceOnChanges": true
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost to create the resource in.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/user:User": {
            "description": "The ``rabbitmq.User`` resource creates and manages a user.\n\n\u003e **Note:** All arguments including username and password will be stored in the raw state as plain-text.\n[Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst test = new rabbitmq.User(\"test\", {\n    password: \"foobar\",\n    tags: [\n        \"administrator\",\n        \"management\",\n    ],\n});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nUsers can be imported using the `name`, e.g.\n\n```sh\n $ pulumi import rabbitmq:index/user:User test mctest\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user. The value of this argument\nis plain-text so make sure to secure where this is defined.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Which permission model to apply to the user. Valid\noptions are: management, policymaker, monitoring, and administrator.\n"
                }
            },
            "required": [
                "name",
                "password"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n",
                    "willReplaceOnChanges": true
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user. The value of this argument\nis plain-text so make sure to secure where this is defined.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Which permission model to apply to the user. Valid\noptions are: management, policymaker, monitoring, and administrator.\n"
                }
            },
            "requiredInputs": [
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n",
                        "willReplaceOnChanges": true
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user. The value of this argument\nis plain-text so make sure to secure where this is defined.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Which permission model to apply to the user. Valid\noptions are: management, policymaker, monitoring, and administrator.\n"
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/vHost:VHost": {
            "description": "The ``rabbitmq.VHost`` resource creates and manages a vhost.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst myVhost = new rabbitmq.VHost(\"my_vhost\", {});\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nVhosts can be imported using the `name`, e.g.\n\n```sh\n $ pulumi import rabbitmq:index/vHost:VHost my_vhost my_vhost\n```\n\n ",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the vhost.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the vhost.\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VHost resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the vhost.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    }
}