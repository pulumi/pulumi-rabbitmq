{
    "name": "rabbitmq",
    "description": "A Pulumi package for creating and managing RabbitMQ resources.",
    "keywords": [
        "pulumi",
        "rabbitmq"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`rabbitmq` Terraform Provider](https://github.com/terraform-providers/terraform-provider-rabbitmq).",
    "repository": "https://github.com/pulumi/pulumi-rabbitmq",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "cacertFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "RABBITMQ_CACERT"
                    ]
                }
            },
            "endpoint": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "RABBITMQ_ENDPOINT"
                    ]
                }
            },
            "insecure": {
                "type": "boolean",
                "defaultInfo": {
                    "environment": [
                        "RABBITMQ_INSECURE"
                    ]
                }
            },
            "password": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "RABBITMQ_PASSWORD"
                    ]
                }
            },
            "username": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "RABBITMQ_USERNAME"
                    ]
                }
            }
        },
        "defaults": [
            "endpoint",
            "password",
            "username"
        ]
    },
    "types": {
        "rabbitmq:/ExchangeSettings:ExchangeSettings": {
            "properties": {
                "arguments": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional key/value settings for the exchange.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoDelete": {
                    "type": "boolean",
                    "description": "Whether the exchange will self-delete when all\nqueues have finished using it.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "durable": {
                    "type": "boolean",
                    "description": "Whether the exchange survives server restarts.\nDefaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The type of exchange.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "type"
            ]
        },
        "rabbitmq:/PermissionsPermissions:PermissionsPermissions": {
            "properties": {
                "configure": {
                    "type": "string",
                    "description": "The \"configure\" ACL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "read": {
                    "type": "string",
                    "description": "The \"read\" ACL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "write": {
                    "type": "string",
                    "description": "The \"write\" ACL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "configure",
                "read",
                "write"
            ]
        },
        "rabbitmq:/PolicyPolicy:PolicyPolicy": {
            "properties": {
                "applyTo": {
                    "type": "string",
                    "description": "Can either be \"exchanges\", \"queues\", or \"all\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "definition": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Key/value pairs of the policy definition. See the\nRabbitMQ documentation for definition references and examples.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pattern": {
                    "type": "string",
                    "description": "A pattern to match an exchange or queue name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "The policy with the greater priority is applied first.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "applyTo",
                "definition",
                "pattern",
                "priority"
            ]
        },
        "rabbitmq:/QueueSettings:QueueSettings": {
            "properties": {
                "arguments": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional key/value settings for the queue.\nAll values will be sent to RabbitMQ as a string. If you require non-string\nvalues, use `arguments_json`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "argumentsJson": {
                    "type": "string",
                    "description": "A nested JSON string which contains additional\nsettings for the queue. This is useful for when the arguments contain\nnon-string values.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoDelete": {
                    "type": "boolean",
                    "description": "Whether the queue will self-delete when all\nconsumers have unsubscribed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "durable": {
                    "type": "boolean",
                    "description": "Whether the queue survives server restarts.\nDefaults to `false`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rabbitmq:/TopicPermissionsPermission:TopicPermissionsPermission": {
            "properties": {
                "exchange": {
                    "type": "string",
                    "description": "The exchange to set the permissions for.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "read": {
                    "type": "string",
                    "description": "The \"read\" ACL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "write": {
                    "type": "string",
                    "description": "The \"write\" ACL.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "exchange",
                "read",
                "write"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the rabbitmq package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "cacertFile": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "RABBITMQ_CACERT"
                    ]
                }
            },
            "endpoint": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "RABBITMQ_ENDPOINT"
                    ]
                }
            },
            "insecure": {
                "type": "boolean",
                "defaultInfo": {
                    "environment": [
                        "RABBITMQ_INSECURE"
                    ]
                }
            },
            "password": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "RABBITMQ_PASSWORD"
                    ]
                }
            },
            "username": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "RABBITMQ_USERNAME"
                    ]
                }
            }
        }
    },
    "resources": {
        "rabbitmq:index/binding:Binding": {
            "description": "The ``rabbitmq..Binding`` resource creates and manages a binding relationship\nbetween a queue an exchange.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst guest = new rabbitmq.Permissions(\"guest\", {\n    permissions: {\n        configure: \".*\",\n        read: \".*\",\n        write: \".*\",\n    },\n    user: \"guest\",\n    vhost: testVHost.name,\n});\nconst testExchange = new rabbitmq.Exchange(\"test\", {\n    settings: {\n        autoDelete: true,\n        durable: false,\n        type: \"fanout\",\n    },\n    vhost: guest.vhost,\n});\nconst testQueue = new rabbitmq.Queue(\"test\", {\n    settings: {\n        autoDelete: false,\n        durable: true,\n    },\n    vhost: guest.vhost,\n});\nconst testBinding = new rabbitmq.Binding(\"test\", {\n    destination: testQueue.name,\n    destinationType: \"queue\",\n    routingKey: \"#\",\n    source: testExchange.name,\n    vhost: testVHost.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_rabbitmq as rabbitmq\n\ntest_v_host = rabbitmq.VHost(\"testVHost\")\nguest = rabbitmq.Permissions(\"guest\",\n    permissions={\n        \"configure\": \".*\",\n        \"read\": \".*\",\n        \"write\": \".*\",\n    },\n    user=\"guest\",\n    vhost=test_v_host.name)\ntest_exchange = rabbitmq.Exchange(\"testExchange\",\n    settings={\n        \"autoDelete\": True,\n        \"durable\": False,\n        \"type\": \"fanout\",\n    },\n    vhost=guest.vhost)\ntest_queue = rabbitmq.Queue(\"testQueue\",\n    settings={\n        \"autoDelete\": False,\n        \"durable\": True,\n    },\n    vhost=guest.vhost)\ntest_binding = rabbitmq.Binding(\"testBinding\",\n    destination=test_queue.name,\n    destination_type=\"queue\",\n    routing_key=\"#\",\n    source=test_exchange.name,\n    vhost=test_v_host.name)\n```\n```csharp\nusing Pulumi;\nusing RabbitMQ = Pulumi.RabbitMQ;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testVHost = new RabbitMQ.VHost(\"testVHost\", new RabbitMQ.VHostArgs\n        {\n        });\n        var guest = new RabbitMQ.Permissions(\"guest\", new RabbitMQ.PermissionsArgs\n        {\n            Permissions = new RabbitMQ.Inputs.PermissionsPermissionsArgs\n            {\n                Configure = \".*\",\n                Read = \".*\",\n                Write = \".*\",\n            },\n            User = \"guest\",\n            Vhost = testVHost.Name,\n        });\n        var testExchange = new RabbitMQ.Exchange(\"testExchange\", new RabbitMQ.ExchangeArgs\n        {\n            Settings = new RabbitMQ.Inputs.ExchangeSettingsArgs\n            {\n                AutoDelete = true,\n                Durable = false,\n                Type = \"fanout\",\n            },\n            Vhost = guest.Vhost,\n        });\n        var testQueue = new RabbitMQ.Queue(\"testQueue\", new RabbitMQ.QueueArgs\n        {\n            Settings = new RabbitMQ.Inputs.QueueSettingsArgs\n            {\n                AutoDelete = false,\n                Durable = true,\n            },\n            Vhost = guest.Vhost,\n        });\n        var testBinding = new RabbitMQ.Binding(\"testBinding\", new RabbitMQ.BindingArgs\n        {\n            Destination = testQueue.Name,\n            DestinationType = \"queue\",\n            RoutingKey = \"#\",\n            Source = testExchange.Name,\n            Vhost = testVHost.Name,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "arguments": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional key/value arguments for the binding.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "The destination queue or exchange.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "The type of destination (queue or exchange).\n"
                },
                "propertiesKey": {
                    "type": "string",
                    "description": "A unique key to refer to the binding.\n"
                },
                "routingKey": {
                    "type": "string",
                    "description": "A routing key for the binding.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The source exchange.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "required": [
                "destination",
                "destinationType",
                "propertiesKey",
                "source",
                "vhost"
            ],
            "inputProperties": {
                "arguments": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Additional key/value arguments for the binding.\n"
                },
                "destination": {
                    "type": "string",
                    "description": "The destination queue or exchange.\n"
                },
                "destinationType": {
                    "type": "string",
                    "description": "The type of destination (queue or exchange).\n"
                },
                "routingKey": {
                    "type": "string",
                    "description": "A routing key for the binding.\n"
                },
                "source": {
                    "type": "string",
                    "description": "The source exchange.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "requiredInputs": [
                "destination",
                "destinationType",
                "source",
                "vhost"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Binding resources.\n",
                "properties": {
                    "arguments": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Additional key/value arguments for the binding.\n"
                    },
                    "destination": {
                        "type": "string",
                        "description": "The destination queue or exchange.\n"
                    },
                    "destinationType": {
                        "type": "string",
                        "description": "The type of destination (queue or exchange).\n"
                    },
                    "propertiesKey": {
                        "type": "string",
                        "description": "A unique key to refer to the binding.\n"
                    },
                    "routingKey": {
                        "type": "string",
                        "description": "A routing key for the binding.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "The source exchange.\n"
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost to create the resource in.\n"
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/exchange:Exchange": {
            "description": "The ``rabbitmq..Exchange`` resource creates and manages an exchange.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst guest = new rabbitmq.Permissions(\"guest\", {\n    permissions: {\n        configure: \".*\",\n        read: \".*\",\n        write: \".*\",\n    },\n    user: \"guest\",\n    vhost: testVHost.name,\n});\nconst testExchange = new rabbitmq.Exchange(\"test\", {\n    settings: {\n        autoDelete: true,\n        durable: false,\n        type: \"fanout\",\n    },\n    vhost: guest.vhost,\n});\n```\n```python\nimport pulumi\nimport pulumi_rabbitmq as rabbitmq\n\ntest_v_host = rabbitmq.VHost(\"testVHost\")\nguest = rabbitmq.Permissions(\"guest\",\n    permissions={\n        \"configure\": \".*\",\n        \"read\": \".*\",\n        \"write\": \".*\",\n    },\n    user=\"guest\",\n    vhost=test_v_host.name)\ntest_exchange = rabbitmq.Exchange(\"testExchange\",\n    settings={\n        \"autoDelete\": True,\n        \"durable\": False,\n        \"type\": \"fanout\",\n    },\n    vhost=guest.vhost)\n```\n```csharp\nusing Pulumi;\nusing RabbitMQ = Pulumi.RabbitMQ;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testVHost = new RabbitMQ.VHost(\"testVHost\", new RabbitMQ.VHostArgs\n        {\n        });\n        var guest = new RabbitMQ.Permissions(\"guest\", new RabbitMQ.PermissionsArgs\n        {\n            Permissions = new RabbitMQ.Inputs.PermissionsPermissionsArgs\n            {\n                Configure = \".*\",\n                Read = \".*\",\n                Write = \".*\",\n            },\n            User = \"guest\",\n            Vhost = testVHost.Name,\n        });\n        var testExchange = new RabbitMQ.Exchange(\"testExchange\", new RabbitMQ.ExchangeArgs\n        {\n            Settings = new RabbitMQ.Inputs.ExchangeSettingsArgs\n            {\n                AutoDelete = true,\n                Durable = false,\n                Type = \"fanout\",\n            },\n            Vhost = guest.Vhost,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the exchange.\n"
                },
                "settings": {
                    "$ref": "#/types/rabbitmq:/ExchangeSettings:ExchangeSettings",
                    "description": "The settings of the exchange. The structure is\ndescribed below.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "required": [
                "name",
                "settings"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the exchange.\n"
                },
                "settings": {
                    "$ref": "#/types/rabbitmq:/ExchangeSettings:ExchangeSettings",
                    "description": "The settings of the exchange. The structure is\ndescribed below.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "requiredInputs": [
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Exchange resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the exchange.\n"
                    },
                    "settings": {
                        "$ref": "#/types/rabbitmq:/ExchangeSettings:ExchangeSettings",
                        "description": "The settings of the exchange. The structure is\ndescribed below.\n"
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost to create the resource in.\n"
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/permissions:Permissions": {
            "description": "The ``rabbitmq..Permissions`` resource creates and manages a user's set of\npermissions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst testUser = new rabbitmq.User(\"test\", {\n    password: \"foobar\",\n    tags: [\"administrator\"],\n});\nconst testPermissions = new rabbitmq.Permissions(\"test\", {\n    permissions: {\n        configure: \".*\",\n        read: \".*\",\n        write: \".*\",\n    },\n    user: testUser.name,\n    vhost: testVHost.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_rabbitmq as rabbitmq\n\ntest_v_host = rabbitmq.VHost(\"testVHost\")\ntest_user = rabbitmq.User(\"testUser\",\n    password=\"foobar\",\n    tags=[\"administrator\"])\ntest_permissions = rabbitmq.Permissions(\"testPermissions\",\n    permissions={\n        \"configure\": \".*\",\n        \"read\": \".*\",\n        \"write\": \".*\",\n    },\n    user=test_user.name,\n    vhost=test_v_host.name)\n```\n```csharp\nusing Pulumi;\nusing RabbitMQ = Pulumi.RabbitMQ;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testVHost = new RabbitMQ.VHost(\"testVHost\", new RabbitMQ.VHostArgs\n        {\n        });\n        var testUser = new RabbitMQ.User(\"testUser\", new RabbitMQ.UserArgs\n        {\n            Password = \"foobar\",\n            Tags = \n            {\n                \"administrator\",\n            },\n        });\n        var testPermissions = new RabbitMQ.Permissions(\"testPermissions\", new RabbitMQ.PermissionsArgs\n        {\n            Permissions = new RabbitMQ.Inputs.PermissionsPermissionsArgs\n            {\n                Configure = \".*\",\n                Read = \".*\",\n                Write = \".*\",\n            },\n            User = testUser.Name,\n            Vhost = testVHost.Name,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "permissions": {
                    "$ref": "#/types/rabbitmq:/PermissionsPermissions:PermissionsPermissions",
                    "description": "The settings of the permissions. The structure is\ndescribed below.\n",
                    "language": {
                        "csharp": {
                            "name": "PermissionDetails"
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "The user to apply the permissions to.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "required": [
                "permissions",
                "user"
            ],
            "inputProperties": {
                "permissions": {
                    "$ref": "#/types/rabbitmq:/PermissionsPermissions:PermissionsPermissions",
                    "description": "The settings of the permissions. The structure is\ndescribed below.\n",
                    "language": {
                        "csharp": {
                            "name": "PermissionDetails"
                        }
                    }
                },
                "user": {
                    "type": "string",
                    "description": "The user to apply the permissions to.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Permissions resources.\n",
                "properties": {
                    "permissions": {
                        "$ref": "#/types/rabbitmq:/PermissionsPermissions:PermissionsPermissions",
                        "description": "The settings of the permissions. The structure is\ndescribed below.\n",
                        "language": {
                            "csharp": {
                                "name": "PermissionDetails"
                            }
                        }
                    },
                    "user": {
                        "type": "string",
                        "description": "The user to apply the permissions to.\n"
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost to create the resource in.\n"
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/policy:Policy": {
            "description": "The ``rabbitmq..Policy`` resource creates and manages policies for exchanges\nand queues.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst guest = new rabbitmq.Permissions(\"guest\", {\n    permissions: {\n        configure: \".*\",\n        read: \".*\",\n        write: \".*\",\n    },\n    user: \"guest\",\n    vhost: testVHost.name,\n});\nconst testPolicy = new rabbitmq.Policy(\"test\", {\n    policy: {\n        applyTo: \"all\",\n        definition: {\n            \"ha-mode\": \"all\",\n        },\n        pattern: \".*\",\n        priority: 0,\n    },\n    vhost: guest.vhost,\n});\n```\n```python\nimport pulumi\nimport pulumi_rabbitmq as rabbitmq\n\ntest_v_host = rabbitmq.VHost(\"testVHost\")\nguest = rabbitmq.Permissions(\"guest\",\n    permissions={\n        \"configure\": \".*\",\n        \"read\": \".*\",\n        \"write\": \".*\",\n    },\n    user=\"guest\",\n    vhost=test_v_host.name)\ntest_policy = rabbitmq.Policy(\"testPolicy\",\n    policy={\n        \"applyTo\": \"all\",\n        \"definition\": {\n            \"ha-mode\": \"all\",\n        },\n        \"pattern\": \".*\",\n        \"priority\": 0,\n    },\n    vhost=guest.vhost)\n```\n```csharp\nusing Pulumi;\nusing RabbitMQ = Pulumi.RabbitMQ;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testVHost = new RabbitMQ.VHost(\"testVHost\", new RabbitMQ.VHostArgs\n        {\n        });\n        var guest = new RabbitMQ.Permissions(\"guest\", new RabbitMQ.PermissionsArgs\n        {\n            Permissions = new RabbitMQ.Inputs.PermissionsPermissionsArgs\n            {\n                Configure = \".*\",\n                Read = \".*\",\n                Write = \".*\",\n            },\n            User = \"guest\",\n            Vhost = testVHost.Name,\n        });\n        var testPolicy = new RabbitMQ.Policy(\"testPolicy\", new RabbitMQ.PolicyArgs\n        {\n            Policy = new RabbitMQ.Inputs.PolicyPolicyArgs\n            {\n                ApplyTo = \"all\",\n                Definition = \n                {\n                    { \"ha-mode\", \"all\" },\n                },\n                Pattern = \".*\",\n                Priority = 0,\n            },\n            Vhost = guest.Vhost,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the policy.\n"
                },
                "policy": {
                    "$ref": "#/types/rabbitmq:/PolicyPolicy:PolicyPolicy",
                    "description": "The settings of the policy. The structure is\ndescribed below.\n",
                    "language": {
                        "csharp": {
                            "name": "PolicyBlock"
                        }
                    }
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "required": [
                "name",
                "policy",
                "vhost"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the policy.\n"
                },
                "policy": {
                    "$ref": "#/types/rabbitmq:/PolicyPolicy:PolicyPolicy",
                    "description": "The settings of the policy. The structure is\ndescribed below.\n",
                    "language": {
                        "csharp": {
                            "name": "PolicyBlock"
                        }
                    }
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "requiredInputs": [
                "policy",
                "vhost"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policy resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the policy.\n"
                    },
                    "policy": {
                        "$ref": "#/types/rabbitmq:/PolicyPolicy:PolicyPolicy",
                        "description": "The settings of the policy. The structure is\ndescribed below.\n",
                        "language": {
                            "csharp": {
                                "name": "PolicyBlock"
                            }
                        }
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost to create the resource in.\n"
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/queue:Queue": {
            "description": "The ``rabbitmq..Queue`` resource creates and manages a queue.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n### Basic Example\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst guest = new rabbitmq.Permissions(\"guest\", {\n    permissions: {\n        configure: \".*\",\n        read: \".*\",\n        write: \".*\",\n    },\n    user: \"guest\",\n    vhost: testVHost.name,\n});\nconst testQueue = new rabbitmq.Queue(\"test\", {\n    settings: {\n        autoDelete: true,\n        durable: false,\n    },\n    vhost: guest.vhost,\n});\n```\n```python\nimport pulumi\nimport pulumi_rabbitmq as rabbitmq\n\ntest_v_host = rabbitmq.VHost(\"testVHost\")\nguest = rabbitmq.Permissions(\"guest\",\n    permissions={\n        \"configure\": \".*\",\n        \"read\": \".*\",\n        \"write\": \".*\",\n    },\n    user=\"guest\",\n    vhost=test_v_host.name)\ntest_queue = rabbitmq.Queue(\"testQueue\",\n    settings={\n        \"autoDelete\": True,\n        \"durable\": False,\n    },\n    vhost=guest.vhost)\n```\n```csharp\nusing Pulumi;\nusing RabbitMQ = Pulumi.RabbitMQ;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testVHost = new RabbitMQ.VHost(\"testVHost\", new RabbitMQ.VHostArgs\n        {\n        });\n        var guest = new RabbitMQ.Permissions(\"guest\", new RabbitMQ.PermissionsArgs\n        {\n            Permissions = new RabbitMQ.Inputs.PermissionsPermissionsArgs\n            {\n                Configure = \".*\",\n                Read = \".*\",\n                Write = \".*\",\n            },\n            User = \"guest\",\n            Vhost = testVHost.Name,\n        });\n        var testQueue = new RabbitMQ.Queue(\"testQueue\", new RabbitMQ.QueueArgs\n        {\n            Settings = new RabbitMQ.Inputs.QueueSettingsArgs\n            {\n                AutoDelete = true,\n                Durable = false,\n            },\n            Vhost = guest.Vhost,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### Example With JSON Arguments\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst config = new pulumi.Config();\nconst arguments = config.get(\"arguments\") || `{\n  \"x-message-ttl\": 5000\n}\n`;\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst guest = new rabbitmq.Permissions(\"guest\", {\n    permissions: {\n        configure: \".*\",\n        read: \".*\",\n        write: \".*\",\n    },\n    user: \"guest\",\n    vhost: testVHost.name,\n});\nconst testQueue = new rabbitmq.Queue(\"test\", {\n    settings: {\n        argumentsJson: arguments,\n        autoDelete: true,\n        durable: false,\n    },\n    vhost: guest.vhost,\n});\n```\n```python\nimport pulumi\nimport pulumi_rabbitmq as rabbitmq\n\nconfig = pulumi.Config()\narguments = config.get(\"arguments\")\nif arguments is None:\n    arguments = \"\"\"{\n  \"x-message-ttl\": 5000\n}\n\n\"\"\"\ntest_v_host = rabbitmq.VHost(\"testVHost\")\nguest = rabbitmq.Permissions(\"guest\",\n    permissions={\n        \"configure\": \".*\",\n        \"read\": \".*\",\n        \"write\": \".*\",\n    },\n    user=\"guest\",\n    vhost=test_v_host.name)\ntest_queue = rabbitmq.Queue(\"testQueue\",\n    settings={\n        \"argumentsJson\": arguments,\n        \"autoDelete\": True,\n        \"durable\": False,\n    },\n    vhost=guest.vhost)\n```\n```csharp\nusing Pulumi;\nusing RabbitMQ = Pulumi.RabbitMQ;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var config = new Config();\n        var arguments = config.Get(\"arguments\") ?? @\"{\n  \"\"x-message-ttl\"\": 5000\n}\n\n\";\n        var testVHost = new RabbitMQ.VHost(\"testVHost\", new RabbitMQ.VHostArgs\n        {\n        });\n        var guest = new RabbitMQ.Permissions(\"guest\", new RabbitMQ.PermissionsArgs\n        {\n            Permissions = new RabbitMQ.Inputs.PermissionsPermissionsArgs\n            {\n                Configure = \".*\",\n                Read = \".*\",\n                Write = \".*\",\n            },\n            User = \"guest\",\n            Vhost = testVHost.Name,\n        });\n        var testQueue = new RabbitMQ.Queue(\"testQueue\", new RabbitMQ.QueueArgs\n        {\n            Settings = new RabbitMQ.Inputs.QueueSettingsArgs\n            {\n                ArgumentsJson = arguments,\n                AutoDelete = true,\n                Durable = false,\n            },\n            Vhost = guest.Vhost,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the queue.\n"
                },
                "settings": {
                    "$ref": "#/types/rabbitmq:/QueueSettings:QueueSettings",
                    "description": "The settings of the queue. The structure is\ndescribed below.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "required": [
                "name",
                "settings"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the queue.\n"
                },
                "settings": {
                    "$ref": "#/types/rabbitmq:/QueueSettings:QueueSettings",
                    "description": "The settings of the queue. The structure is\ndescribed below.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "requiredInputs": [
                "settings"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Queue resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the queue.\n"
                    },
                    "settings": {
                        "$ref": "#/types/rabbitmq:/QueueSettings:QueueSettings",
                        "description": "The settings of the queue. The structure is\ndescribed below.\n"
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost to create the resource in.\n"
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/topicPermissions:TopicPermissions": {
            "description": "The ``rabbitmq..TopicPermissions`` resource creates and manages a user's set of\ntopic permissions.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst testVHost = new rabbitmq.VHost(\"test\", {});\nconst testUser = new rabbitmq.User(\"test\", {\n    password: \"foobar\",\n    tags: [\"administrator\"],\n});\nconst testTopicPermissions = new rabbitmq.TopicPermissions(\"test\", {\n    permissions: [{\n        exchange: \"amq.topic\",\n        read: \".*\",\n        write: \".*\",\n    }],\n    user: testUser.name,\n    vhost: testVHost.name,\n});\n```\n```python\nimport pulumi\nimport pulumi_rabbitmq as rabbitmq\n\ntest_v_host = rabbitmq.VHost(\"testVHost\")\ntest_user = rabbitmq.User(\"testUser\",\n    password=\"foobar\",\n    tags=[\"administrator\"])\ntest_topic_permissions = rabbitmq.TopicPermissions(\"testTopicPermissions\",\n    permissions=[{\n        \"exchange\": \"amq.topic\",\n        \"read\": \".*\",\n        \"write\": \".*\",\n    }],\n    user=test_user.name,\n    vhost=test_v_host.name)\n```\n```csharp\nusing Pulumi;\nusing RabbitMQ = Pulumi.RabbitMQ;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testVHost = new RabbitMQ.VHost(\"testVHost\", new RabbitMQ.VHostArgs\n        {\n        });\n        var testUser = new RabbitMQ.User(\"testUser\", new RabbitMQ.UserArgs\n        {\n            Password = \"foobar\",\n            Tags = \n            {\n                \"administrator\",\n            },\n        });\n        var testTopicPermissions = new RabbitMQ.TopicPermissions(\"testTopicPermissions\", new RabbitMQ.TopicPermissionsArgs\n        {\n            Permissions = \n            {\n                new RabbitMQ.Inputs.TopicPermissionsPermissionArgs\n                {\n                    Exchange = \"amq.topic\",\n                    Read = \".*\",\n                    Write = \".*\",\n                },\n            },\n            User = testUser.Name,\n            Vhost = testVHost.Name,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rabbitmq:/TopicPermissionsPermission:TopicPermissionsPermission"
                    },
                    "description": "The settings of the permissions. The structure is\ndescribed below.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The user to apply the permissions to.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "required": [
                "permissions",
                "user"
            ],
            "inputProperties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rabbitmq:/TopicPermissionsPermission:TopicPermissionsPermission"
                    },
                    "description": "The settings of the permissions. The structure is\ndescribed below.\n"
                },
                "user": {
                    "type": "string",
                    "description": "The user to apply the permissions to.\n"
                },
                "vhost": {
                    "type": "string",
                    "description": "The vhost to create the resource in.\n"
                }
            },
            "requiredInputs": [
                "permissions",
                "user"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TopicPermissions resources.\n",
                "properties": {
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rabbitmq:/TopicPermissionsPermission:TopicPermissionsPermission"
                        },
                        "description": "The settings of the permissions. The structure is\ndescribed below.\n"
                    },
                    "user": {
                        "type": "string",
                        "description": "The user to apply the permissions to.\n"
                    },
                    "vhost": {
                        "type": "string",
                        "description": "The vhost to create the resource in.\n"
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/user:User": {
            "description": "The ``rabbitmq..User`` resource creates and manages a user.\n\n\u003e **Note:** All arguments including username and password will be stored in the raw state as plain-text.\n[Read more about sensitive data in state](https://www.terraform.io/docs/state/sensitive-data.html).\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst test = new rabbitmq.User(\"test\", {\n    password: \"foobar\",\n    tags: [\n        \"administrator\",\n        \"management\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_rabbitmq as rabbitmq\n\ntest = rabbitmq.User(\"test\",\n    password=\"foobar\",\n    tags=[\n        \"administrator\",\n        \"management\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing RabbitMQ = Pulumi.RabbitMQ;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new RabbitMQ.User(\"test\", new RabbitMQ.UserArgs\n        {\n            Password = \"foobar\",\n            Tags = \n            {\n                \"administrator\",\n                \"management\",\n            },\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user. The value of this argument\nis plain-text so make sure to secure where this is defined.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Which permission model to apply to the user. Valid\noptions are: management, policymaker, monitoring, and administrator.\n"
                }
            },
            "required": [
                "name",
                "password"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The password of the user. The value of this argument\nis plain-text so make sure to secure where this is defined.\n"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Which permission model to apply to the user. Valid\noptions are: management, policymaker, monitoring, and administrator.\n"
                }
            },
            "requiredInputs": [
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering User resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the user.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The password of the user. The value of this argument\nis plain-text so make sure to secure where this is defined.\n"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Which permission model to apply to the user. Valid\noptions are: management, policymaker, monitoring, and administrator.\n"
                    }
                },
                "type": "object"
            }
        },
        "rabbitmq:index/vHost:VHost": {
            "description": "The ``rabbitmq..VHost`` resource creates and manages a vhost.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rabbitmq from \"@pulumi/rabbitmq\";\n\nconst myVhost = new rabbitmq.VHost(\"my_vhost\", {});\n```\n```python\nimport pulumi\nimport pulumi_rabbitmq as rabbitmq\n\nmy_vhost = rabbitmq.VHost(\"myVhost\")\n```\n```csharp\nusing Pulumi;\nusing RabbitMQ = Pulumi.RabbitMQ;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myVhost = new RabbitMQ.VHost(\"myVhost\", new RabbitMQ.VHostArgs\n        {\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the vhost.\n"
                }
            },
            "required": [
                "name"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the vhost.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VHost resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the vhost.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": {
                "rabbitmq": "RabbitMQ"
            },
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "packageDescription": "A Pulumi package for creating and managing RabbitMQ resources.",
            "packageName": "",
            "typescriptVersion": ""
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=2.0.0,\u003c3.0.0"
            }
        }
    }
}