// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package rabbitmq

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type TopicPermissions struct {
	pulumi.CustomResourceState

	Permissions TopicPermissionsPermissionArrayOutput `pulumi:"permissions"`
	User pulumi.StringOutput `pulumi:"user"`
	Vhost pulumi.StringPtrOutput `pulumi:"vhost"`
}

// NewTopicPermissions registers a new resource with the given unique name, arguments, and options.
func NewTopicPermissions(ctx *pulumi.Context,
	name string, args *TopicPermissionsArgs, opts ...pulumi.ResourceOption) (*TopicPermissions, error) {
	if args == nil || args.Permissions == nil {
		return nil, errors.New("missing required argument 'Permissions'")
	}
	if args == nil || args.User == nil {
		return nil, errors.New("missing required argument 'User'")
	}
	if args == nil {
		args = &TopicPermissionsArgs{}
	}
	var resource TopicPermissions
	err := ctx.RegisterResource("rabbitmq:index/topicPermissions:TopicPermissions", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTopicPermissions gets an existing TopicPermissions resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTopicPermissions(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TopicPermissionsState, opts ...pulumi.ResourceOption) (*TopicPermissions, error) {
	var resource TopicPermissions
	err := ctx.ReadResource("rabbitmq:index/topicPermissions:TopicPermissions", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TopicPermissions resources.
type topicPermissionsState struct {
	Permissions []TopicPermissionsPermission `pulumi:"permissions"`
	User *string `pulumi:"user"`
	Vhost *string `pulumi:"vhost"`
}

type TopicPermissionsState struct {
	Permissions TopicPermissionsPermissionArrayInput
	User pulumi.StringPtrInput
	Vhost pulumi.StringPtrInput
}

func (TopicPermissionsState) ElementType() reflect.Type {
	return reflect.TypeOf((*topicPermissionsState)(nil)).Elem()
}

type topicPermissionsArgs struct {
	Permissions []TopicPermissionsPermission `pulumi:"permissions"`
	User string `pulumi:"user"`
	Vhost *string `pulumi:"vhost"`
}

// The set of arguments for constructing a TopicPermissions resource.
type TopicPermissionsArgs struct {
	Permissions TopicPermissionsPermissionArrayInput
	User pulumi.StringInput
	Vhost pulumi.StringPtrInput
}

func (TopicPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*topicPermissionsArgs)(nil)).Elem()
}

