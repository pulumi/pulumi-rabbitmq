// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rabbitmq

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type FederationUpstream struct {
	pulumi.CustomResourceState

	Component  pulumi.StringOutput                `pulumi:"component"`
	Definition FederationUpstreamDefinitionOutput `pulumi:"definition"`
	Name       pulumi.StringOutput                `pulumi:"name"`
	Vhost      pulumi.StringOutput                `pulumi:"vhost"`
}

// NewFederationUpstream registers a new resource with the given unique name, arguments, and options.
func NewFederationUpstream(ctx *pulumi.Context,
	name string, args *FederationUpstreamArgs, opts ...pulumi.ResourceOption) (*FederationUpstream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	if args.Vhost == nil {
		return nil, errors.New("invalid value for required argument 'Vhost'")
	}
	var resource FederationUpstream
	err := ctx.RegisterResource("rabbitmq:index/federationUpstream:FederationUpstream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFederationUpstream gets an existing FederationUpstream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFederationUpstream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FederationUpstreamState, opts ...pulumi.ResourceOption) (*FederationUpstream, error) {
	var resource FederationUpstream
	err := ctx.ReadResource("rabbitmq:index/federationUpstream:FederationUpstream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FederationUpstream resources.
type federationUpstreamState struct {
	Component  *string                       `pulumi:"component"`
	Definition *FederationUpstreamDefinition `pulumi:"definition"`
	Name       *string                       `pulumi:"name"`
	Vhost      *string                       `pulumi:"vhost"`
}

type FederationUpstreamState struct {
	Component  pulumi.StringPtrInput
	Definition FederationUpstreamDefinitionPtrInput
	Name       pulumi.StringPtrInput
	Vhost      pulumi.StringPtrInput
}

func (FederationUpstreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*federationUpstreamState)(nil)).Elem()
}

type federationUpstreamArgs struct {
	Definition FederationUpstreamDefinition `pulumi:"definition"`
	Name       *string                      `pulumi:"name"`
	Vhost      string                       `pulumi:"vhost"`
}

// The set of arguments for constructing a FederationUpstream resource.
type FederationUpstreamArgs struct {
	Definition FederationUpstreamDefinitionInput
	Name       pulumi.StringPtrInput
	Vhost      pulumi.StringInput
}

func (FederationUpstreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*federationUpstreamArgs)(nil)).Elem()
}

type FederationUpstreamInput interface {
	pulumi.Input

	ToFederationUpstreamOutput() FederationUpstreamOutput
	ToFederationUpstreamOutputWithContext(ctx context.Context) FederationUpstreamOutput
}

func (FederationUpstream) ElementType() reflect.Type {
	return reflect.TypeOf((*FederationUpstream)(nil)).Elem()
}

func (i FederationUpstream) ToFederationUpstreamOutput() FederationUpstreamOutput {
	return i.ToFederationUpstreamOutputWithContext(context.Background())
}

func (i FederationUpstream) ToFederationUpstreamOutputWithContext(ctx context.Context) FederationUpstreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederationUpstreamOutput)
}

type FederationUpstreamOutput struct {
	*pulumi.OutputState
}

func (FederationUpstreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederationUpstreamOutput)(nil)).Elem()
}

func (o FederationUpstreamOutput) ToFederationUpstreamOutput() FederationUpstreamOutput {
	return o
}

func (o FederationUpstreamOutput) ToFederationUpstreamOutputWithContext(ctx context.Context) FederationUpstreamOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(FederationUpstreamOutput{})
}
