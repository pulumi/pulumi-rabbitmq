// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rabbitmq

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The ``Policy`` resource creates and manages policies for exchanges
// and queues.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rabbitmq/sdk/v2/go/rabbitmq"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testVHost, err := rabbitmq.NewVHost(ctx, "testVHost", nil)
// 		if err != nil {
// 			return err
// 		}
// 		guest, err := rabbitmq.NewPermissions(ctx, "guest", &rabbitmq.PermissionsArgs{
// 			Permissions: &rabbitmq.PermissionsPermissionsArgs{
// 				Configure: pulumi.String(".*"),
// 				Read:      pulumi.String(".*"),
// 				Write:     pulumi.String(".*"),
// 			},
// 			User:  pulumi.String("guest"),
// 			Vhost: testVHost.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = rabbitmq.NewPolicy(ctx, "testPolicy", &rabbitmq.PolicyArgs{
// 			Policy: &rabbitmq.PolicyPolicyArgs{
// 				ApplyTo: pulumi.String("all"),
// 				Definition: pulumi.StringMap{
// 					"ha-mode": pulumi.String("all"),
// 				},
// 				Pattern:  pulumi.String(".*"),
// 				Priority: pulumi.Int(0),
// 			},
// 			Vhost: guest.Vhost,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Policies can be imported using the `id` which is composed of `name@vhost`. E.g.
//
// ```sh
//  $ pulumi import rabbitmq:index/policy:Policy test name@vhost
// ```
type Policy struct {
	pulumi.CustomResourceState

	// The name of the policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The settings of the policy. The structure is
	// described below.
	Policy PolicyPolicyOutput `pulumi:"policy"`
	// The vhost to create the resource in.
	Vhost pulumi.StringOutput `pulumi:"vhost"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil || args.Policy == nil {
		return nil, errors.New("missing required argument 'Policy'")
	}
	if args == nil || args.Vhost == nil {
		return nil, errors.New("missing required argument 'Vhost'")
	}
	if args == nil {
		args = &PolicyArgs{}
	}
	var resource Policy
	err := ctx.RegisterResource("rabbitmq:index/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("rabbitmq:index/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	// The name of the policy.
	Name *string `pulumi:"name"`
	// The settings of the policy. The structure is
	// described below.
	Policy *PolicyPolicy `pulumi:"policy"`
	// The vhost to create the resource in.
	Vhost *string `pulumi:"vhost"`
}

type PolicyState struct {
	// The name of the policy.
	Name pulumi.StringPtrInput
	// The settings of the policy. The structure is
	// described below.
	Policy PolicyPolicyPtrInput
	// The vhost to create the resource in.
	Vhost pulumi.StringPtrInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	// The name of the policy.
	Name *string `pulumi:"name"`
	// The settings of the policy. The structure is
	// described below.
	Policy PolicyPolicy `pulumi:"policy"`
	// The vhost to create the resource in.
	Vhost string `pulumi:"vhost"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// The name of the policy.
	Name pulumi.StringPtrInput
	// The settings of the policy. The structure is
	// described below.
	Policy PolicyPolicyInput
	// The vhost to create the resource in.
	Vhost pulumi.StringInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (Policy) ElementType() reflect.Type {
	return reflect.TypeOf((*Policy)(nil)).Elem()
}

func (i Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

type PolicyOutput struct {
	*pulumi.OutputState
}

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyOutput)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PolicyOutput{})
}
