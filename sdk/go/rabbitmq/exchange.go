// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rabbitmq

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The ``Exchange`` resource creates and manages an exchange.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rabbitmq/sdk/v2/go/rabbitmq"
// 	"github.com/pulumi/pulumi-rabbitmq/sdk/v2/go/rabbitmq/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testVHost, err := rabbitmq.NewVHost(ctx, "testVHost", nil)
// 		if err != nil {
// 			return err
// 		}
// 		guest, err := rabbitmq.NewPermissions(ctx, "guest", &rabbitmq.PermissionsArgs{
// 			Permissions: &rabbitmq.PermissionsPermissionsArgs{
// 				Configure: pulumi.String(".*"),
// 				Read:      pulumi.String(".*"),
// 				Write:     pulumi.String(".*"),
// 			},
// 			User:  pulumi.String("guest"),
// 			Vhost: testVHost.Name,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = rabbitmq.NewExchange(ctx, "testExchange", &rabbitmq.ExchangeArgs{
// 			Settings: &rabbitmq.ExchangeSettingsArgs{
// 				AutoDelete: pulumi.Bool(true),
// 				Durable:    pulumi.Bool(false),
// 				Type:       pulumi.String("fanout"),
// 			},
// 			Vhost: guest.Vhost,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Exchanges can be imported using the `id` which is composed of
//
// `name@vhost`. E.g.
//
// ```sh
//  $ pulumi import rabbitmq:index/exchange:Exchange test test@vhost
// ```
type Exchange struct {
	pulumi.CustomResourceState

	// The name of the exchange.
	Name pulumi.StringOutput `pulumi:"name"`
	// The settings of the exchange. The structure is
	// described below.
	Settings ExchangeSettingsOutput `pulumi:"settings"`
	// The vhost to create the resource in.
	Vhost pulumi.StringPtrOutput `pulumi:"vhost"`
}

// NewExchange registers a new resource with the given unique name, arguments, and options.
func NewExchange(ctx *pulumi.Context,
	name string, args *ExchangeArgs, opts ...pulumi.ResourceOption) (*Exchange, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Settings == nil {
		return nil, errors.New("invalid value for required argument 'Settings'")
	}
	var resource Exchange
	err := ctx.RegisterResource("rabbitmq:index/exchange:Exchange", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExchange gets an existing Exchange resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExchange(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExchangeState, opts ...pulumi.ResourceOption) (*Exchange, error) {
	var resource Exchange
	err := ctx.ReadResource("rabbitmq:index/exchange:Exchange", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Exchange resources.
type exchangeState struct {
	// The name of the exchange.
	Name *string `pulumi:"name"`
	// The settings of the exchange. The structure is
	// described below.
	Settings *ExchangeSettings `pulumi:"settings"`
	// The vhost to create the resource in.
	Vhost *string `pulumi:"vhost"`
}

type ExchangeState struct {
	// The name of the exchange.
	Name pulumi.StringPtrInput
	// The settings of the exchange. The structure is
	// described below.
	Settings ExchangeSettingsPtrInput
	// The vhost to create the resource in.
	Vhost pulumi.StringPtrInput
}

func (ExchangeState) ElementType() reflect.Type {
	return reflect.TypeOf((*exchangeState)(nil)).Elem()
}

type exchangeArgs struct {
	// The name of the exchange.
	Name *string `pulumi:"name"`
	// The settings of the exchange. The structure is
	// described below.
	Settings ExchangeSettings `pulumi:"settings"`
	// The vhost to create the resource in.
	Vhost *string `pulumi:"vhost"`
}

// The set of arguments for constructing a Exchange resource.
type ExchangeArgs struct {
	// The name of the exchange.
	Name pulumi.StringPtrInput
	// The settings of the exchange. The structure is
	// described below.
	Settings ExchangeSettingsInput
	// The vhost to create the resource in.
	Vhost pulumi.StringPtrInput
}

func (ExchangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*exchangeArgs)(nil)).Elem()
}

type ExchangeInput interface {
	pulumi.Input

	ToExchangeOutput() ExchangeOutput
	ToExchangeOutputWithContext(ctx context.Context) ExchangeOutput
}

func (*Exchange) ElementType() reflect.Type {
	return reflect.TypeOf((*Exchange)(nil))
}

func (i *Exchange) ToExchangeOutput() ExchangeOutput {
	return i.ToExchangeOutputWithContext(context.Background())
}

func (i *Exchange) ToExchangeOutputWithContext(ctx context.Context) ExchangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeOutput)
}

type ExchangeOutput struct {
	*pulumi.OutputState
}

func (ExchangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Exchange)(nil))
}

func (o ExchangeOutput) ToExchangeOutput() ExchangeOutput {
	return o
}

func (o ExchangeOutput) ToExchangeOutputWithContext(ctx context.Context) ExchangeOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ExchangeOutput{})
}
