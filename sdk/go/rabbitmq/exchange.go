// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package rabbitmq

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The ``.Exchange`` resource creates and manages an exchange.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rabbitmq/blob/master/website/docs/r/exchange.html.markdown.
type Exchange struct {
	pulumi.CustomResourceState

	// The name of the exchange.
	Name pulumi.StringOutput `pulumi:"name"`
	// The settings of the exchange. The structure is
	// described below.
	Settings ExchangeSettingsOutput `pulumi:"settings"`
	// The vhost to create the resource in.
	Vhost pulumi.StringPtrOutput `pulumi:"vhost"`
}

// NewExchange registers a new resource with the given unique name, arguments, and options.
func NewExchange(ctx *pulumi.Context,
	name string, args *ExchangeArgs, opts ...pulumi.ResourceOption) (*Exchange, error) {
	if args == nil || args.Settings == nil {
		return nil, errors.New("missing required argument 'Settings'")
	}
	if args == nil {
		args = &ExchangeArgs{}
	}
	var resource Exchange
	err := ctx.RegisterResource("rabbitmq:index/exchange:Exchange", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetExchange gets an existing Exchange resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetExchange(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ExchangeState, opts ...pulumi.ResourceOption) (*Exchange, error) {
	var resource Exchange
	err := ctx.ReadResource("rabbitmq:index/exchange:Exchange", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Exchange resources.
type exchangeState struct {
	// The name of the exchange.
	Name *string `pulumi:"name"`
	// The settings of the exchange. The structure is
	// described below.
	Settings *ExchangeSettings `pulumi:"settings"`
	// The vhost to create the resource in.
	Vhost *string `pulumi:"vhost"`
}

type ExchangeState struct {
	// The name of the exchange.
	Name pulumi.StringPtrInput
	// The settings of the exchange. The structure is
	// described below.
	Settings ExchangeSettingsPtrInput
	// The vhost to create the resource in.
	Vhost pulumi.StringPtrInput
}

func (ExchangeState) ElementType() reflect.Type {
	return reflect.TypeOf((*exchangeState)(nil)).Elem()
}

type exchangeArgs struct {
	// The name of the exchange.
	Name *string `pulumi:"name"`
	// The settings of the exchange. The structure is
	// described below.
	Settings ExchangeSettings `pulumi:"settings"`
	// The vhost to create the resource in.
	Vhost *string `pulumi:"vhost"`
}

// The set of arguments for constructing a Exchange resource.
type ExchangeArgs struct {
	// The name of the exchange.
	Name pulumi.StringPtrInput
	// The settings of the exchange. The structure is
	// described below.
	Settings ExchangeSettingsInput
	// The vhost to create the resource in.
	Vhost pulumi.StringPtrInput
}

func (ExchangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*exchangeArgs)(nil)).Elem()
}

