// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rabbitmq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-rabbitmq/sdk/v3/go/rabbitmq/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = internal.GetEnvOrDefault

type ExchangeSettings struct {
	// Additional key/value settings for the exchange.
	Arguments map[string]string `pulumi:"arguments"`
	// Whether the exchange will self-delete when all
	// queues have finished using it.
	AutoDelete *bool `pulumi:"autoDelete"`
	// Whether the exchange survives server restarts.
	// Defaults to `false`.
	Durable *bool `pulumi:"durable"`
	// The type of exchange.
	Type string `pulumi:"type"`
}

// ExchangeSettingsInput is an input type that accepts ExchangeSettingsArgs and ExchangeSettingsOutput values.
// You can construct a concrete instance of `ExchangeSettingsInput` via:
//
//	ExchangeSettingsArgs{...}
type ExchangeSettingsInput interface {
	pulumi.Input

	ToExchangeSettingsOutput() ExchangeSettingsOutput
	ToExchangeSettingsOutputWithContext(context.Context) ExchangeSettingsOutput
}

type ExchangeSettingsArgs struct {
	// Additional key/value settings for the exchange.
	Arguments pulumi.StringMapInput `pulumi:"arguments"`
	// Whether the exchange will self-delete when all
	// queues have finished using it.
	AutoDelete pulumi.BoolPtrInput `pulumi:"autoDelete"`
	// Whether the exchange survives server restarts.
	// Defaults to `false`.
	Durable pulumi.BoolPtrInput `pulumi:"durable"`
	// The type of exchange.
	Type pulumi.StringInput `pulumi:"type"`
}

func (ExchangeSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ExchangeSettings)(nil)).Elem()
}

func (i ExchangeSettingsArgs) ToExchangeSettingsOutput() ExchangeSettingsOutput {
	return i.ToExchangeSettingsOutputWithContext(context.Background())
}

func (i ExchangeSettingsArgs) ToExchangeSettingsOutputWithContext(ctx context.Context) ExchangeSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeSettingsOutput)
}

func (i ExchangeSettingsArgs) ToExchangeSettingsPtrOutput() ExchangeSettingsPtrOutput {
	return i.ToExchangeSettingsPtrOutputWithContext(context.Background())
}

func (i ExchangeSettingsArgs) ToExchangeSettingsPtrOutputWithContext(ctx context.Context) ExchangeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeSettingsOutput).ToExchangeSettingsPtrOutputWithContext(ctx)
}

// ExchangeSettingsPtrInput is an input type that accepts ExchangeSettingsArgs, ExchangeSettingsPtr and ExchangeSettingsPtrOutput values.
// You can construct a concrete instance of `ExchangeSettingsPtrInput` via:
//
//	        ExchangeSettingsArgs{...}
//
//	or:
//
//	        nil
type ExchangeSettingsPtrInput interface {
	pulumi.Input

	ToExchangeSettingsPtrOutput() ExchangeSettingsPtrOutput
	ToExchangeSettingsPtrOutputWithContext(context.Context) ExchangeSettingsPtrOutput
}

type exchangeSettingsPtrType ExchangeSettingsArgs

func ExchangeSettingsPtr(v *ExchangeSettingsArgs) ExchangeSettingsPtrInput {
	return (*exchangeSettingsPtrType)(v)
}

func (*exchangeSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ExchangeSettings)(nil)).Elem()
}

func (i *exchangeSettingsPtrType) ToExchangeSettingsPtrOutput() ExchangeSettingsPtrOutput {
	return i.ToExchangeSettingsPtrOutputWithContext(context.Background())
}

func (i *exchangeSettingsPtrType) ToExchangeSettingsPtrOutputWithContext(ctx context.Context) ExchangeSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ExchangeSettingsPtrOutput)
}

type ExchangeSettingsOutput struct{ *pulumi.OutputState }

func (ExchangeSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ExchangeSettings)(nil)).Elem()
}

func (o ExchangeSettingsOutput) ToExchangeSettingsOutput() ExchangeSettingsOutput {
	return o
}

func (o ExchangeSettingsOutput) ToExchangeSettingsOutputWithContext(ctx context.Context) ExchangeSettingsOutput {
	return o
}

func (o ExchangeSettingsOutput) ToExchangeSettingsPtrOutput() ExchangeSettingsPtrOutput {
	return o.ToExchangeSettingsPtrOutputWithContext(context.Background())
}

func (o ExchangeSettingsOutput) ToExchangeSettingsPtrOutputWithContext(ctx context.Context) ExchangeSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ExchangeSettings) *ExchangeSettings {
		return &v
	}).(ExchangeSettingsPtrOutput)
}

// Additional key/value settings for the exchange.
func (o ExchangeSettingsOutput) Arguments() pulumi.StringMapOutput {
	return o.ApplyT(func(v ExchangeSettings) map[string]string { return v.Arguments }).(pulumi.StringMapOutput)
}

// Whether the exchange will self-delete when all
// queues have finished using it.
func (o ExchangeSettingsOutput) AutoDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExchangeSettings) *bool { return v.AutoDelete }).(pulumi.BoolPtrOutput)
}

// Whether the exchange survives server restarts.
// Defaults to `false`.
func (o ExchangeSettingsOutput) Durable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ExchangeSettings) *bool { return v.Durable }).(pulumi.BoolPtrOutput)
}

// The type of exchange.
func (o ExchangeSettingsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ExchangeSettings) string { return v.Type }).(pulumi.StringOutput)
}

type ExchangeSettingsPtrOutput struct{ *pulumi.OutputState }

func (ExchangeSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ExchangeSettings)(nil)).Elem()
}

func (o ExchangeSettingsPtrOutput) ToExchangeSettingsPtrOutput() ExchangeSettingsPtrOutput {
	return o
}

func (o ExchangeSettingsPtrOutput) ToExchangeSettingsPtrOutputWithContext(ctx context.Context) ExchangeSettingsPtrOutput {
	return o
}

func (o ExchangeSettingsPtrOutput) Elem() ExchangeSettingsOutput {
	return o.ApplyT(func(v *ExchangeSettings) ExchangeSettings {
		if v != nil {
			return *v
		}
		var ret ExchangeSettings
		return ret
	}).(ExchangeSettingsOutput)
}

// Additional key/value settings for the exchange.
func (o ExchangeSettingsPtrOutput) Arguments() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ExchangeSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(pulumi.StringMapOutput)
}

// Whether the exchange will self-delete when all
// queues have finished using it.
func (o ExchangeSettingsPtrOutput) AutoDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExchangeSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AutoDelete
	}).(pulumi.BoolPtrOutput)
}

// Whether the exchange survives server restarts.
// Defaults to `false`.
func (o ExchangeSettingsPtrOutput) Durable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ExchangeSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Durable
	}).(pulumi.BoolPtrOutput)
}

// The type of exchange.
func (o ExchangeSettingsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ExchangeSettings) *string {
		if v == nil {
			return nil
		}
		return &v.Type
	}).(pulumi.StringPtrOutput)
}

type FederationUpstreamDefinition struct {
	// Determines how the link should acknowledge messages. Valid values are `on-confirm`, `on-publish`, and `no-ack`. Default is `on-confirm`.
	AckMode *string `pulumi:"ackMode"`
	// The name of the upstream exchange.
	Exchange *string `pulumi:"exchange"`
	// The expiry time (in milliseconds) after which an upstream queue for a federated exchange may be deleted if a connection to the upstream is lost.
	Expires *int `pulumi:"expires"`
	// Maximum number of federation links that messages can traverse before being dropped. Default is `1`.
	MaxHops *int `pulumi:"maxHops"`
	// The expiry time (in milliseconds) for messages in the upstream queue for a federated exchange (see expires).
	//
	// Applicable to Federated Queues Only
	MessageTtl *int `pulumi:"messageTtl"`
	// Maximum number of unacknowledged messages that may be in flight over a federation link at one time. Default is `1000`.
	PrefetchCount *int `pulumi:"prefetchCount"`
	// The name of the upstream queue.
	//
	// Consult the RabbitMQ [Federation Reference](https://www.rabbitmq.com/federation-reference.html) documentation for detailed information and guidance on setting these values.
	Queue *string `pulumi:"queue"`
	// Time in seconds to wait after a network link goes down before attempting reconnection. Default is `5`.
	ReconnectDelay *int `pulumi:"reconnectDelay"`
	// Determines how federation should interact with the validated user-id feature. Default is `false`.
	//
	// Applicable to Federated Exchanges Only
	TrustUserId *bool `pulumi:"trustUserId"`
	// The AMQP URI(s) for the upstream. Note that the URI may contain sensitive information, such as a password.
	Uri string `pulumi:"uri"`
}

// FederationUpstreamDefinitionInput is an input type that accepts FederationUpstreamDefinitionArgs and FederationUpstreamDefinitionOutput values.
// You can construct a concrete instance of `FederationUpstreamDefinitionInput` via:
//
//	FederationUpstreamDefinitionArgs{...}
type FederationUpstreamDefinitionInput interface {
	pulumi.Input

	ToFederationUpstreamDefinitionOutput() FederationUpstreamDefinitionOutput
	ToFederationUpstreamDefinitionOutputWithContext(context.Context) FederationUpstreamDefinitionOutput
}

type FederationUpstreamDefinitionArgs struct {
	// Determines how the link should acknowledge messages. Valid values are `on-confirm`, `on-publish`, and `no-ack`. Default is `on-confirm`.
	AckMode pulumi.StringPtrInput `pulumi:"ackMode"`
	// The name of the upstream exchange.
	Exchange pulumi.StringPtrInput `pulumi:"exchange"`
	// The expiry time (in milliseconds) after which an upstream queue for a federated exchange may be deleted if a connection to the upstream is lost.
	Expires pulumi.IntPtrInput `pulumi:"expires"`
	// Maximum number of federation links that messages can traverse before being dropped. Default is `1`.
	MaxHops pulumi.IntPtrInput `pulumi:"maxHops"`
	// The expiry time (in milliseconds) for messages in the upstream queue for a federated exchange (see expires).
	//
	// Applicable to Federated Queues Only
	MessageTtl pulumi.IntPtrInput `pulumi:"messageTtl"`
	// Maximum number of unacknowledged messages that may be in flight over a federation link at one time. Default is `1000`.
	PrefetchCount pulumi.IntPtrInput `pulumi:"prefetchCount"`
	// The name of the upstream queue.
	//
	// Consult the RabbitMQ [Federation Reference](https://www.rabbitmq.com/federation-reference.html) documentation for detailed information and guidance on setting these values.
	Queue pulumi.StringPtrInput `pulumi:"queue"`
	// Time in seconds to wait after a network link goes down before attempting reconnection. Default is `5`.
	ReconnectDelay pulumi.IntPtrInput `pulumi:"reconnectDelay"`
	// Determines how federation should interact with the validated user-id feature. Default is `false`.
	//
	// Applicable to Federated Exchanges Only
	TrustUserId pulumi.BoolPtrInput `pulumi:"trustUserId"`
	// The AMQP URI(s) for the upstream. Note that the URI may contain sensitive information, such as a password.
	Uri pulumi.StringInput `pulumi:"uri"`
}

func (FederationUpstreamDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FederationUpstreamDefinition)(nil)).Elem()
}

func (i FederationUpstreamDefinitionArgs) ToFederationUpstreamDefinitionOutput() FederationUpstreamDefinitionOutput {
	return i.ToFederationUpstreamDefinitionOutputWithContext(context.Background())
}

func (i FederationUpstreamDefinitionArgs) ToFederationUpstreamDefinitionOutputWithContext(ctx context.Context) FederationUpstreamDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederationUpstreamDefinitionOutput)
}

func (i FederationUpstreamDefinitionArgs) ToFederationUpstreamDefinitionPtrOutput() FederationUpstreamDefinitionPtrOutput {
	return i.ToFederationUpstreamDefinitionPtrOutputWithContext(context.Background())
}

func (i FederationUpstreamDefinitionArgs) ToFederationUpstreamDefinitionPtrOutputWithContext(ctx context.Context) FederationUpstreamDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederationUpstreamDefinitionOutput).ToFederationUpstreamDefinitionPtrOutputWithContext(ctx)
}

// FederationUpstreamDefinitionPtrInput is an input type that accepts FederationUpstreamDefinitionArgs, FederationUpstreamDefinitionPtr and FederationUpstreamDefinitionPtrOutput values.
// You can construct a concrete instance of `FederationUpstreamDefinitionPtrInput` via:
//
//	        FederationUpstreamDefinitionArgs{...}
//
//	or:
//
//	        nil
type FederationUpstreamDefinitionPtrInput interface {
	pulumi.Input

	ToFederationUpstreamDefinitionPtrOutput() FederationUpstreamDefinitionPtrOutput
	ToFederationUpstreamDefinitionPtrOutputWithContext(context.Context) FederationUpstreamDefinitionPtrOutput
}

type federationUpstreamDefinitionPtrType FederationUpstreamDefinitionArgs

func FederationUpstreamDefinitionPtr(v *FederationUpstreamDefinitionArgs) FederationUpstreamDefinitionPtrInput {
	return (*federationUpstreamDefinitionPtrType)(v)
}

func (*federationUpstreamDefinitionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**FederationUpstreamDefinition)(nil)).Elem()
}

func (i *federationUpstreamDefinitionPtrType) ToFederationUpstreamDefinitionPtrOutput() FederationUpstreamDefinitionPtrOutput {
	return i.ToFederationUpstreamDefinitionPtrOutputWithContext(context.Background())
}

func (i *federationUpstreamDefinitionPtrType) ToFederationUpstreamDefinitionPtrOutputWithContext(ctx context.Context) FederationUpstreamDefinitionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederationUpstreamDefinitionPtrOutput)
}

type FederationUpstreamDefinitionOutput struct{ *pulumi.OutputState }

func (FederationUpstreamDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FederationUpstreamDefinition)(nil)).Elem()
}

func (o FederationUpstreamDefinitionOutput) ToFederationUpstreamDefinitionOutput() FederationUpstreamDefinitionOutput {
	return o
}

func (o FederationUpstreamDefinitionOutput) ToFederationUpstreamDefinitionOutputWithContext(ctx context.Context) FederationUpstreamDefinitionOutput {
	return o
}

func (o FederationUpstreamDefinitionOutput) ToFederationUpstreamDefinitionPtrOutput() FederationUpstreamDefinitionPtrOutput {
	return o.ToFederationUpstreamDefinitionPtrOutputWithContext(context.Background())
}

func (o FederationUpstreamDefinitionOutput) ToFederationUpstreamDefinitionPtrOutputWithContext(ctx context.Context) FederationUpstreamDefinitionPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v FederationUpstreamDefinition) *FederationUpstreamDefinition {
		return &v
	}).(FederationUpstreamDefinitionPtrOutput)
}

// Determines how the link should acknowledge messages. Valid values are `on-confirm`, `on-publish`, and `no-ack`. Default is `on-confirm`.
func (o FederationUpstreamDefinitionOutput) AckMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FederationUpstreamDefinition) *string { return v.AckMode }).(pulumi.StringPtrOutput)
}

// The name of the upstream exchange.
func (o FederationUpstreamDefinitionOutput) Exchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FederationUpstreamDefinition) *string { return v.Exchange }).(pulumi.StringPtrOutput)
}

// The expiry time (in milliseconds) after which an upstream queue for a federated exchange may be deleted if a connection to the upstream is lost.
func (o FederationUpstreamDefinitionOutput) Expires() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FederationUpstreamDefinition) *int { return v.Expires }).(pulumi.IntPtrOutput)
}

// Maximum number of federation links that messages can traverse before being dropped. Default is `1`.
func (o FederationUpstreamDefinitionOutput) MaxHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FederationUpstreamDefinition) *int { return v.MaxHops }).(pulumi.IntPtrOutput)
}

// The expiry time (in milliseconds) for messages in the upstream queue for a federated exchange (see expires).
//
// Applicable to Federated Queues Only
func (o FederationUpstreamDefinitionOutput) MessageTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FederationUpstreamDefinition) *int { return v.MessageTtl }).(pulumi.IntPtrOutput)
}

// Maximum number of unacknowledged messages that may be in flight over a federation link at one time. Default is `1000`.
func (o FederationUpstreamDefinitionOutput) PrefetchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FederationUpstreamDefinition) *int { return v.PrefetchCount }).(pulumi.IntPtrOutput)
}

// The name of the upstream queue.
//
// Consult the RabbitMQ [Federation Reference](https://www.rabbitmq.com/federation-reference.html) documentation for detailed information and guidance on setting these values.
func (o FederationUpstreamDefinitionOutput) Queue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FederationUpstreamDefinition) *string { return v.Queue }).(pulumi.StringPtrOutput)
}

// Time in seconds to wait after a network link goes down before attempting reconnection. Default is `5`.
func (o FederationUpstreamDefinitionOutput) ReconnectDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FederationUpstreamDefinition) *int { return v.ReconnectDelay }).(pulumi.IntPtrOutput)
}

// Determines how federation should interact with the validated user-id feature. Default is `false`.
//
// Applicable to Federated Exchanges Only
func (o FederationUpstreamDefinitionOutput) TrustUserId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v FederationUpstreamDefinition) *bool { return v.TrustUserId }).(pulumi.BoolPtrOutput)
}

// The AMQP URI(s) for the upstream. Note that the URI may contain sensitive information, such as a password.
func (o FederationUpstreamDefinitionOutput) Uri() pulumi.StringOutput {
	return o.ApplyT(func(v FederationUpstreamDefinition) string { return v.Uri }).(pulumi.StringOutput)
}

type FederationUpstreamDefinitionPtrOutput struct{ *pulumi.OutputState }

func (FederationUpstreamDefinitionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FederationUpstreamDefinition)(nil)).Elem()
}

func (o FederationUpstreamDefinitionPtrOutput) ToFederationUpstreamDefinitionPtrOutput() FederationUpstreamDefinitionPtrOutput {
	return o
}

func (o FederationUpstreamDefinitionPtrOutput) ToFederationUpstreamDefinitionPtrOutputWithContext(ctx context.Context) FederationUpstreamDefinitionPtrOutput {
	return o
}

func (o FederationUpstreamDefinitionPtrOutput) Elem() FederationUpstreamDefinitionOutput {
	return o.ApplyT(func(v *FederationUpstreamDefinition) FederationUpstreamDefinition {
		if v != nil {
			return *v
		}
		var ret FederationUpstreamDefinition
		return ret
	}).(FederationUpstreamDefinitionOutput)
}

// Determines how the link should acknowledge messages. Valid values are `on-confirm`, `on-publish`, and `no-ack`. Default is `on-confirm`.
func (o FederationUpstreamDefinitionPtrOutput) AckMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederationUpstreamDefinition) *string {
		if v == nil {
			return nil
		}
		return v.AckMode
	}).(pulumi.StringPtrOutput)
}

// The name of the upstream exchange.
func (o FederationUpstreamDefinitionPtrOutput) Exchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederationUpstreamDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Exchange
	}).(pulumi.StringPtrOutput)
}

// The expiry time (in milliseconds) after which an upstream queue for a federated exchange may be deleted if a connection to the upstream is lost.
func (o FederationUpstreamDefinitionPtrOutput) Expires() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FederationUpstreamDefinition) *int {
		if v == nil {
			return nil
		}
		return v.Expires
	}).(pulumi.IntPtrOutput)
}

// Maximum number of federation links that messages can traverse before being dropped. Default is `1`.
func (o FederationUpstreamDefinitionPtrOutput) MaxHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FederationUpstreamDefinition) *int {
		if v == nil {
			return nil
		}
		return v.MaxHops
	}).(pulumi.IntPtrOutput)
}

// The expiry time (in milliseconds) for messages in the upstream queue for a federated exchange (see expires).
//
// Applicable to Federated Queues Only
func (o FederationUpstreamDefinitionPtrOutput) MessageTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FederationUpstreamDefinition) *int {
		if v == nil {
			return nil
		}
		return v.MessageTtl
	}).(pulumi.IntPtrOutput)
}

// Maximum number of unacknowledged messages that may be in flight over a federation link at one time. Default is `1000`.
func (o FederationUpstreamDefinitionPtrOutput) PrefetchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FederationUpstreamDefinition) *int {
		if v == nil {
			return nil
		}
		return v.PrefetchCount
	}).(pulumi.IntPtrOutput)
}

// The name of the upstream queue.
//
// Consult the RabbitMQ [Federation Reference](https://www.rabbitmq.com/federation-reference.html) documentation for detailed information and guidance on setting these values.
func (o FederationUpstreamDefinitionPtrOutput) Queue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederationUpstreamDefinition) *string {
		if v == nil {
			return nil
		}
		return v.Queue
	}).(pulumi.StringPtrOutput)
}

// Time in seconds to wait after a network link goes down before attempting reconnection. Default is `5`.
func (o FederationUpstreamDefinitionPtrOutput) ReconnectDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *FederationUpstreamDefinition) *int {
		if v == nil {
			return nil
		}
		return v.ReconnectDelay
	}).(pulumi.IntPtrOutput)
}

// Determines how federation should interact with the validated user-id feature. Default is `false`.
//
// Applicable to Federated Exchanges Only
func (o FederationUpstreamDefinitionPtrOutput) TrustUserId() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FederationUpstreamDefinition) *bool {
		if v == nil {
			return nil
		}
		return v.TrustUserId
	}).(pulumi.BoolPtrOutput)
}

// The AMQP URI(s) for the upstream. Note that the URI may contain sensitive information, such as a password.
func (o FederationUpstreamDefinitionPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederationUpstreamDefinition) *string {
		if v == nil {
			return nil
		}
		return &v.Uri
	}).(pulumi.StringPtrOutput)
}

type OperatorPolicyPolicy struct {
	// Can be "queues".
	ApplyTo string `pulumi:"applyTo"`
	// Key/value pairs of the operator policy definition. See the
	// RabbitMQ documentation for definition references and examples.
	Definition map[string]string `pulumi:"definition"`
	// A pattern to match an exchange or queue name.
	Pattern string `pulumi:"pattern"`
	// The policy with the greater priority is applied first.
	Priority int `pulumi:"priority"`
}

// OperatorPolicyPolicyInput is an input type that accepts OperatorPolicyPolicyArgs and OperatorPolicyPolicyOutput values.
// You can construct a concrete instance of `OperatorPolicyPolicyInput` via:
//
//	OperatorPolicyPolicyArgs{...}
type OperatorPolicyPolicyInput interface {
	pulumi.Input

	ToOperatorPolicyPolicyOutput() OperatorPolicyPolicyOutput
	ToOperatorPolicyPolicyOutputWithContext(context.Context) OperatorPolicyPolicyOutput
}

type OperatorPolicyPolicyArgs struct {
	// Can be "queues".
	ApplyTo pulumi.StringInput `pulumi:"applyTo"`
	// Key/value pairs of the operator policy definition. See the
	// RabbitMQ documentation for definition references and examples.
	Definition pulumi.StringMapInput `pulumi:"definition"`
	// A pattern to match an exchange or queue name.
	Pattern pulumi.StringInput `pulumi:"pattern"`
	// The policy with the greater priority is applied first.
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (OperatorPolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorPolicyPolicy)(nil)).Elem()
}

func (i OperatorPolicyPolicyArgs) ToOperatorPolicyPolicyOutput() OperatorPolicyPolicyOutput {
	return i.ToOperatorPolicyPolicyOutputWithContext(context.Background())
}

func (i OperatorPolicyPolicyArgs) ToOperatorPolicyPolicyOutputWithContext(ctx context.Context) OperatorPolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorPolicyPolicyOutput)
}

func (i OperatorPolicyPolicyArgs) ToOperatorPolicyPolicyPtrOutput() OperatorPolicyPolicyPtrOutput {
	return i.ToOperatorPolicyPolicyPtrOutputWithContext(context.Background())
}

func (i OperatorPolicyPolicyArgs) ToOperatorPolicyPolicyPtrOutputWithContext(ctx context.Context) OperatorPolicyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorPolicyPolicyOutput).ToOperatorPolicyPolicyPtrOutputWithContext(ctx)
}

// OperatorPolicyPolicyPtrInput is an input type that accepts OperatorPolicyPolicyArgs, OperatorPolicyPolicyPtr and OperatorPolicyPolicyPtrOutput values.
// You can construct a concrete instance of `OperatorPolicyPolicyPtrInput` via:
//
//	        OperatorPolicyPolicyArgs{...}
//
//	or:
//
//	        nil
type OperatorPolicyPolicyPtrInput interface {
	pulumi.Input

	ToOperatorPolicyPolicyPtrOutput() OperatorPolicyPolicyPtrOutput
	ToOperatorPolicyPolicyPtrOutputWithContext(context.Context) OperatorPolicyPolicyPtrOutput
}

type operatorPolicyPolicyPtrType OperatorPolicyPolicyArgs

func OperatorPolicyPolicyPtr(v *OperatorPolicyPolicyArgs) OperatorPolicyPolicyPtrInput {
	return (*operatorPolicyPolicyPtrType)(v)
}

func (*operatorPolicyPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorPolicyPolicy)(nil)).Elem()
}

func (i *operatorPolicyPolicyPtrType) ToOperatorPolicyPolicyPtrOutput() OperatorPolicyPolicyPtrOutput {
	return i.ToOperatorPolicyPolicyPtrOutputWithContext(context.Background())
}

func (i *operatorPolicyPolicyPtrType) ToOperatorPolicyPolicyPtrOutputWithContext(ctx context.Context) OperatorPolicyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OperatorPolicyPolicyPtrOutput)
}

type OperatorPolicyPolicyOutput struct{ *pulumi.OutputState }

func (OperatorPolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OperatorPolicyPolicy)(nil)).Elem()
}

func (o OperatorPolicyPolicyOutput) ToOperatorPolicyPolicyOutput() OperatorPolicyPolicyOutput {
	return o
}

func (o OperatorPolicyPolicyOutput) ToOperatorPolicyPolicyOutputWithContext(ctx context.Context) OperatorPolicyPolicyOutput {
	return o
}

func (o OperatorPolicyPolicyOutput) ToOperatorPolicyPolicyPtrOutput() OperatorPolicyPolicyPtrOutput {
	return o.ToOperatorPolicyPolicyPtrOutputWithContext(context.Background())
}

func (o OperatorPolicyPolicyOutput) ToOperatorPolicyPolicyPtrOutputWithContext(ctx context.Context) OperatorPolicyPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v OperatorPolicyPolicy) *OperatorPolicyPolicy {
		return &v
	}).(OperatorPolicyPolicyPtrOutput)
}

// Can be "queues".
func (o OperatorPolicyPolicyOutput) ApplyTo() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorPolicyPolicy) string { return v.ApplyTo }).(pulumi.StringOutput)
}

// Key/value pairs of the operator policy definition. See the
// RabbitMQ documentation for definition references and examples.
func (o OperatorPolicyPolicyOutput) Definition() pulumi.StringMapOutput {
	return o.ApplyT(func(v OperatorPolicyPolicy) map[string]string { return v.Definition }).(pulumi.StringMapOutput)
}

// A pattern to match an exchange or queue name.
func (o OperatorPolicyPolicyOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v OperatorPolicyPolicy) string { return v.Pattern }).(pulumi.StringOutput)
}

// The policy with the greater priority is applied first.
func (o OperatorPolicyPolicyOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v OperatorPolicyPolicy) int { return v.Priority }).(pulumi.IntOutput)
}

type OperatorPolicyPolicyPtrOutput struct{ *pulumi.OutputState }

func (OperatorPolicyPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OperatorPolicyPolicy)(nil)).Elem()
}

func (o OperatorPolicyPolicyPtrOutput) ToOperatorPolicyPolicyPtrOutput() OperatorPolicyPolicyPtrOutput {
	return o
}

func (o OperatorPolicyPolicyPtrOutput) ToOperatorPolicyPolicyPtrOutputWithContext(ctx context.Context) OperatorPolicyPolicyPtrOutput {
	return o
}

func (o OperatorPolicyPolicyPtrOutput) Elem() OperatorPolicyPolicyOutput {
	return o.ApplyT(func(v *OperatorPolicyPolicy) OperatorPolicyPolicy {
		if v != nil {
			return *v
		}
		var ret OperatorPolicyPolicy
		return ret
	}).(OperatorPolicyPolicyOutput)
}

// Can be "queues".
func (o OperatorPolicyPolicyPtrOutput) ApplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorPolicyPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.ApplyTo
	}).(pulumi.StringPtrOutput)
}

// Key/value pairs of the operator policy definition. See the
// RabbitMQ documentation for definition references and examples.
func (o OperatorPolicyPolicyPtrOutput) Definition() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OperatorPolicyPolicy) map[string]string {
		if v == nil {
			return nil
		}
		return v.Definition
	}).(pulumi.StringMapOutput)
}

// A pattern to match an exchange or queue name.
func (o OperatorPolicyPolicyPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OperatorPolicyPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Pattern
	}).(pulumi.StringPtrOutput)
}

// The policy with the greater priority is applied first.
func (o OperatorPolicyPolicyPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *OperatorPolicyPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.Priority
	}).(pulumi.IntPtrOutput)
}

type PermissionsPermissions struct {
	// The "configure" ACL.
	Configure string `pulumi:"configure"`
	// The "read" ACL.
	Read string `pulumi:"read"`
	// The "write" ACL.
	Write string `pulumi:"write"`
}

// PermissionsPermissionsInput is an input type that accepts PermissionsPermissionsArgs and PermissionsPermissionsOutput values.
// You can construct a concrete instance of `PermissionsPermissionsInput` via:
//
//	PermissionsPermissionsArgs{...}
type PermissionsPermissionsInput interface {
	pulumi.Input

	ToPermissionsPermissionsOutput() PermissionsPermissionsOutput
	ToPermissionsPermissionsOutputWithContext(context.Context) PermissionsPermissionsOutput
}

type PermissionsPermissionsArgs struct {
	// The "configure" ACL.
	Configure pulumi.StringInput `pulumi:"configure"`
	// The "read" ACL.
	Read pulumi.StringInput `pulumi:"read"`
	// The "write" ACL.
	Write pulumi.StringInput `pulumi:"write"`
}

func (PermissionsPermissionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsPermissions)(nil)).Elem()
}

func (i PermissionsPermissionsArgs) ToPermissionsPermissionsOutput() PermissionsPermissionsOutput {
	return i.ToPermissionsPermissionsOutputWithContext(context.Background())
}

func (i PermissionsPermissionsArgs) ToPermissionsPermissionsOutputWithContext(ctx context.Context) PermissionsPermissionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsPermissionsOutput)
}

func (i PermissionsPermissionsArgs) ToPermissionsPermissionsPtrOutput() PermissionsPermissionsPtrOutput {
	return i.ToPermissionsPermissionsPtrOutputWithContext(context.Background())
}

func (i PermissionsPermissionsArgs) ToPermissionsPermissionsPtrOutputWithContext(ctx context.Context) PermissionsPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsPermissionsOutput).ToPermissionsPermissionsPtrOutputWithContext(ctx)
}

// PermissionsPermissionsPtrInput is an input type that accepts PermissionsPermissionsArgs, PermissionsPermissionsPtr and PermissionsPermissionsPtrOutput values.
// You can construct a concrete instance of `PermissionsPermissionsPtrInput` via:
//
//	        PermissionsPermissionsArgs{...}
//
//	or:
//
//	        nil
type PermissionsPermissionsPtrInput interface {
	pulumi.Input

	ToPermissionsPermissionsPtrOutput() PermissionsPermissionsPtrOutput
	ToPermissionsPermissionsPtrOutputWithContext(context.Context) PermissionsPermissionsPtrOutput
}

type permissionsPermissionsPtrType PermissionsPermissionsArgs

func PermissionsPermissionsPtr(v *PermissionsPermissionsArgs) PermissionsPermissionsPtrInput {
	return (*permissionsPermissionsPtrType)(v)
}

func (*permissionsPermissionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionsPermissions)(nil)).Elem()
}

func (i *permissionsPermissionsPtrType) ToPermissionsPermissionsPtrOutput() PermissionsPermissionsPtrOutput {
	return i.ToPermissionsPermissionsPtrOutputWithContext(context.Background())
}

func (i *permissionsPermissionsPtrType) ToPermissionsPermissionsPtrOutputWithContext(ctx context.Context) PermissionsPermissionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionsPermissionsPtrOutput)
}

type PermissionsPermissionsOutput struct{ *pulumi.OutputState }

func (PermissionsPermissionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionsPermissions)(nil)).Elem()
}

func (o PermissionsPermissionsOutput) ToPermissionsPermissionsOutput() PermissionsPermissionsOutput {
	return o
}

func (o PermissionsPermissionsOutput) ToPermissionsPermissionsOutputWithContext(ctx context.Context) PermissionsPermissionsOutput {
	return o
}

func (o PermissionsPermissionsOutput) ToPermissionsPermissionsPtrOutput() PermissionsPermissionsPtrOutput {
	return o.ToPermissionsPermissionsPtrOutputWithContext(context.Background())
}

func (o PermissionsPermissionsOutput) ToPermissionsPermissionsPtrOutputWithContext(ctx context.Context) PermissionsPermissionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PermissionsPermissions) *PermissionsPermissions {
		return &v
	}).(PermissionsPermissionsPtrOutput)
}

// The "configure" ACL.
func (o PermissionsPermissionsOutput) Configure() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionsPermissions) string { return v.Configure }).(pulumi.StringOutput)
}

// The "read" ACL.
func (o PermissionsPermissionsOutput) Read() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionsPermissions) string { return v.Read }).(pulumi.StringOutput)
}

// The "write" ACL.
func (o PermissionsPermissionsOutput) Write() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionsPermissions) string { return v.Write }).(pulumi.StringOutput)
}

type PermissionsPermissionsPtrOutput struct{ *pulumi.OutputState }

func (PermissionsPermissionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionsPermissions)(nil)).Elem()
}

func (o PermissionsPermissionsPtrOutput) ToPermissionsPermissionsPtrOutput() PermissionsPermissionsPtrOutput {
	return o
}

func (o PermissionsPermissionsPtrOutput) ToPermissionsPermissionsPtrOutputWithContext(ctx context.Context) PermissionsPermissionsPtrOutput {
	return o
}

func (o PermissionsPermissionsPtrOutput) Elem() PermissionsPermissionsOutput {
	return o.ApplyT(func(v *PermissionsPermissions) PermissionsPermissions {
		if v != nil {
			return *v
		}
		var ret PermissionsPermissions
		return ret
	}).(PermissionsPermissionsOutput)
}

// The "configure" ACL.
func (o PermissionsPermissionsPtrOutput) Configure() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PermissionsPermissions) *string {
		if v == nil {
			return nil
		}
		return &v.Configure
	}).(pulumi.StringPtrOutput)
}

// The "read" ACL.
func (o PermissionsPermissionsPtrOutput) Read() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PermissionsPermissions) *string {
		if v == nil {
			return nil
		}
		return &v.Read
	}).(pulumi.StringPtrOutput)
}

// The "write" ACL.
func (o PermissionsPermissionsPtrOutput) Write() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PermissionsPermissions) *string {
		if v == nil {
			return nil
		}
		return &v.Write
	}).(pulumi.StringPtrOutput)
}

type PolicyPolicy struct {
	// Can either be "exchanges", "queues", or "all".
	ApplyTo string `pulumi:"applyTo"`
	// Key/value pairs of the policy definition. See the
	// RabbitMQ documentation for definition references and examples.
	Definition map[string]string `pulumi:"definition"`
	// A pattern to match an exchange or queue name.
	Pattern string `pulumi:"pattern"`
	// The policy with the greater priority is applied first.
	Priority int `pulumi:"priority"`
}

// PolicyPolicyInput is an input type that accepts PolicyPolicyArgs and PolicyPolicyOutput values.
// You can construct a concrete instance of `PolicyPolicyInput` via:
//
//	PolicyPolicyArgs{...}
type PolicyPolicyInput interface {
	pulumi.Input

	ToPolicyPolicyOutput() PolicyPolicyOutput
	ToPolicyPolicyOutputWithContext(context.Context) PolicyPolicyOutput
}

type PolicyPolicyArgs struct {
	// Can either be "exchanges", "queues", or "all".
	ApplyTo pulumi.StringInput `pulumi:"applyTo"`
	// Key/value pairs of the policy definition. See the
	// RabbitMQ documentation for definition references and examples.
	Definition pulumi.StringMapInput `pulumi:"definition"`
	// A pattern to match an exchange or queue name.
	Pattern pulumi.StringInput `pulumi:"pattern"`
	// The policy with the greater priority is applied first.
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (PolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyPolicy)(nil)).Elem()
}

func (i PolicyPolicyArgs) ToPolicyPolicyOutput() PolicyPolicyOutput {
	return i.ToPolicyPolicyOutputWithContext(context.Background())
}

func (i PolicyPolicyArgs) ToPolicyPolicyOutputWithContext(ctx context.Context) PolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPolicyOutput)
}

func (i PolicyPolicyArgs) ToPolicyPolicyPtrOutput() PolicyPolicyPtrOutput {
	return i.ToPolicyPolicyPtrOutputWithContext(context.Background())
}

func (i PolicyPolicyArgs) ToPolicyPolicyPtrOutputWithContext(ctx context.Context) PolicyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPolicyOutput).ToPolicyPolicyPtrOutputWithContext(ctx)
}

// PolicyPolicyPtrInput is an input type that accepts PolicyPolicyArgs, PolicyPolicyPtr and PolicyPolicyPtrOutput values.
// You can construct a concrete instance of `PolicyPolicyPtrInput` via:
//
//	        PolicyPolicyArgs{...}
//
//	or:
//
//	        nil
type PolicyPolicyPtrInput interface {
	pulumi.Input

	ToPolicyPolicyPtrOutput() PolicyPolicyPtrOutput
	ToPolicyPolicyPtrOutputWithContext(context.Context) PolicyPolicyPtrOutput
}

type policyPolicyPtrType PolicyPolicyArgs

func PolicyPolicyPtr(v *PolicyPolicyArgs) PolicyPolicyPtrInput {
	return (*policyPolicyPtrType)(v)
}

func (*policyPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyPolicy)(nil)).Elem()
}

func (i *policyPolicyPtrType) ToPolicyPolicyPtrOutput() PolicyPolicyPtrOutput {
	return i.ToPolicyPolicyPtrOutputWithContext(context.Background())
}

func (i *policyPolicyPtrType) ToPolicyPolicyPtrOutputWithContext(ctx context.Context) PolicyPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyPolicyPtrOutput)
}

type PolicyPolicyOutput struct{ *pulumi.OutputState }

func (PolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyPolicy)(nil)).Elem()
}

func (o PolicyPolicyOutput) ToPolicyPolicyOutput() PolicyPolicyOutput {
	return o
}

func (o PolicyPolicyOutput) ToPolicyPolicyOutputWithContext(ctx context.Context) PolicyPolicyOutput {
	return o
}

func (o PolicyPolicyOutput) ToPolicyPolicyPtrOutput() PolicyPolicyPtrOutput {
	return o.ToPolicyPolicyPtrOutputWithContext(context.Background())
}

func (o PolicyPolicyOutput) ToPolicyPolicyPtrOutputWithContext(ctx context.Context) PolicyPolicyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v PolicyPolicy) *PolicyPolicy {
		return &v
	}).(PolicyPolicyPtrOutput)
}

// Can either be "exchanges", "queues", or "all".
func (o PolicyPolicyOutput) ApplyTo() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyPolicy) string { return v.ApplyTo }).(pulumi.StringOutput)
}

// Key/value pairs of the policy definition. See the
// RabbitMQ documentation for definition references and examples.
func (o PolicyPolicyOutput) Definition() pulumi.StringMapOutput {
	return o.ApplyT(func(v PolicyPolicy) map[string]string { return v.Definition }).(pulumi.StringMapOutput)
}

// A pattern to match an exchange or queue name.
func (o PolicyPolicyOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v PolicyPolicy) string { return v.Pattern }).(pulumi.StringOutput)
}

// The policy with the greater priority is applied first.
func (o PolicyPolicyOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyPolicy) int { return v.Priority }).(pulumi.IntOutput)
}

type PolicyPolicyPtrOutput struct{ *pulumi.OutputState }

func (PolicyPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyPolicy)(nil)).Elem()
}

func (o PolicyPolicyPtrOutput) ToPolicyPolicyPtrOutput() PolicyPolicyPtrOutput {
	return o
}

func (o PolicyPolicyPtrOutput) ToPolicyPolicyPtrOutputWithContext(ctx context.Context) PolicyPolicyPtrOutput {
	return o
}

func (o PolicyPolicyPtrOutput) Elem() PolicyPolicyOutput {
	return o.ApplyT(func(v *PolicyPolicy) PolicyPolicy {
		if v != nil {
			return *v
		}
		var ret PolicyPolicy
		return ret
	}).(PolicyPolicyOutput)
}

// Can either be "exchanges", "queues", or "all".
func (o PolicyPolicyPtrOutput) ApplyTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.ApplyTo
	}).(pulumi.StringPtrOutput)
}

// Key/value pairs of the policy definition. See the
// RabbitMQ documentation for definition references and examples.
func (o PolicyPolicyPtrOutput) Definition() pulumi.StringMapOutput {
	return o.ApplyT(func(v *PolicyPolicy) map[string]string {
		if v == nil {
			return nil
		}
		return v.Definition
	}).(pulumi.StringMapOutput)
}

// A pattern to match an exchange or queue name.
func (o PolicyPolicyPtrOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyPolicy) *string {
		if v == nil {
			return nil
		}
		return &v.Pattern
	}).(pulumi.StringPtrOutput)
}

// The policy with the greater priority is applied first.
func (o PolicyPolicyPtrOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PolicyPolicy) *int {
		if v == nil {
			return nil
		}
		return &v.Priority
	}).(pulumi.IntPtrOutput)
}

type QueueSettings struct {
	// Additional key/value settings for the queue.
	// All values will be sent to RabbitMQ as a string. If you require non-string
	// values, use `argumentsJson`.
	Arguments map[string]string `pulumi:"arguments"`
	// A nested JSON string which contains additional
	// settings for the queue. This is useful for when the arguments contain
	// non-string values.
	ArgumentsJson *string `pulumi:"argumentsJson"`
	// Whether the queue will self-delete when all
	// consumers have unsubscribed.
	AutoDelete *bool `pulumi:"autoDelete"`
	// Whether the queue survives server restarts.
	// Defaults to `false`.
	Durable *bool `pulumi:"durable"`
}

// QueueSettingsInput is an input type that accepts QueueSettingsArgs and QueueSettingsOutput values.
// You can construct a concrete instance of `QueueSettingsInput` via:
//
//	QueueSettingsArgs{...}
type QueueSettingsInput interface {
	pulumi.Input

	ToQueueSettingsOutput() QueueSettingsOutput
	ToQueueSettingsOutputWithContext(context.Context) QueueSettingsOutput
}

type QueueSettingsArgs struct {
	// Additional key/value settings for the queue.
	// All values will be sent to RabbitMQ as a string. If you require non-string
	// values, use `argumentsJson`.
	Arguments pulumi.StringMapInput `pulumi:"arguments"`
	// A nested JSON string which contains additional
	// settings for the queue. This is useful for when the arguments contain
	// non-string values.
	ArgumentsJson pulumi.StringPtrInput `pulumi:"argumentsJson"`
	// Whether the queue will self-delete when all
	// consumers have unsubscribed.
	AutoDelete pulumi.BoolPtrInput `pulumi:"autoDelete"`
	// Whether the queue survives server restarts.
	// Defaults to `false`.
	Durable pulumi.BoolPtrInput `pulumi:"durable"`
}

func (QueueSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueSettings)(nil)).Elem()
}

func (i QueueSettingsArgs) ToQueueSettingsOutput() QueueSettingsOutput {
	return i.ToQueueSettingsOutputWithContext(context.Background())
}

func (i QueueSettingsArgs) ToQueueSettingsOutputWithContext(ctx context.Context) QueueSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueSettingsOutput)
}

func (i QueueSettingsArgs) ToQueueSettingsPtrOutput() QueueSettingsPtrOutput {
	return i.ToQueueSettingsPtrOutputWithContext(context.Background())
}

func (i QueueSettingsArgs) ToQueueSettingsPtrOutputWithContext(ctx context.Context) QueueSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueSettingsOutput).ToQueueSettingsPtrOutputWithContext(ctx)
}

// QueueSettingsPtrInput is an input type that accepts QueueSettingsArgs, QueueSettingsPtr and QueueSettingsPtrOutput values.
// You can construct a concrete instance of `QueueSettingsPtrInput` via:
//
//	        QueueSettingsArgs{...}
//
//	or:
//
//	        nil
type QueueSettingsPtrInput interface {
	pulumi.Input

	ToQueueSettingsPtrOutput() QueueSettingsPtrOutput
	ToQueueSettingsPtrOutputWithContext(context.Context) QueueSettingsPtrOutput
}

type queueSettingsPtrType QueueSettingsArgs

func QueueSettingsPtr(v *QueueSettingsArgs) QueueSettingsPtrInput {
	return (*queueSettingsPtrType)(v)
}

func (*queueSettingsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueSettings)(nil)).Elem()
}

func (i *queueSettingsPtrType) ToQueueSettingsPtrOutput() QueueSettingsPtrOutput {
	return i.ToQueueSettingsPtrOutputWithContext(context.Background())
}

func (i *queueSettingsPtrType) ToQueueSettingsPtrOutputWithContext(ctx context.Context) QueueSettingsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QueueSettingsPtrOutput)
}

type QueueSettingsOutput struct{ *pulumi.OutputState }

func (QueueSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QueueSettings)(nil)).Elem()
}

func (o QueueSettingsOutput) ToQueueSettingsOutput() QueueSettingsOutput {
	return o
}

func (o QueueSettingsOutput) ToQueueSettingsOutputWithContext(ctx context.Context) QueueSettingsOutput {
	return o
}

func (o QueueSettingsOutput) ToQueueSettingsPtrOutput() QueueSettingsPtrOutput {
	return o.ToQueueSettingsPtrOutputWithContext(context.Background())
}

func (o QueueSettingsOutput) ToQueueSettingsPtrOutputWithContext(ctx context.Context) QueueSettingsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v QueueSettings) *QueueSettings {
		return &v
	}).(QueueSettingsPtrOutput)
}

// Additional key/value settings for the queue.
// All values will be sent to RabbitMQ as a string. If you require non-string
// values, use `argumentsJson`.
func (o QueueSettingsOutput) Arguments() pulumi.StringMapOutput {
	return o.ApplyT(func(v QueueSettings) map[string]string { return v.Arguments }).(pulumi.StringMapOutput)
}

// A nested JSON string which contains additional
// settings for the queue. This is useful for when the arguments contain
// non-string values.
func (o QueueSettingsOutput) ArgumentsJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QueueSettings) *string { return v.ArgumentsJson }).(pulumi.StringPtrOutput)
}

// Whether the queue will self-delete when all
// consumers have unsubscribed.
func (o QueueSettingsOutput) AutoDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueueSettings) *bool { return v.AutoDelete }).(pulumi.BoolPtrOutput)
}

// Whether the queue survives server restarts.
// Defaults to `false`.
func (o QueueSettingsOutput) Durable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QueueSettings) *bool { return v.Durable }).(pulumi.BoolPtrOutput)
}

type QueueSettingsPtrOutput struct{ *pulumi.OutputState }

func (QueueSettingsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**QueueSettings)(nil)).Elem()
}

func (o QueueSettingsPtrOutput) ToQueueSettingsPtrOutput() QueueSettingsPtrOutput {
	return o
}

func (o QueueSettingsPtrOutput) ToQueueSettingsPtrOutputWithContext(ctx context.Context) QueueSettingsPtrOutput {
	return o
}

func (o QueueSettingsPtrOutput) Elem() QueueSettingsOutput {
	return o.ApplyT(func(v *QueueSettings) QueueSettings {
		if v != nil {
			return *v
		}
		var ret QueueSettings
		return ret
	}).(QueueSettingsOutput)
}

// Additional key/value settings for the queue.
// All values will be sent to RabbitMQ as a string. If you require non-string
// values, use `argumentsJson`.
func (o QueueSettingsPtrOutput) Arguments() pulumi.StringMapOutput {
	return o.ApplyT(func(v *QueueSettings) map[string]string {
		if v == nil {
			return nil
		}
		return v.Arguments
	}).(pulumi.StringMapOutput)
}

// A nested JSON string which contains additional
// settings for the queue. This is useful for when the arguments contain
// non-string values.
func (o QueueSettingsPtrOutput) ArgumentsJson() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *QueueSettings) *string {
		if v == nil {
			return nil
		}
		return v.ArgumentsJson
	}).(pulumi.StringPtrOutput)
}

// Whether the queue will self-delete when all
// consumers have unsubscribed.
func (o QueueSettingsPtrOutput) AutoDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueueSettings) *bool {
		if v == nil {
			return nil
		}
		return v.AutoDelete
	}).(pulumi.BoolPtrOutput)
}

// Whether the queue survives server restarts.
// Defaults to `false`.
func (o QueueSettingsPtrOutput) Durable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *QueueSettings) *bool {
		if v == nil {
			return nil
		}
		return v.Durable
	}).(pulumi.BoolPtrOutput)
}

type ShovelInfo struct {
	// Determines how the shovel should acknowledge messages. Possible values are: `on-confirm`, `on-publish` and `no-ack`.
	// Defaults to `on-confirm`.
	AckMode *string `pulumi:"ackMode"`
	// Whether to add `x-shovelled` headers to shovelled messages.
	//
	// Deprecated: use destinationAddForwardHeaders instead
	AddForwardHeaders *bool `pulumi:"addForwardHeaders"`
	// Determines when (if ever) the shovel should delete itself. Possible values are: `never`, `queue-length` or an integer.
	//
	// Deprecated: use sourceDeleteAfter instead
	DeleteAfter *string `pulumi:"deleteAfter"`
	// Whether to add `x-shovelled` headers to shovelled messages.
	DestinationAddForwardHeaders  *bool `pulumi:"destinationAddForwardHeaders"`
	DestinationAddTimestampHeader *bool `pulumi:"destinationAddTimestampHeader"`
	// The AMQP 1.0 destination link address.
	DestinationAddress *string `pulumi:"destinationAddress"`
	// Application properties to set when shovelling messages.
	DestinationApplicationProperties *string `pulumi:"destinationApplicationProperties"`
	// The exchange to which messages should be published.
	// Either this or `destinationQueue` must be specified but not both.
	DestinationExchange *string `pulumi:"destinationExchange"`
	// The routing key when using `destinationExchange`.
	DestinationExchangeKey *string `pulumi:"destinationExchangeKey"`
	// Properties to overwrite when shovelling messages.
	//
	// For more details regarding dynamic shovel parameters please have a look at the official reference documentaion at [RabbitMQ: Configuring Dynamic Shovels](https://www.rabbitmq.com/shovel-dynamic.html).
	DestinationProperties *string `pulumi:"destinationProperties"`
	// The protocol (`amqp091` or `amqp10`) to use when connecting to the destination.
	// Defaults to `amqp091`.
	DestinationProtocol *string `pulumi:"destinationProtocol"`
	// A map of properties to overwrite when shovelling messages.
	DestinationPublishProperties *string `pulumi:"destinationPublishProperties"`
	// The queue to which messages should be published.
	// Either this or `destinationExchange` must be specified but not both.
	DestinationQueue *string `pulumi:"destinationQueue"`
	// The amqp uri for the destination .
	DestinationUri string `pulumi:"destinationUri"`
	// The maximum number of unacknowledged messages copied over a shovel at any one time.
	//
	// Deprecated: use sourcePrefetchCount instead
	PrefetchCount *int `pulumi:"prefetchCount"`
	// The duration in seconds to reconnect to a broker after disconnected.
	// Defaults to `1`.
	ReconnectDelay *int `pulumi:"reconnectDelay"`
	// The AMQP 1.0 source link address.
	SourceAddress *string `pulumi:"sourceAddress"`
	// Determines when (if ever) the shovel should delete itself. Possible values are: `never`, `queue-length` or an integer.
	SourceDeleteAfter *string `pulumi:"sourceDeleteAfter"`
	// The exchange from which to consume.
	// Either this or `sourceQueue` must be specified but not both.
	SourceExchange *string `pulumi:"sourceExchange"`
	// The routing key when using `sourceExchange`.
	SourceExchangeKey *string `pulumi:"sourceExchangeKey"`
	// The maximum number of unacknowledged messages copied over a shovel at any one time.
	SourcePrefetchCount *int `pulumi:"sourcePrefetchCount"`
	// The protocol (`amqp091` or `amqp10`) to use when connecting to the source.
	// Defaults to `amqp091`.
	SourceProtocol *string `pulumi:"sourceProtocol"`
	// The queue from which to consume.
	// Either this or `sourceExchange` must be specified but not both.
	SourceQueue *string `pulumi:"sourceQueue"`
	// The amqp uri for the source.
	SourceUri string `pulumi:"sourceUri"`
}

// ShovelInfoInput is an input type that accepts ShovelInfoArgs and ShovelInfoOutput values.
// You can construct a concrete instance of `ShovelInfoInput` via:
//
//	ShovelInfoArgs{...}
type ShovelInfoInput interface {
	pulumi.Input

	ToShovelInfoOutput() ShovelInfoOutput
	ToShovelInfoOutputWithContext(context.Context) ShovelInfoOutput
}

type ShovelInfoArgs struct {
	// Determines how the shovel should acknowledge messages. Possible values are: `on-confirm`, `on-publish` and `no-ack`.
	// Defaults to `on-confirm`.
	AckMode pulumi.StringPtrInput `pulumi:"ackMode"`
	// Whether to add `x-shovelled` headers to shovelled messages.
	//
	// Deprecated: use destinationAddForwardHeaders instead
	AddForwardHeaders pulumi.BoolPtrInput `pulumi:"addForwardHeaders"`
	// Determines when (if ever) the shovel should delete itself. Possible values are: `never`, `queue-length` or an integer.
	//
	// Deprecated: use sourceDeleteAfter instead
	DeleteAfter pulumi.StringPtrInput `pulumi:"deleteAfter"`
	// Whether to add `x-shovelled` headers to shovelled messages.
	DestinationAddForwardHeaders  pulumi.BoolPtrInput `pulumi:"destinationAddForwardHeaders"`
	DestinationAddTimestampHeader pulumi.BoolPtrInput `pulumi:"destinationAddTimestampHeader"`
	// The AMQP 1.0 destination link address.
	DestinationAddress pulumi.StringPtrInput `pulumi:"destinationAddress"`
	// Application properties to set when shovelling messages.
	DestinationApplicationProperties pulumi.StringPtrInput `pulumi:"destinationApplicationProperties"`
	// The exchange to which messages should be published.
	// Either this or `destinationQueue` must be specified but not both.
	DestinationExchange pulumi.StringPtrInput `pulumi:"destinationExchange"`
	// The routing key when using `destinationExchange`.
	DestinationExchangeKey pulumi.StringPtrInput `pulumi:"destinationExchangeKey"`
	// Properties to overwrite when shovelling messages.
	//
	// For more details regarding dynamic shovel parameters please have a look at the official reference documentaion at [RabbitMQ: Configuring Dynamic Shovels](https://www.rabbitmq.com/shovel-dynamic.html).
	DestinationProperties pulumi.StringPtrInput `pulumi:"destinationProperties"`
	// The protocol (`amqp091` or `amqp10`) to use when connecting to the destination.
	// Defaults to `amqp091`.
	DestinationProtocol pulumi.StringPtrInput `pulumi:"destinationProtocol"`
	// A map of properties to overwrite when shovelling messages.
	DestinationPublishProperties pulumi.StringPtrInput `pulumi:"destinationPublishProperties"`
	// The queue to which messages should be published.
	// Either this or `destinationExchange` must be specified but not both.
	DestinationQueue pulumi.StringPtrInput `pulumi:"destinationQueue"`
	// The amqp uri for the destination .
	DestinationUri pulumi.StringInput `pulumi:"destinationUri"`
	// The maximum number of unacknowledged messages copied over a shovel at any one time.
	//
	// Deprecated: use sourcePrefetchCount instead
	PrefetchCount pulumi.IntPtrInput `pulumi:"prefetchCount"`
	// The duration in seconds to reconnect to a broker after disconnected.
	// Defaults to `1`.
	ReconnectDelay pulumi.IntPtrInput `pulumi:"reconnectDelay"`
	// The AMQP 1.0 source link address.
	SourceAddress pulumi.StringPtrInput `pulumi:"sourceAddress"`
	// Determines when (if ever) the shovel should delete itself. Possible values are: `never`, `queue-length` or an integer.
	SourceDeleteAfter pulumi.StringPtrInput `pulumi:"sourceDeleteAfter"`
	// The exchange from which to consume.
	// Either this or `sourceQueue` must be specified but not both.
	SourceExchange pulumi.StringPtrInput `pulumi:"sourceExchange"`
	// The routing key when using `sourceExchange`.
	SourceExchangeKey pulumi.StringPtrInput `pulumi:"sourceExchangeKey"`
	// The maximum number of unacknowledged messages copied over a shovel at any one time.
	SourcePrefetchCount pulumi.IntPtrInput `pulumi:"sourcePrefetchCount"`
	// The protocol (`amqp091` or `amqp10`) to use when connecting to the source.
	// Defaults to `amqp091`.
	SourceProtocol pulumi.StringPtrInput `pulumi:"sourceProtocol"`
	// The queue from which to consume.
	// Either this or `sourceExchange` must be specified but not both.
	SourceQueue pulumi.StringPtrInput `pulumi:"sourceQueue"`
	// The amqp uri for the source.
	SourceUri pulumi.StringInput `pulumi:"sourceUri"`
}

func (ShovelInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShovelInfo)(nil)).Elem()
}

func (i ShovelInfoArgs) ToShovelInfoOutput() ShovelInfoOutput {
	return i.ToShovelInfoOutputWithContext(context.Background())
}

func (i ShovelInfoArgs) ToShovelInfoOutputWithContext(ctx context.Context) ShovelInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShovelInfoOutput)
}

func (i ShovelInfoArgs) ToShovelInfoPtrOutput() ShovelInfoPtrOutput {
	return i.ToShovelInfoPtrOutputWithContext(context.Background())
}

func (i ShovelInfoArgs) ToShovelInfoPtrOutputWithContext(ctx context.Context) ShovelInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShovelInfoOutput).ToShovelInfoPtrOutputWithContext(ctx)
}

// ShovelInfoPtrInput is an input type that accepts ShovelInfoArgs, ShovelInfoPtr and ShovelInfoPtrOutput values.
// You can construct a concrete instance of `ShovelInfoPtrInput` via:
//
//	        ShovelInfoArgs{...}
//
//	or:
//
//	        nil
type ShovelInfoPtrInput interface {
	pulumi.Input

	ToShovelInfoPtrOutput() ShovelInfoPtrOutput
	ToShovelInfoPtrOutputWithContext(context.Context) ShovelInfoPtrOutput
}

type shovelInfoPtrType ShovelInfoArgs

func ShovelInfoPtr(v *ShovelInfoArgs) ShovelInfoPtrInput {
	return (*shovelInfoPtrType)(v)
}

func (*shovelInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ShovelInfo)(nil)).Elem()
}

func (i *shovelInfoPtrType) ToShovelInfoPtrOutput() ShovelInfoPtrOutput {
	return i.ToShovelInfoPtrOutputWithContext(context.Background())
}

func (i *shovelInfoPtrType) ToShovelInfoPtrOutputWithContext(ctx context.Context) ShovelInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShovelInfoPtrOutput)
}

type ShovelInfoOutput struct{ *pulumi.OutputState }

func (ShovelInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShovelInfo)(nil)).Elem()
}

func (o ShovelInfoOutput) ToShovelInfoOutput() ShovelInfoOutput {
	return o
}

func (o ShovelInfoOutput) ToShovelInfoOutputWithContext(ctx context.Context) ShovelInfoOutput {
	return o
}

func (o ShovelInfoOutput) ToShovelInfoPtrOutput() ShovelInfoPtrOutput {
	return o.ToShovelInfoPtrOutputWithContext(context.Background())
}

func (o ShovelInfoOutput) ToShovelInfoPtrOutputWithContext(ctx context.Context) ShovelInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ShovelInfo) *ShovelInfo {
		return &v
	}).(ShovelInfoPtrOutput)
}

// Determines how the shovel should acknowledge messages. Possible values are: `on-confirm`, `on-publish` and `no-ack`.
// Defaults to `on-confirm`.
func (o ShovelInfoOutput) AckMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.AckMode }).(pulumi.StringPtrOutput)
}

// Whether to add `x-shovelled` headers to shovelled messages.
//
// Deprecated: use destinationAddForwardHeaders instead
func (o ShovelInfoOutput) AddForwardHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *bool { return v.AddForwardHeaders }).(pulumi.BoolPtrOutput)
}

// Determines when (if ever) the shovel should delete itself. Possible values are: `never`, `queue-length` or an integer.
//
// Deprecated: use sourceDeleteAfter instead
func (o ShovelInfoOutput) DeleteAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.DeleteAfter }).(pulumi.StringPtrOutput)
}

// Whether to add `x-shovelled` headers to shovelled messages.
func (o ShovelInfoOutput) DestinationAddForwardHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *bool { return v.DestinationAddForwardHeaders }).(pulumi.BoolPtrOutput)
}

func (o ShovelInfoOutput) DestinationAddTimestampHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *bool { return v.DestinationAddTimestampHeader }).(pulumi.BoolPtrOutput)
}

// The AMQP 1.0 destination link address.
func (o ShovelInfoOutput) DestinationAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.DestinationAddress }).(pulumi.StringPtrOutput)
}

// Application properties to set when shovelling messages.
func (o ShovelInfoOutput) DestinationApplicationProperties() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.DestinationApplicationProperties }).(pulumi.StringPtrOutput)
}

// The exchange to which messages should be published.
// Either this or `destinationQueue` must be specified but not both.
func (o ShovelInfoOutput) DestinationExchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.DestinationExchange }).(pulumi.StringPtrOutput)
}

// The routing key when using `destinationExchange`.
func (o ShovelInfoOutput) DestinationExchangeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.DestinationExchangeKey }).(pulumi.StringPtrOutput)
}

// Properties to overwrite when shovelling messages.
//
// For more details regarding dynamic shovel parameters please have a look at the official reference documentaion at [RabbitMQ: Configuring Dynamic Shovels](https://www.rabbitmq.com/shovel-dynamic.html).
func (o ShovelInfoOutput) DestinationProperties() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.DestinationProperties }).(pulumi.StringPtrOutput)
}

// The protocol (`amqp091` or `amqp10`) to use when connecting to the destination.
// Defaults to `amqp091`.
func (o ShovelInfoOutput) DestinationProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.DestinationProtocol }).(pulumi.StringPtrOutput)
}

// A map of properties to overwrite when shovelling messages.
func (o ShovelInfoOutput) DestinationPublishProperties() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.DestinationPublishProperties }).(pulumi.StringPtrOutput)
}

// The queue to which messages should be published.
// Either this or `destinationExchange` must be specified but not both.
func (o ShovelInfoOutput) DestinationQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.DestinationQueue }).(pulumi.StringPtrOutput)
}

// The amqp uri for the destination .
func (o ShovelInfoOutput) DestinationUri() pulumi.StringOutput {
	return o.ApplyT(func(v ShovelInfo) string { return v.DestinationUri }).(pulumi.StringOutput)
}

// The maximum number of unacknowledged messages copied over a shovel at any one time.
//
// Deprecated: use sourcePrefetchCount instead
func (o ShovelInfoOutput) PrefetchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *int { return v.PrefetchCount }).(pulumi.IntPtrOutput)
}

// The duration in seconds to reconnect to a broker after disconnected.
// Defaults to `1`.
func (o ShovelInfoOutput) ReconnectDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *int { return v.ReconnectDelay }).(pulumi.IntPtrOutput)
}

// The AMQP 1.0 source link address.
func (o ShovelInfoOutput) SourceAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.SourceAddress }).(pulumi.StringPtrOutput)
}

// Determines when (if ever) the shovel should delete itself. Possible values are: `never`, `queue-length` or an integer.
func (o ShovelInfoOutput) SourceDeleteAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.SourceDeleteAfter }).(pulumi.StringPtrOutput)
}

// The exchange from which to consume.
// Either this or `sourceQueue` must be specified but not both.
func (o ShovelInfoOutput) SourceExchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.SourceExchange }).(pulumi.StringPtrOutput)
}

// The routing key when using `sourceExchange`.
func (o ShovelInfoOutput) SourceExchangeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.SourceExchangeKey }).(pulumi.StringPtrOutput)
}

// The maximum number of unacknowledged messages copied over a shovel at any one time.
func (o ShovelInfoOutput) SourcePrefetchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *int { return v.SourcePrefetchCount }).(pulumi.IntPtrOutput)
}

// The protocol (`amqp091` or `amqp10`) to use when connecting to the source.
// Defaults to `amqp091`.
func (o ShovelInfoOutput) SourceProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.SourceProtocol }).(pulumi.StringPtrOutput)
}

// The queue from which to consume.
// Either this or `sourceExchange` must be specified but not both.
func (o ShovelInfoOutput) SourceQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShovelInfo) *string { return v.SourceQueue }).(pulumi.StringPtrOutput)
}

// The amqp uri for the source.
func (o ShovelInfoOutput) SourceUri() pulumi.StringOutput {
	return o.ApplyT(func(v ShovelInfo) string { return v.SourceUri }).(pulumi.StringOutput)
}

type ShovelInfoPtrOutput struct{ *pulumi.OutputState }

func (ShovelInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ShovelInfo)(nil)).Elem()
}

func (o ShovelInfoPtrOutput) ToShovelInfoPtrOutput() ShovelInfoPtrOutput {
	return o
}

func (o ShovelInfoPtrOutput) ToShovelInfoPtrOutputWithContext(ctx context.Context) ShovelInfoPtrOutput {
	return o
}

func (o ShovelInfoPtrOutput) Elem() ShovelInfoOutput {
	return o.ApplyT(func(v *ShovelInfo) ShovelInfo {
		if v != nil {
			return *v
		}
		var ret ShovelInfo
		return ret
	}).(ShovelInfoOutput)
}

// Determines how the shovel should acknowledge messages. Possible values are: `on-confirm`, `on-publish` and `no-ack`.
// Defaults to `on-confirm`.
func (o ShovelInfoPtrOutput) AckMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.AckMode
	}).(pulumi.StringPtrOutput)
}

// Whether to add `x-shovelled` headers to shovelled messages.
//
// Deprecated: use destinationAddForwardHeaders instead
func (o ShovelInfoPtrOutput) AddForwardHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *bool {
		if v == nil {
			return nil
		}
		return v.AddForwardHeaders
	}).(pulumi.BoolPtrOutput)
}

// Determines when (if ever) the shovel should delete itself. Possible values are: `never`, `queue-length` or an integer.
//
// Deprecated: use sourceDeleteAfter instead
func (o ShovelInfoPtrOutput) DeleteAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.DeleteAfter
	}).(pulumi.StringPtrOutput)
}

// Whether to add `x-shovelled` headers to shovelled messages.
func (o ShovelInfoPtrOutput) DestinationAddForwardHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *bool {
		if v == nil {
			return nil
		}
		return v.DestinationAddForwardHeaders
	}).(pulumi.BoolPtrOutput)
}

func (o ShovelInfoPtrOutput) DestinationAddTimestampHeader() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *bool {
		if v == nil {
			return nil
		}
		return v.DestinationAddTimestampHeader
	}).(pulumi.BoolPtrOutput)
}

// The AMQP 1.0 destination link address.
func (o ShovelInfoPtrOutput) DestinationAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.DestinationAddress
	}).(pulumi.StringPtrOutput)
}

// Application properties to set when shovelling messages.
func (o ShovelInfoPtrOutput) DestinationApplicationProperties() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.DestinationApplicationProperties
	}).(pulumi.StringPtrOutput)
}

// The exchange to which messages should be published.
// Either this or `destinationQueue` must be specified but not both.
func (o ShovelInfoPtrOutput) DestinationExchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.DestinationExchange
	}).(pulumi.StringPtrOutput)
}

// The routing key when using `destinationExchange`.
func (o ShovelInfoPtrOutput) DestinationExchangeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.DestinationExchangeKey
	}).(pulumi.StringPtrOutput)
}

// Properties to overwrite when shovelling messages.
//
// For more details regarding dynamic shovel parameters please have a look at the official reference documentaion at [RabbitMQ: Configuring Dynamic Shovels](https://www.rabbitmq.com/shovel-dynamic.html).
func (o ShovelInfoPtrOutput) DestinationProperties() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.DestinationProperties
	}).(pulumi.StringPtrOutput)
}

// The protocol (`amqp091` or `amqp10`) to use when connecting to the destination.
// Defaults to `amqp091`.
func (o ShovelInfoPtrOutput) DestinationProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.DestinationProtocol
	}).(pulumi.StringPtrOutput)
}

// A map of properties to overwrite when shovelling messages.
func (o ShovelInfoPtrOutput) DestinationPublishProperties() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.DestinationPublishProperties
	}).(pulumi.StringPtrOutput)
}

// The queue to which messages should be published.
// Either this or `destinationExchange` must be specified but not both.
func (o ShovelInfoPtrOutput) DestinationQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.DestinationQueue
	}).(pulumi.StringPtrOutput)
}

// The amqp uri for the destination .
func (o ShovelInfoPtrOutput) DestinationUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return &v.DestinationUri
	}).(pulumi.StringPtrOutput)
}

// The maximum number of unacknowledged messages copied over a shovel at any one time.
//
// Deprecated: use sourcePrefetchCount instead
func (o ShovelInfoPtrOutput) PrefetchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *int {
		if v == nil {
			return nil
		}
		return v.PrefetchCount
	}).(pulumi.IntPtrOutput)
}

// The duration in seconds to reconnect to a broker after disconnected.
// Defaults to `1`.
func (o ShovelInfoPtrOutput) ReconnectDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *int {
		if v == nil {
			return nil
		}
		return v.ReconnectDelay
	}).(pulumi.IntPtrOutput)
}

// The AMQP 1.0 source link address.
func (o ShovelInfoPtrOutput) SourceAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.SourceAddress
	}).(pulumi.StringPtrOutput)
}

// Determines when (if ever) the shovel should delete itself. Possible values are: `never`, `queue-length` or an integer.
func (o ShovelInfoPtrOutput) SourceDeleteAfter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.SourceDeleteAfter
	}).(pulumi.StringPtrOutput)
}

// The exchange from which to consume.
// Either this or `sourceQueue` must be specified but not both.
func (o ShovelInfoPtrOutput) SourceExchange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.SourceExchange
	}).(pulumi.StringPtrOutput)
}

// The routing key when using `sourceExchange`.
func (o ShovelInfoPtrOutput) SourceExchangeKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.SourceExchangeKey
	}).(pulumi.StringPtrOutput)
}

// The maximum number of unacknowledged messages copied over a shovel at any one time.
func (o ShovelInfoPtrOutput) SourcePrefetchCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *int {
		if v == nil {
			return nil
		}
		return v.SourcePrefetchCount
	}).(pulumi.IntPtrOutput)
}

// The protocol (`amqp091` or `amqp10`) to use when connecting to the source.
// Defaults to `amqp091`.
func (o ShovelInfoPtrOutput) SourceProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.SourceProtocol
	}).(pulumi.StringPtrOutput)
}

// The queue from which to consume.
// Either this or `sourceExchange` must be specified but not both.
func (o ShovelInfoPtrOutput) SourceQueue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return v.SourceQueue
	}).(pulumi.StringPtrOutput)
}

// The amqp uri for the source.
func (o ShovelInfoPtrOutput) SourceUri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ShovelInfo) *string {
		if v == nil {
			return nil
		}
		return &v.SourceUri
	}).(pulumi.StringPtrOutput)
}

type TopicPermissionsPermission struct {
	// The exchange to set the permissions for.
	Exchange string `pulumi:"exchange"`
	// The "read" ACL.
	Read string `pulumi:"read"`
	// The "write" ACL.
	Write string `pulumi:"write"`
}

// TopicPermissionsPermissionInput is an input type that accepts TopicPermissionsPermissionArgs and TopicPermissionsPermissionOutput values.
// You can construct a concrete instance of `TopicPermissionsPermissionInput` via:
//
//	TopicPermissionsPermissionArgs{...}
type TopicPermissionsPermissionInput interface {
	pulumi.Input

	ToTopicPermissionsPermissionOutput() TopicPermissionsPermissionOutput
	ToTopicPermissionsPermissionOutputWithContext(context.Context) TopicPermissionsPermissionOutput
}

type TopicPermissionsPermissionArgs struct {
	// The exchange to set the permissions for.
	Exchange pulumi.StringInput `pulumi:"exchange"`
	// The "read" ACL.
	Read pulumi.StringInput `pulumi:"read"`
	// The "write" ACL.
	Write pulumi.StringInput `pulumi:"write"`
}

func (TopicPermissionsPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicPermissionsPermission)(nil)).Elem()
}

func (i TopicPermissionsPermissionArgs) ToTopicPermissionsPermissionOutput() TopicPermissionsPermissionOutput {
	return i.ToTopicPermissionsPermissionOutputWithContext(context.Background())
}

func (i TopicPermissionsPermissionArgs) ToTopicPermissionsPermissionOutputWithContext(ctx context.Context) TopicPermissionsPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPermissionsPermissionOutput)
}

// TopicPermissionsPermissionArrayInput is an input type that accepts TopicPermissionsPermissionArray and TopicPermissionsPermissionArrayOutput values.
// You can construct a concrete instance of `TopicPermissionsPermissionArrayInput` via:
//
//	TopicPermissionsPermissionArray{ TopicPermissionsPermissionArgs{...} }
type TopicPermissionsPermissionArrayInput interface {
	pulumi.Input

	ToTopicPermissionsPermissionArrayOutput() TopicPermissionsPermissionArrayOutput
	ToTopicPermissionsPermissionArrayOutputWithContext(context.Context) TopicPermissionsPermissionArrayOutput
}

type TopicPermissionsPermissionArray []TopicPermissionsPermissionInput

func (TopicPermissionsPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicPermissionsPermission)(nil)).Elem()
}

func (i TopicPermissionsPermissionArray) ToTopicPermissionsPermissionArrayOutput() TopicPermissionsPermissionArrayOutput {
	return i.ToTopicPermissionsPermissionArrayOutputWithContext(context.Background())
}

func (i TopicPermissionsPermissionArray) ToTopicPermissionsPermissionArrayOutputWithContext(ctx context.Context) TopicPermissionsPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPermissionsPermissionArrayOutput)
}

type TopicPermissionsPermissionOutput struct{ *pulumi.OutputState }

func (TopicPermissionsPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicPermissionsPermission)(nil)).Elem()
}

func (o TopicPermissionsPermissionOutput) ToTopicPermissionsPermissionOutput() TopicPermissionsPermissionOutput {
	return o
}

func (o TopicPermissionsPermissionOutput) ToTopicPermissionsPermissionOutputWithContext(ctx context.Context) TopicPermissionsPermissionOutput {
	return o
}

// The exchange to set the permissions for.
func (o TopicPermissionsPermissionOutput) Exchange() pulumi.StringOutput {
	return o.ApplyT(func(v TopicPermissionsPermission) string { return v.Exchange }).(pulumi.StringOutput)
}

// The "read" ACL.
func (o TopicPermissionsPermissionOutput) Read() pulumi.StringOutput {
	return o.ApplyT(func(v TopicPermissionsPermission) string { return v.Read }).(pulumi.StringOutput)
}

// The "write" ACL.
func (o TopicPermissionsPermissionOutput) Write() pulumi.StringOutput {
	return o.ApplyT(func(v TopicPermissionsPermission) string { return v.Write }).(pulumi.StringOutput)
}

type TopicPermissionsPermissionArrayOutput struct{ *pulumi.OutputState }

func (TopicPermissionsPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicPermissionsPermission)(nil)).Elem()
}

func (o TopicPermissionsPermissionArrayOutput) ToTopicPermissionsPermissionArrayOutput() TopicPermissionsPermissionArrayOutput {
	return o
}

func (o TopicPermissionsPermissionArrayOutput) ToTopicPermissionsPermissionArrayOutputWithContext(ctx context.Context) TopicPermissionsPermissionArrayOutput {
	return o
}

func (o TopicPermissionsPermissionArrayOutput) Index(i pulumi.IntInput) TopicPermissionsPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicPermissionsPermission {
		return vs[0].([]TopicPermissionsPermission)[vs[1].(int)]
	}).(TopicPermissionsPermissionOutput)
}

type GetExchangeSetting struct {
	Arguments  map[string]string `pulumi:"arguments"`
	AutoDelete *bool             `pulumi:"autoDelete"`
	Durable    *bool             `pulumi:"durable"`
	Type       string            `pulumi:"type"`
}

// GetExchangeSettingInput is an input type that accepts GetExchangeSettingArgs and GetExchangeSettingOutput values.
// You can construct a concrete instance of `GetExchangeSettingInput` via:
//
//	GetExchangeSettingArgs{...}
type GetExchangeSettingInput interface {
	pulumi.Input

	ToGetExchangeSettingOutput() GetExchangeSettingOutput
	ToGetExchangeSettingOutputWithContext(context.Context) GetExchangeSettingOutput
}

type GetExchangeSettingArgs struct {
	Arguments  pulumi.StringMapInput `pulumi:"arguments"`
	AutoDelete pulumi.BoolPtrInput   `pulumi:"autoDelete"`
	Durable    pulumi.BoolPtrInput   `pulumi:"durable"`
	Type       pulumi.StringInput    `pulumi:"type"`
}

func (GetExchangeSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExchangeSetting)(nil)).Elem()
}

func (i GetExchangeSettingArgs) ToGetExchangeSettingOutput() GetExchangeSettingOutput {
	return i.ToGetExchangeSettingOutputWithContext(context.Background())
}

func (i GetExchangeSettingArgs) ToGetExchangeSettingOutputWithContext(ctx context.Context) GetExchangeSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExchangeSettingOutput)
}

// GetExchangeSettingArrayInput is an input type that accepts GetExchangeSettingArray and GetExchangeSettingArrayOutput values.
// You can construct a concrete instance of `GetExchangeSettingArrayInput` via:
//
//	GetExchangeSettingArray{ GetExchangeSettingArgs{...} }
type GetExchangeSettingArrayInput interface {
	pulumi.Input

	ToGetExchangeSettingArrayOutput() GetExchangeSettingArrayOutput
	ToGetExchangeSettingArrayOutputWithContext(context.Context) GetExchangeSettingArrayOutput
}

type GetExchangeSettingArray []GetExchangeSettingInput

func (GetExchangeSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExchangeSetting)(nil)).Elem()
}

func (i GetExchangeSettingArray) ToGetExchangeSettingArrayOutput() GetExchangeSettingArrayOutput {
	return i.ToGetExchangeSettingArrayOutputWithContext(context.Background())
}

func (i GetExchangeSettingArray) ToGetExchangeSettingArrayOutputWithContext(ctx context.Context) GetExchangeSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetExchangeSettingArrayOutput)
}

type GetExchangeSettingOutput struct{ *pulumi.OutputState }

func (GetExchangeSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetExchangeSetting)(nil)).Elem()
}

func (o GetExchangeSettingOutput) ToGetExchangeSettingOutput() GetExchangeSettingOutput {
	return o
}

func (o GetExchangeSettingOutput) ToGetExchangeSettingOutputWithContext(ctx context.Context) GetExchangeSettingOutput {
	return o
}

func (o GetExchangeSettingOutput) Arguments() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetExchangeSetting) map[string]string { return v.Arguments }).(pulumi.StringMapOutput)
}

func (o GetExchangeSettingOutput) AutoDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetExchangeSetting) *bool { return v.AutoDelete }).(pulumi.BoolPtrOutput)
}

func (o GetExchangeSettingOutput) Durable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetExchangeSetting) *bool { return v.Durable }).(pulumi.BoolPtrOutput)
}

func (o GetExchangeSettingOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetExchangeSetting) string { return v.Type }).(pulumi.StringOutput)
}

type GetExchangeSettingArrayOutput struct{ *pulumi.OutputState }

func (GetExchangeSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetExchangeSetting)(nil)).Elem()
}

func (o GetExchangeSettingArrayOutput) ToGetExchangeSettingArrayOutput() GetExchangeSettingArrayOutput {
	return o
}

func (o GetExchangeSettingArrayOutput) ToGetExchangeSettingArrayOutputWithContext(ctx context.Context) GetExchangeSettingArrayOutput {
	return o
}

func (o GetExchangeSettingArrayOutput) Index(i pulumi.IntInput) GetExchangeSettingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetExchangeSetting {
		return vs[0].([]GetExchangeSetting)[vs[1].(int)]
	}).(GetExchangeSettingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangeSettingsInput)(nil)).Elem(), ExchangeSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ExchangeSettingsPtrInput)(nil)).Elem(), ExchangeSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederationUpstreamDefinitionInput)(nil)).Elem(), FederationUpstreamDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederationUpstreamDefinitionPtrInput)(nil)).Elem(), FederationUpstreamDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorPolicyPolicyInput)(nil)).Elem(), OperatorPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OperatorPolicyPolicyPtrInput)(nil)).Elem(), OperatorPolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionsPermissionsInput)(nil)).Elem(), PermissionsPermissionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionsPermissionsPtrInput)(nil)).Elem(), PermissionsPermissionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyPolicyInput)(nil)).Elem(), PolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyPolicyPtrInput)(nil)).Elem(), PolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueSettingsInput)(nil)).Elem(), QueueSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*QueueSettingsPtrInput)(nil)).Elem(), QueueSettingsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShovelInfoInput)(nil)).Elem(), ShovelInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShovelInfoPtrInput)(nil)).Elem(), ShovelInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPermissionsPermissionInput)(nil)).Elem(), TopicPermissionsPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPermissionsPermissionArrayInput)(nil)).Elem(), TopicPermissionsPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExchangeSettingInput)(nil)).Elem(), GetExchangeSettingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetExchangeSettingArrayInput)(nil)).Elem(), GetExchangeSettingArray{})
	pulumi.RegisterOutputType(ExchangeSettingsOutput{})
	pulumi.RegisterOutputType(ExchangeSettingsPtrOutput{})
	pulumi.RegisterOutputType(FederationUpstreamDefinitionOutput{})
	pulumi.RegisterOutputType(FederationUpstreamDefinitionPtrOutput{})
	pulumi.RegisterOutputType(OperatorPolicyPolicyOutput{})
	pulumi.RegisterOutputType(OperatorPolicyPolicyPtrOutput{})
	pulumi.RegisterOutputType(PermissionsPermissionsOutput{})
	pulumi.RegisterOutputType(PermissionsPermissionsPtrOutput{})
	pulumi.RegisterOutputType(PolicyPolicyOutput{})
	pulumi.RegisterOutputType(PolicyPolicyPtrOutput{})
	pulumi.RegisterOutputType(QueueSettingsOutput{})
	pulumi.RegisterOutputType(QueueSettingsPtrOutput{})
	pulumi.RegisterOutputType(ShovelInfoOutput{})
	pulumi.RegisterOutputType(ShovelInfoPtrOutput{})
	pulumi.RegisterOutputType(TopicPermissionsPermissionOutput{})
	pulumi.RegisterOutputType(TopicPermissionsPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetExchangeSettingOutput{})
	pulumi.RegisterOutputType(GetExchangeSettingArrayOutput{})
}
