// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package rabbitmq

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// The ``.VHost`` resource creates and manages a vhost.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-rabbitmq/blob/master/website/docs/r/vhost.html.markdown.
type VHost struct {
	s *pulumi.ResourceState
}

// NewVHost registers a new resource with the given unique name, arguments, and options.
func NewVHost(ctx *pulumi.Context,
	name string, args *VHostArgs, opts ...pulumi.ResourceOpt) (*VHost, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["name"] = nil
	} else {
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("rabbitmq:index/vHost:VHost", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VHost{s: s}, nil
}

// GetVHost gets an existing VHost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVHost(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VHostState, opts ...pulumi.ResourceOpt) (*VHost, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("rabbitmq:index/vHost:VHost", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VHost{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VHost) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VHost) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The name of the vhost.
func (r *VHost) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering VHost resources.
type VHostState struct {
	// The name of the vhost.
	Name interface{}
}

// The set of arguments for constructing a VHost resource.
type VHostArgs struct {
	// The name of the vhost.
	Name interface{}
}
