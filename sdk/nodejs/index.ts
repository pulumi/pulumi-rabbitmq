// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BindingArgs, BindingState } from "./binding";
export type Binding = import("./binding").Binding;
export const Binding: typeof import("./binding").Binding = null as any;
utilities.lazyLoad(exports, ["Binding"], () => require("./binding"));

export { ExchangeArgs, ExchangeState } from "./exchange";
export type Exchange = import("./exchange").Exchange;
export const Exchange: typeof import("./exchange").Exchange = null as any;
utilities.lazyLoad(exports, ["Exchange"], () => require("./exchange"));

export { FederationUpstreamArgs, FederationUpstreamState } from "./federationUpstream";
export type FederationUpstream = import("./federationUpstream").FederationUpstream;
export const FederationUpstream: typeof import("./federationUpstream").FederationUpstream = null as any;
utilities.lazyLoad(exports, ["FederationUpstream"], () => require("./federationUpstream"));

export { GetDefaultUserArgs, GetDefaultUserResult, GetDefaultUserOutputArgs } from "./getDefaultUser";
export const getDefaultUser: typeof import("./getDefaultUser").getDefaultUser = null as any;
export const getDefaultUserOutput: typeof import("./getDefaultUser").getDefaultUserOutput = null as any;
utilities.lazyLoad(exports, ["getDefaultUser","getDefaultUserOutput"], () => require("./getDefaultUser"));

export { GetExchangeArgs, GetExchangeResult, GetExchangeOutputArgs } from "./getExchange";
export const getExchange: typeof import("./getExchange").getExchange = null as any;
export const getExchangeOutput: typeof import("./getExchange").getExchangeOutput = null as any;
utilities.lazyLoad(exports, ["getExchange","getExchangeOutput"], () => require("./getExchange"));

export { GetUserArgs, GetUserResult, GetUserOutputArgs } from "./getUser";
export const getUser: typeof import("./getUser").getUser = null as any;
export const getUserOutput: typeof import("./getUser").getUserOutput = null as any;
utilities.lazyLoad(exports, ["getUser","getUserOutput"], () => require("./getUser"));

export { GetVHostArgs, GetVHostResult, GetVHostOutputArgs } from "./getVHost";
export const getVHost: typeof import("./getVHost").getVHost = null as any;
export const getVHostOutput: typeof import("./getVHost").getVHostOutput = null as any;
utilities.lazyLoad(exports, ["getVHost","getVHostOutput"], () => require("./getVHost"));

export { OperatorPolicyArgs, OperatorPolicyState } from "./operatorPolicy";
export type OperatorPolicy = import("./operatorPolicy").OperatorPolicy;
export const OperatorPolicy: typeof import("./operatorPolicy").OperatorPolicy = null as any;
utilities.lazyLoad(exports, ["OperatorPolicy"], () => require("./operatorPolicy"));

export { PermissionsArgs, PermissionsState } from "./permissions";
export type Permissions = import("./permissions").Permissions;
export const Permissions: typeof import("./permissions").Permissions = null as any;
utilities.lazyLoad(exports, ["Permissions"], () => require("./permissions"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export * from "./provider";
import { Provider } from "./provider";

export { QueueArgs, QueueState } from "./queue";
export type Queue = import("./queue").Queue;
export const Queue: typeof import("./queue").Queue = null as any;
utilities.lazyLoad(exports, ["Queue"], () => require("./queue"));

export { ShovelArgs, ShovelState } from "./shovel";
export type Shovel = import("./shovel").Shovel;
export const Shovel: typeof import("./shovel").Shovel = null as any;
utilities.lazyLoad(exports, ["Shovel"], () => require("./shovel"));

export { TopicPermissionsArgs, TopicPermissionsState } from "./topicPermissions";
export type TopicPermissions = import("./topicPermissions").TopicPermissions;
export const TopicPermissions: typeof import("./topicPermissions").TopicPermissions = null as any;
utilities.lazyLoad(exports, ["TopicPermissions"], () => require("./topicPermissions"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { VHostArgs, VHostState } from "./vhost";
export type VHost = import("./vhost").VHost;
export const VHost: typeof import("./vhost").VHost = null as any;
utilities.lazyLoad(exports, ["VHost"], () => require("./vhost"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "rabbitmq:index/binding:Binding":
                return new Binding(name, <any>undefined, { urn })
            case "rabbitmq:index/exchange:Exchange":
                return new Exchange(name, <any>undefined, { urn })
            case "rabbitmq:index/federationUpstream:FederationUpstream":
                return new FederationUpstream(name, <any>undefined, { urn })
            case "rabbitmq:index/operatorPolicy:OperatorPolicy":
                return new OperatorPolicy(name, <any>undefined, { urn })
            case "rabbitmq:index/permissions:Permissions":
                return new Permissions(name, <any>undefined, { urn })
            case "rabbitmq:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "rabbitmq:index/queue:Queue":
                return new Queue(name, <any>undefined, { urn })
            case "rabbitmq:index/shovel:Shovel":
                return new Shovel(name, <any>undefined, { urn })
            case "rabbitmq:index/topicPermissions:TopicPermissions":
                return new TopicPermissions(name, <any>undefined, { urn })
            case "rabbitmq:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "rabbitmq:index/vHost:VHost":
                return new VHost(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("rabbitmq", "index/binding", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/exchange", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/federationUpstream", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/operatorPolicy", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/permissions", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/policy", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/queue", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/shovel", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/topicPermissions", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/user", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/vHost", _module)
pulumi.runtime.registerResourcePackage("rabbitmq", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:rabbitmq") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
