// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./binding";
export * from "./exchange";
export * from "./federationUpstream";
export * from "./getExchange";
export * from "./getUser";
export * from "./getVHost";
export * from "./operatorPolicy";
export * from "./permissions";
export * from "./policy";
export * from "./provider";
export * from "./queue";
export * from "./shovel";
export * from "./topicPermissions";
export * from "./user";
export * from "./vhost";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { Binding } from "./binding";
import { Exchange } from "./exchange";
import { FederationUpstream } from "./federationUpstream";
import { OperatorPolicy } from "./operatorPolicy";
import { Permissions } from "./permissions";
import { Policy } from "./policy";
import { Queue } from "./queue";
import { Shovel } from "./shovel";
import { TopicPermissions } from "./topicPermissions";
import { User } from "./user";
import { VHost } from "./vhost";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "rabbitmq:index/binding:Binding":
                return new Binding(name, <any>undefined, { urn })
            case "rabbitmq:index/exchange:Exchange":
                return new Exchange(name, <any>undefined, { urn })
            case "rabbitmq:index/federationUpstream:FederationUpstream":
                return new FederationUpstream(name, <any>undefined, { urn })
            case "rabbitmq:index/operatorPolicy:OperatorPolicy":
                return new OperatorPolicy(name, <any>undefined, { urn })
            case "rabbitmq:index/permissions:Permissions":
                return new Permissions(name, <any>undefined, { urn })
            case "rabbitmq:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "rabbitmq:index/queue:Queue":
                return new Queue(name, <any>undefined, { urn })
            case "rabbitmq:index/shovel:Shovel":
                return new Shovel(name, <any>undefined, { urn })
            case "rabbitmq:index/topicPermissions:TopicPermissions":
                return new TopicPermissions(name, <any>undefined, { urn })
            case "rabbitmq:index/user:User":
                return new User(name, <any>undefined, { urn })
            case "rabbitmq:index/vHost:VHost":
                return new VHost(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("rabbitmq", "index/binding", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/exchange", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/federationUpstream", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/operatorPolicy", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/permissions", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/policy", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/queue", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/shovel", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/topicPermissions", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/user", _module)
pulumi.runtime.registerResourceModule("rabbitmq", "index/vHost", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("rabbitmq", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:rabbitmq") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
