// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface ExchangeSettings {
    /**
     * Additional key/value settings for the exchange.
     */
    arguments?: pulumi.Input<{[key: string]: any}>;
    /**
     * Whether the exchange will self-delete when all
     * queues have finished using it.
     */
    autoDelete?: pulumi.Input<boolean>;
    /**
     * Whether the exchange survives server restarts.
     * Defaults to `false`.
     */
    durable?: pulumi.Input<boolean>;
    /**
     * The type of exchange.
     */
    type: pulumi.Input<string>;
}

export interface FederationUpstreamDefinition {
    ackMode?: pulumi.Input<string>;
    exchange?: pulumi.Input<string>;
    expires?: pulumi.Input<number>;
    maxHops?: pulumi.Input<number>;
    messageTtl?: pulumi.Input<number>;
    prefetchCount?: pulumi.Input<number>;
    queue?: pulumi.Input<string>;
    reconnectDelay?: pulumi.Input<number>;
    trustUserId?: pulumi.Input<boolean>;
    uri: pulumi.Input<string>;
}

export interface PermissionsPermissions {
    /**
     * The "configure" ACL.
     */
    configure: pulumi.Input<string>;
    /**
     * The "read" ACL.
     */
    read: pulumi.Input<string>;
    /**
     * The "write" ACL.
     */
    write: pulumi.Input<string>;
}

export interface PolicyPolicy {
    /**
     * Can either be "exchanges", "queues", or "all".
     */
    applyTo: pulumi.Input<string>;
    /**
     * Key/value pairs of the policy definition. See the
     * RabbitMQ documentation for definition references and examples.
     */
    definition: pulumi.Input<{[key: string]: any}>;
    /**
     * A pattern to match an exchange or queue name.
     */
    pattern: pulumi.Input<string>;
    /**
     * The policy with the greater priority is applied first.
     */
    priority: pulumi.Input<number>;
}

export interface QueueSettings {
    /**
     * Additional key/value settings for the queue.
     * All values will be sent to RabbitMQ as a string. If you require non-string
     * values, use `argumentsJson`.
     */
    arguments?: pulumi.Input<{[key: string]: any}>;
    /**
     * A nested JSON string which contains additional
     * settings for the queue. This is useful for when the arguments contain
     * non-string values.
     */
    argumentsJson?: pulumi.Input<string>;
    /**
     * Whether the queue will self-delete when all
     * consumers have unsubscribed.
     */
    autoDelete?: pulumi.Input<boolean>;
    /**
     * Whether the queue survives server restarts.
     * Defaults to `false`.
     */
    durable?: pulumi.Input<boolean>;
}

export interface ShovelInfo {
    /**
     * Determines how the shovel should acknowledge messages.
     * Defaults to `on-confirm`.
     */
    ackMode?: pulumi.Input<string>;
    /**
     * Whether to amqp shovel headers.
     * Defaults to `false`.
     */
    addForwardHeaders?: pulumi.Input<boolean>;
    /**
     * Determines when (if ever) the shovel should delete itself .
     * Defaults to `never`.
     */
    deleteAfter?: pulumi.Input<string>;
    /**
     * The exchange to which messages should be published.
     * Either this or destinationQueue must be specified but not both.
     */
    destinationExchange?: pulumi.Input<string>;
    /**
     * The routing key when using destination_exchange.
     */
    destinationExchangeKey?: pulumi.Input<string>;
    /**
     * The queue to which messages should be published.
     * Either this or destinationExchange must be specified but not both.
     */
    destinationQueue?: pulumi.Input<string>;
    /**
     * The amqp uri for the destination .
     */
    destinationUri: pulumi.Input<string>;
    /**
     * The maximum number of unacknowledged messages copied over a shovel at any one time.
     * Defaults to `1000`.
     */
    prefetchCount?: pulumi.Input<number>;
    /**
     * The duration in seconds to reconnect to a broker after disconnected.
     * Defaults to `1`.
     */
    reconnectDelay?: pulumi.Input<number>;
    /**
     * The exchange from which to consume.
     * Either this or sourceQueue must be specified but not both.
     */
    sourceExchange?: pulumi.Input<string>;
    /**
     * The routing key when using source_exchange.
     */
    sourceExchangeKey?: pulumi.Input<string>;
    /**
     * The queue from which to consume.
     * Either this or sourceExchange must be specified but not both.
     */
    sourceQueue?: pulumi.Input<string>;
    /**
     * The amqp uri for the source.
     */
    sourceUri: pulumi.Input<string>;
}

export interface TopicPermissionsPermission {
    /**
     * The exchange to set the permissions for.
     */
    exchange: pulumi.Input<string>;
    /**
     * The "read" ACL.
     */
    read: pulumi.Input<string>;
    /**
     * The "write" ACL.
     */
    write: pulumi.Input<string>;
}
