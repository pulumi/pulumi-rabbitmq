// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ExchangeSettings {
    /**
     * Additional key/value settings for the exchange.
     */
    arguments?: pulumi.Input<{[key: string]: any}>;
    /**
     * Whether the exchange will self-delete when all
     * queues have finished using it.
     */
    autoDelete?: pulumi.Input<boolean>;
    /**
     * Whether the exchange survives server restarts.
     * Defaults to `false`.
     */
    durable?: pulumi.Input<boolean>;
    /**
     * The type of exchange.
     */
    type: pulumi.Input<string>;
}

export interface FederationUpstreamDefinition {
    /**
     * Determines how the link should acknowledge messages. Valid values are `on-confirm`, `on-publish`, and `no-ack`. Default is `on-confirm`.
     */
    ackMode?: pulumi.Input<string>;
    /**
     * The name of the upstream exchange.
     */
    exchange?: pulumi.Input<string>;
    /**
     * The expiry time (in milliseconds) after which an upstream queue for a federated exchange may be deleted if a connection to the upstream is lost.
     */
    expires?: pulumi.Input<number>;
    /**
     * Maximum number of federation links that messages can traverse before being dropped. Default is `1`.
     */
    maxHops?: pulumi.Input<number>;
    /**
     * The expiry time (in milliseconds) for messages in the upstream queue for a federated exchange (see expires).
     *
     * Applicable to Federated Queues Only
     */
    messageTtl?: pulumi.Input<number>;
    /**
     * Maximum number of unacknowledged messages that may be in flight over a federation link at one time. Default is `1000`.
     */
    prefetchCount?: pulumi.Input<number>;
    /**
     * The name of the upstream queue.
     *
     * Consult the RabbitMQ [Federation Reference](https://www.rabbitmq.com/federation-reference.html) documentation for detailed information and guidance on setting these values.
     */
    queue?: pulumi.Input<string>;
    /**
     * Time in seconds to wait after a network link goes down before attempting reconnection. Default is `5`.
     */
    reconnectDelay?: pulumi.Input<number>;
    /**
     * Determines how federation should interact with the validated user-id feature. Default is `false`.
     *
     * Applicable to Federated Exchanges Only
     */
    trustUserId?: pulumi.Input<boolean>;
    /**
     * The AMQP URI(s) for the upstream. Note that the URI may contain sensitive information, such as a password.
     */
    uri: pulumi.Input<string>;
}

export interface OperatorPolicyPolicy {
    /**
     * Can be "queues".
     */
    applyTo: pulumi.Input<string>;
    /**
     * Key/value pairs of the operator policy definition. See the
     * RabbitMQ documentation for definition references and examples.
     */
    definition: pulumi.Input<{[key: string]: any}>;
    /**
     * A pattern to match an exchange or queue name.
     */
    pattern: pulumi.Input<string>;
    /**
     * The policy with the greater priority is applied first.
     */
    priority: pulumi.Input<number>;
}

export interface PermissionsPermissions {
    /**
     * The "configure" ACL.
     */
    configure: pulumi.Input<string>;
    /**
     * The "read" ACL.
     */
    read: pulumi.Input<string>;
    /**
     * The "write" ACL.
     */
    write: pulumi.Input<string>;
}

export interface PolicyPolicy {
    /**
     * Can either be "exchanges", "queues", or "all".
     */
    applyTo: pulumi.Input<string>;
    /**
     * Key/value pairs of the policy definition. See the
     * RabbitMQ documentation for definition references and examples.
     */
    definition: pulumi.Input<{[key: string]: any}>;
    /**
     * A pattern to match an exchange or queue name.
     */
    pattern: pulumi.Input<string>;
    /**
     * The policy with the greater priority is applied first.
     */
    priority: pulumi.Input<number>;
}

export interface QueueSettings {
    /**
     * Additional key/value settings for the queue.
     * All values will be sent to RabbitMQ as a string. If you require non-string
     * values, use `argumentsJson`.
     */
    arguments?: pulumi.Input<{[key: string]: any}>;
    /**
     * A nested JSON string which contains additional
     * settings for the queue. This is useful for when the arguments contain
     * non-string values.
     */
    argumentsJson?: pulumi.Input<string>;
    /**
     * Whether the queue will self-delete when all
     * consumers have unsubscribed.
     */
    autoDelete?: pulumi.Input<boolean>;
    /**
     * Whether the queue survives server restarts.
     * Defaults to `false`.
     */
    durable?: pulumi.Input<boolean>;
}

export interface ShovelInfo {
    ackMode?: pulumi.Input<string>;
    /**
     * @deprecated use destinationAddForwardHeaders instead
     */
    addForwardHeaders?: pulumi.Input<boolean>;
    /**
     * @deprecated use sourceDeleteAfter instead
     */
    deleteAfter?: pulumi.Input<string>;
    destinationAddForwardHeaders?: pulumi.Input<boolean>;
    destinationAddTimestampHeader?: pulumi.Input<boolean>;
    destinationAddress?: pulumi.Input<string>;
    destinationApplicationProperties?: pulumi.Input<string>;
    destinationExchange?: pulumi.Input<string>;
    destinationExchangeKey?: pulumi.Input<string>;
    destinationProperties?: pulumi.Input<string>;
    destinationProtocol?: pulumi.Input<string>;
    destinationPublishProperties?: pulumi.Input<string>;
    destinationQueue?: pulumi.Input<string>;
    destinationUri: pulumi.Input<string>;
    /**
     * @deprecated use sourcePrefetchCount instead
     */
    prefetchCount?: pulumi.Input<number>;
    reconnectDelay?: pulumi.Input<number>;
    sourceAddress?: pulumi.Input<string>;
    sourceDeleteAfter?: pulumi.Input<string>;
    sourceExchange?: pulumi.Input<string>;
    sourceExchangeKey?: pulumi.Input<string>;
    sourcePrefetchCount?: pulumi.Input<number>;
    sourceProtocol?: pulumi.Input<string>;
    sourceQueue?: pulumi.Input<string>;
    sourceUri: pulumi.Input<string>;
}

export interface TopicPermissionsPermission {
    /**
     * The exchange to set the permissions for.
     */
    exchange: pulumi.Input<string>;
    /**
     * The "read" ACL.
     */
    read: pulumi.Input<string>;
    /**
     * The "write" ACL.
     */
    write: pulumi.Input<string>;
}
