// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The ``rabbitmq.VHost`` resource creates and manages a vhost.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rabbitmq from "@pulumi/rabbitmq";
 *
 * const myVhost = new rabbitmq.VHost("my_vhost", {
 *     name: "my_vhost",
 *     description: "My Vhost",
 *     defaultQueueType: "quorum",
 *     maxConnections: "200",
 *     maxQueues: "100",
 *     tracing: true,
 * });
 * ```
 *
 * ## Import
 *
 * Vhosts can be imported using the `name`, e.g.
 *
 * ```sh
 * $ pulumi import rabbitmq:index/vHost:VHost my_vhost my_vhost
 * ```
 */
export class VHost extends pulumi.CustomResource {
    /**
     * Get an existing VHost resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VHostState, opts?: pulumi.CustomResourceOptions): VHost {
        return new VHost(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rabbitmq:index/vHost:VHost';

    /**
     * Returns true if the given object is an instance of VHost.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VHost {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VHost.__pulumiType;
    }

    /**
     * default queue type for new queues
     */
    declare public readonly defaultQueueType: pulumi.Output<string | undefined>;
    /**
     * A friendly description.
     */
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Maximum number of concurrent client connections to the vhost
     */
    declare public readonly maxConnections: pulumi.Output<string | undefined>;
    /**
     * Maximum number of queues that can be created on the vhost
     */
    declare public readonly maxQueues: pulumi.Output<string | undefined>;
    /**
     * The name of the vhost.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly tracing: pulumi.Output<boolean | undefined>;

    /**
     * Create a VHost resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: VHostArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VHostArgs | VHostState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VHostState | undefined;
            resourceInputs["defaultQueueType"] = state?.defaultQueueType;
            resourceInputs["description"] = state?.description;
            resourceInputs["maxConnections"] = state?.maxConnections;
            resourceInputs["maxQueues"] = state?.maxQueues;
            resourceInputs["name"] = state?.name;
            resourceInputs["tracing"] = state?.tracing;
        } else {
            const args = argsOrState as VHostArgs | undefined;
            resourceInputs["defaultQueueType"] = args?.defaultQueueType;
            resourceInputs["description"] = args?.description;
            resourceInputs["maxConnections"] = args?.maxConnections;
            resourceInputs["maxQueues"] = args?.maxQueues;
            resourceInputs["name"] = args?.name;
            resourceInputs["tracing"] = args?.tracing;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VHost.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VHost resources.
 */
export interface VHostState {
    /**
     * default queue type for new queues
     */
    defaultQueueType?: pulumi.Input<string>;
    /**
     * A friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * Maximum number of concurrent client connections to the vhost
     */
    maxConnections?: pulumi.Input<string>;
    /**
     * Maximum number of queues that can be created on the vhost
     */
    maxQueues?: pulumi.Input<string>;
    /**
     * The name of the vhost.
     */
    name?: pulumi.Input<string>;
    tracing?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a VHost resource.
 */
export interface VHostArgs {
    /**
     * default queue type for new queues
     */
    defaultQueueType?: pulumi.Input<string>;
    /**
     * A friendly description.
     */
    description?: pulumi.Input<string>;
    /**
     * Maximum number of concurrent client connections to the vhost
     */
    maxConnections?: pulumi.Input<string>;
    /**
     * Maximum number of queues that can be created on the vhost
     */
    maxQueues?: pulumi.Input<string>;
    /**
     * The name of the vhost.
     */
    name?: pulumi.Input<string>;
    tracing?: pulumi.Input<boolean>;
}
