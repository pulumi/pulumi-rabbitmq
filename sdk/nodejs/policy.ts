// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The ``rabbitmq.Policy`` resource creates and manages policies for exchanges
 * and queues.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rabbitmq from "@pulumi/rabbitmq";
 *
 * const test = new rabbitmq.VHost("test", {name: "test"});
 * const guest = new rabbitmq.Permissions("guest", {
 *     user: "guest",
 *     vhost: test.name,
 *     permissions: {
 *         configure: ".*",
 *         write: ".*",
 *         read: ".*",
 *     },
 * });
 * const testPolicy = new rabbitmq.Policy("test", {
 *     name: "test",
 *     vhost: guest.vhost,
 *     policy: {
 *         pattern: ".*",
 *         priority: 0,
 *         applyTo: "all",
 *         definition: {
 *             "ha-mode": "all",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Policies can be imported using the `id` which is composed of `name@vhost`.
 *
 * E.g.
 *
 * ```sh
 * $ pulumi import rabbitmq:index/policy:Policy test name@vhost
 * ```
 */
export class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy {
        return new Policy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rabbitmq:index/policy:Policy';

    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Policy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }

    /**
     * The name of the policy.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The settings of the policy. The structure is
     * described below.
     */
    declare public readonly policy: pulumi.Output<outputs.PolicyPolicy>;
    /**
     * The vhost to create the resource in.
     */
    declare public readonly vhost: pulumi.Output<string>;

    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PolicyArgs | PolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PolicyState | undefined;
            resourceInputs["name"] = state?.name;
            resourceInputs["policy"] = state?.policy;
            resourceInputs["vhost"] = state?.vhost;
        } else {
            const args = argsOrState as PolicyArgs | undefined;
            if (args?.policy === undefined && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if (args?.vhost === undefined && !opts.urn) {
                throw new Error("Missing required property 'vhost'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["policy"] = args?.policy;
            resourceInputs["vhost"] = args?.vhost;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Policy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * The name of the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The settings of the policy. The structure is
     * described below.
     */
    policy?: pulumi.Input<inputs.PolicyPolicy>;
    /**
     * The vhost to create the resource in.
     */
    vhost?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * The name of the policy.
     */
    name?: pulumi.Input<string>;
    /**
     * The settings of the policy. The structure is
     * described below.
     */
    policy: pulumi.Input<inputs.PolicyPolicy>;
    /**
     * The vhost to create the resource in.
     */
    vhost: pulumi.Input<string>;
}
