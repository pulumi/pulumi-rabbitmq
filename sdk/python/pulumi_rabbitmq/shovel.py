# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class Shovel(pulumi.CustomResource):
    info: pulumi.Output[dict]
    """
    The settings of the shovel. The structure is
    described below.

      * `ackMode` (`str`) - Determines how the shovel should acknowledge messages.
        Defaults to `on-confirm`.
      * `addForwardHeaders` (`bool`) - Whether to amqp shovel headers.
        Defaults to `false`.
      * `deleteAfter` (`str`) - Determines when (if ever) the shovel should delete itself .
        Defaults to `never`.
      * `destinationExchange` (`str`) - The exchange to which messages should be published.
        Either this or destination_queue must be specified but not both.
      * `destinationExchangeKey` (`str`) - The routing key when using destination_exchange.
      * `destinationQueue` (`str`) - The queue to which messages should be published.
        Either this or destination_exchange must be specified but not both.
      * `destinationUri` (`str`) - The amqp uri for the destination .
      * `prefetchCount` (`float`) - The maximum number of unacknowledged messages copied over a shovel at any one time.
        Defaults to `1000`.
      * `reconnectDelay` (`float`) - The duration in seconds to reconnect to a broker after disconnected.
        Defaults to `1`.
      * `sourceExchange` (`str`) - The exchange from which to consume.
        Either this or source_queue must be specified but not both.
      * `sourceExchangeKey` (`str`) - The routing key when using source_exchange.
      * `sourceQueue` (`str`) - The queue from which to consume.
        Either this or source_exchange must be specified but not both.
      * `sourceUri` (`str`) - The amqp uri for the source.
    """
    name: pulumi.Output[str]
    """
    The shovel name.
    """
    vhost: pulumi.Output[str]
    """
    The vhost to create the resource in.
    """
    def __init__(__self__, resource_name, opts=None, info=None, name=None, vhost=None, __props__=None, __name__=None, __opts__=None):
        """
        The ``Shovel`` resource creates and manages a shovel.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_rabbitmq as rabbitmq

        test_v_host = rabbitmq.VHost("testVHost")
        test_exchange = rabbitmq.Exchange("testExchange",
            settings={
                "autoDelete": True,
                "durable": False,
                "type": "fanout",
            },
            vhost=test_v_host.name)
        test_queue = rabbitmq.Queue("testQueue",
            settings={
                "autoDelete": True,
                "durable": False,
            },
            vhost=test_v_host.name)
        shovel_test = rabbitmq.Shovel("shovelTest",
            info={
                "destinationQueue": test_queue.name,
                "destinationUri": "amqp:///test",
                "sourceExchange": test_exchange.name,
                "sourceExchangeKey": "test",
                "sourceUri": "amqp:///test",
            },
            vhost=test_v_host.name)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] info: The settings of the shovel. The structure is
               described below.
        :param pulumi.Input[str] name: The shovel name.
        :param pulumi.Input[str] vhost: The vhost to create the resource in.

        The **info** object supports the following:

          * `ackMode` (`pulumi.Input[str]`) - Determines how the shovel should acknowledge messages.
            Defaults to `on-confirm`.
          * `addForwardHeaders` (`pulumi.Input[bool]`) - Whether to amqp shovel headers.
            Defaults to `false`.
          * `deleteAfter` (`pulumi.Input[str]`) - Determines when (if ever) the shovel should delete itself .
            Defaults to `never`.
          * `destinationExchange` (`pulumi.Input[str]`) - The exchange to which messages should be published.
            Either this or destination_queue must be specified but not both.
          * `destinationExchangeKey` (`pulumi.Input[str]`) - The routing key when using destination_exchange.
          * `destinationQueue` (`pulumi.Input[str]`) - The queue to which messages should be published.
            Either this or destination_exchange must be specified but not both.
          * `destinationUri` (`pulumi.Input[str]`) - The amqp uri for the destination .
          * `prefetchCount` (`pulumi.Input[float]`) - The maximum number of unacknowledged messages copied over a shovel at any one time.
            Defaults to `1000`.
          * `reconnectDelay` (`pulumi.Input[float]`) - The duration in seconds to reconnect to a broker after disconnected.
            Defaults to `1`.
          * `sourceExchange` (`pulumi.Input[str]`) - The exchange from which to consume.
            Either this or source_queue must be specified but not both.
          * `sourceExchangeKey` (`pulumi.Input[str]`) - The routing key when using source_exchange.
          * `sourceQueue` (`pulumi.Input[str]`) - The queue from which to consume.
            Either this or source_exchange must be specified but not both.
          * `sourceUri` (`pulumi.Input[str]`) - The amqp uri for the source.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if info is None:
                raise TypeError("Missing required property 'info'")
            __props__['info'] = info
            __props__['name'] = name
            if vhost is None:
                raise TypeError("Missing required property 'vhost'")
            __props__['vhost'] = vhost
        super(Shovel, __self__).__init__(
            'rabbitmq:index/shovel:Shovel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, info=None, name=None, vhost=None):
        """
        Get an existing Shovel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] info: The settings of the shovel. The structure is
               described below.
        :param pulumi.Input[str] name: The shovel name.
        :param pulumi.Input[str] vhost: The vhost to create the resource in.

        The **info** object supports the following:

          * `ackMode` (`pulumi.Input[str]`) - Determines how the shovel should acknowledge messages.
            Defaults to `on-confirm`.
          * `addForwardHeaders` (`pulumi.Input[bool]`) - Whether to amqp shovel headers.
            Defaults to `false`.
          * `deleteAfter` (`pulumi.Input[str]`) - Determines when (if ever) the shovel should delete itself .
            Defaults to `never`.
          * `destinationExchange` (`pulumi.Input[str]`) - The exchange to which messages should be published.
            Either this or destination_queue must be specified but not both.
          * `destinationExchangeKey` (`pulumi.Input[str]`) - The routing key when using destination_exchange.
          * `destinationQueue` (`pulumi.Input[str]`) - The queue to which messages should be published.
            Either this or destination_exchange must be specified but not both.
          * `destinationUri` (`pulumi.Input[str]`) - The amqp uri for the destination .
          * `prefetchCount` (`pulumi.Input[float]`) - The maximum number of unacknowledged messages copied over a shovel at any one time.
            Defaults to `1000`.
          * `reconnectDelay` (`pulumi.Input[float]`) - The duration in seconds to reconnect to a broker after disconnected.
            Defaults to `1`.
          * `sourceExchange` (`pulumi.Input[str]`) - The exchange from which to consume.
            Either this or source_queue must be specified but not both.
          * `sourceExchangeKey` (`pulumi.Input[str]`) - The routing key when using source_exchange.
          * `sourceQueue` (`pulumi.Input[str]`) - The queue from which to consume.
            Either this or source_exchange must be specified but not both.
          * `sourceUri` (`pulumi.Input[str]`) - The amqp uri for the source.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["info"] = info
        __props__["name"] = name
        __props__["vhost"] = vhost
        return Shovel(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
