# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables

__all__ = ['Binding']


class Binding(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 arguments: Optional[pulumi.Input[Mapping[str, Any]]] = None,
                 arguments_json: Optional[pulumi.Input[str]] = None,
                 destination: Optional[pulumi.Input[str]] = None,
                 destination_type: Optional[pulumi.Input[str]] = None,
                 routing_key: Optional[pulumi.Input[str]] = None,
                 source: Optional[pulumi.Input[str]] = None,
                 vhost: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        The ``Binding`` resource creates and manages a binding relationship
        between a queue an exchange.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_rabbitmq as rabbitmq

        test_v_host = rabbitmq.VHost("testVHost")
        guest = rabbitmq.Permissions("guest",
            permissions=rabbitmq.PermissionsPermissionsArgs(
                configure=".*",
                read=".*",
                write=".*",
            ),
            user="guest",
            vhost=test_v_host.name)
        test_exchange = rabbitmq.Exchange("testExchange",
            settings=rabbitmq.ExchangeSettingsArgs(
                auto_delete=True,
                durable=False,
                type="fanout",
            ),
            vhost=guest.vhost)
        test_queue = rabbitmq.Queue("testQueue",
            settings=rabbitmq.QueueSettingsArgs(
                auto_delete=False,
                durable=True,
            ),
            vhost=guest.vhost)
        test_binding = rabbitmq.Binding("testBinding",
            destination=test_queue.name,
            destination_type="queue",
            routing_key="#",
            source=test_exchange.name,
            vhost=test_v_host.name)
        ```

        ## Import

        Bindings can be imported using the `id` which is composed of

         `vhost/source/destination/destination_type/properties_key`. E.g.

        ```sh
         $ pulumi import rabbitmq:index/binding:Binding test test/test/test/queue/%23
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] arguments: Additional key/value arguments for the binding.
        :param pulumi.Input[str] destination: The destination queue or exchange.
        :param pulumi.Input[str] destination_type: The type of destination (queue or exchange).
        :param pulumi.Input[str] routing_key: A routing key for the binding.
        :param pulumi.Input[str] source: The source exchange.
        :param pulumi.Input[str] vhost: The vhost to create the resource in.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['arguments'] = arguments
            __props__['arguments_json'] = arguments_json
            if destination is None and not opts.urn:
                raise TypeError("Missing required property 'destination'")
            __props__['destination'] = destination
            if destination_type is None and not opts.urn:
                raise TypeError("Missing required property 'destination_type'")
            __props__['destination_type'] = destination_type
            __props__['routing_key'] = routing_key
            if source is None and not opts.urn:
                raise TypeError("Missing required property 'source'")
            __props__['source'] = source
            if vhost is None and not opts.urn:
                raise TypeError("Missing required property 'vhost'")
            __props__['vhost'] = vhost
            __props__['properties_key'] = None
        super(Binding, __self__).__init__(
            'rabbitmq:index/binding:Binding',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            arguments: Optional[pulumi.Input[Mapping[str, Any]]] = None,
            arguments_json: Optional[pulumi.Input[str]] = None,
            destination: Optional[pulumi.Input[str]] = None,
            destination_type: Optional[pulumi.Input[str]] = None,
            properties_key: Optional[pulumi.Input[str]] = None,
            routing_key: Optional[pulumi.Input[str]] = None,
            source: Optional[pulumi.Input[str]] = None,
            vhost: Optional[pulumi.Input[str]] = None) -> 'Binding':
        """
        Get an existing Binding resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Mapping[str, Any]] arguments: Additional key/value arguments for the binding.
        :param pulumi.Input[str] destination: The destination queue or exchange.
        :param pulumi.Input[str] destination_type: The type of destination (queue or exchange).
        :param pulumi.Input[str] properties_key: A unique key to refer to the binding.
        :param pulumi.Input[str] routing_key: A routing key for the binding.
        :param pulumi.Input[str] source: The source exchange.
        :param pulumi.Input[str] vhost: The vhost to create the resource in.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["arguments"] = arguments
        __props__["arguments_json"] = arguments_json
        __props__["destination"] = destination
        __props__["destination_type"] = destination_type
        __props__["properties_key"] = properties_key
        __props__["routing_key"] = routing_key
        __props__["source"] = source
        __props__["vhost"] = vhost
        return Binding(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def arguments(self) -> pulumi.Output[Optional[Mapping[str, Any]]]:
        """
        Additional key/value arguments for the binding.
        """
        return pulumi.get(self, "arguments")

    @property
    @pulumi.getter(name="argumentsJson")
    def arguments_json(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "arguments_json")

    @property
    @pulumi.getter
    def destination(self) -> pulumi.Output[str]:
        """
        The destination queue or exchange.
        """
        return pulumi.get(self, "destination")

    @property
    @pulumi.getter(name="destinationType")
    def destination_type(self) -> pulumi.Output[str]:
        """
        The type of destination (queue or exchange).
        """
        return pulumi.get(self, "destination_type")

    @property
    @pulumi.getter(name="propertiesKey")
    def properties_key(self) -> pulumi.Output[str]:
        """
        A unique key to refer to the binding.
        """
        return pulumi.get(self, "properties_key")

    @property
    @pulumi.getter(name="routingKey")
    def routing_key(self) -> pulumi.Output[Optional[str]]:
        """
        A routing key for the binding.
        """
        return pulumi.get(self, "routing_key")

    @property
    @pulumi.getter
    def source(self) -> pulumi.Output[str]:
        """
        The source exchange.
        """
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def vhost(self) -> pulumi.Output[str]:
        """
        The vhost to create the resource in.
        """
        return pulumi.get(self, "vhost")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

