// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rabbitmq.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VHostState extends com.pulumi.resources.ResourceArgs {

    public static final VHostState Empty = new VHostState();

    /**
     * default queue type for new queues
     * 
     */
    @Import(name="defaultQueueType")
    private @Nullable Output<String> defaultQueueType;

    /**
     * @return default queue type for new queues
     * 
     */
    public Optional<Output<String>> defaultQueueType() {
        return Optional.ofNullable(this.defaultQueueType);
    }

    /**
     * A friendly description.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return A friendly description.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Maximum number of concurrent client connections to the vhost
     * 
     */
    @Import(name="maxConnections")
    private @Nullable Output<String> maxConnections;

    /**
     * @return Maximum number of concurrent client connections to the vhost
     * 
     */
    public Optional<Output<String>> maxConnections() {
        return Optional.ofNullable(this.maxConnections);
    }

    /**
     * Maximum number of queues that can be created on the vhost
     * 
     */
    @Import(name="maxQueues")
    private @Nullable Output<String> maxQueues;

    /**
     * @return Maximum number of queues that can be created on the vhost
     * 
     */
    public Optional<Output<String>> maxQueues() {
        return Optional.ofNullable(this.maxQueues);
    }

    /**
     * The name of the vhost.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the vhost.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="tracing")
    private @Nullable Output<Boolean> tracing;

    public Optional<Output<Boolean>> tracing() {
        return Optional.ofNullable(this.tracing);
    }

    private VHostState() {}

    private VHostState(VHostState $) {
        this.defaultQueueType = $.defaultQueueType;
        this.description = $.description;
        this.maxConnections = $.maxConnections;
        this.maxQueues = $.maxQueues;
        this.name = $.name;
        this.tracing = $.tracing;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VHostState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VHostState $;

        public Builder() {
            $ = new VHostState();
        }

        public Builder(VHostState defaults) {
            $ = new VHostState(Objects.requireNonNull(defaults));
        }

        /**
         * @param defaultQueueType default queue type for new queues
         * 
         * @return builder
         * 
         */
        public Builder defaultQueueType(@Nullable Output<String> defaultQueueType) {
            $.defaultQueueType = defaultQueueType;
            return this;
        }

        /**
         * @param defaultQueueType default queue type for new queues
         * 
         * @return builder
         * 
         */
        public Builder defaultQueueType(String defaultQueueType) {
            return defaultQueueType(Output.of(defaultQueueType));
        }

        /**
         * @param description A friendly description.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description A friendly description.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param maxConnections Maximum number of concurrent client connections to the vhost
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(@Nullable Output<String> maxConnections) {
            $.maxConnections = maxConnections;
            return this;
        }

        /**
         * @param maxConnections Maximum number of concurrent client connections to the vhost
         * 
         * @return builder
         * 
         */
        public Builder maxConnections(String maxConnections) {
            return maxConnections(Output.of(maxConnections));
        }

        /**
         * @param maxQueues Maximum number of queues that can be created on the vhost
         * 
         * @return builder
         * 
         */
        public Builder maxQueues(@Nullable Output<String> maxQueues) {
            $.maxQueues = maxQueues;
            return this;
        }

        /**
         * @param maxQueues Maximum number of queues that can be created on the vhost
         * 
         * @return builder
         * 
         */
        public Builder maxQueues(String maxQueues) {
            return maxQueues(Output.of(maxQueues));
        }

        /**
         * @param name The name of the vhost.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the vhost.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder tracing(@Nullable Output<Boolean> tracing) {
            $.tracing = tracing;
            return this;
        }

        public Builder tracing(Boolean tracing) {
            return tracing(Output.of(tracing));
        }

        public VHostState build() {
            return $;
        }
    }

}
