// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rabbitmq;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Object;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BindingArgs extends com.pulumi.resources.ResourceArgs {

    public static final BindingArgs Empty = new BindingArgs();

    /**
     * Additional key/value arguments for the binding.
     * 
     */
    @Import(name="arguments")
    private @Nullable Output<Map<String,Object>> arguments;

    /**
     * @return Additional key/value arguments for the binding.
     * 
     */
    public Optional<Output<Map<String,Object>>> arguments() {
        return Optional.ofNullable(this.arguments);
    }

    @Import(name="argumentsJson")
    private @Nullable Output<String> argumentsJson;

    public Optional<Output<String>> argumentsJson() {
        return Optional.ofNullable(this.argumentsJson);
    }

    /**
     * The destination queue or exchange.
     * 
     */
    @Import(name="destination", required=true)
    private Output<String> destination;

    /**
     * @return The destination queue or exchange.
     * 
     */
    public Output<String> destination() {
        return this.destination;
    }

    /**
     * The type of destination (queue or exchange).
     * 
     */
    @Import(name="destinationType", required=true)
    private Output<String> destinationType;

    /**
     * @return The type of destination (queue or exchange).
     * 
     */
    public Output<String> destinationType() {
        return this.destinationType;
    }

    /**
     * A routing key for the binding.
     * 
     */
    @Import(name="routingKey")
    private @Nullable Output<String> routingKey;

    /**
     * @return A routing key for the binding.
     * 
     */
    public Optional<Output<String>> routingKey() {
        return Optional.ofNullable(this.routingKey);
    }

    /**
     * The source exchange.
     * 
     */
    @Import(name="source", required=true)
    private Output<String> source;

    /**
     * @return The source exchange.
     * 
     */
    public Output<String> source() {
        return this.source;
    }

    /**
     * The vhost to create the resource in.
     * 
     */
    @Import(name="vhost", required=true)
    private Output<String> vhost;

    /**
     * @return The vhost to create the resource in.
     * 
     */
    public Output<String> vhost() {
        return this.vhost;
    }

    private BindingArgs() {}

    private BindingArgs(BindingArgs $) {
        this.arguments = $.arguments;
        this.argumentsJson = $.argumentsJson;
        this.destination = $.destination;
        this.destinationType = $.destinationType;
        this.routingKey = $.routingKey;
        this.source = $.source;
        this.vhost = $.vhost;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BindingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BindingArgs $;

        public Builder() {
            $ = new BindingArgs();
        }

        public Builder(BindingArgs defaults) {
            $ = new BindingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arguments Additional key/value arguments for the binding.
         * 
         * @return builder
         * 
         */
        public Builder arguments(@Nullable Output<Map<String,Object>> arguments) {
            $.arguments = arguments;
            return this;
        }

        /**
         * @param arguments Additional key/value arguments for the binding.
         * 
         * @return builder
         * 
         */
        public Builder arguments(Map<String,Object> arguments) {
            return arguments(Output.of(arguments));
        }

        public Builder argumentsJson(@Nullable Output<String> argumentsJson) {
            $.argumentsJson = argumentsJson;
            return this;
        }

        public Builder argumentsJson(String argumentsJson) {
            return argumentsJson(Output.of(argumentsJson));
        }

        /**
         * @param destination The destination queue or exchange.
         * 
         * @return builder
         * 
         */
        public Builder destination(Output<String> destination) {
            $.destination = destination;
            return this;
        }

        /**
         * @param destination The destination queue or exchange.
         * 
         * @return builder
         * 
         */
        public Builder destination(String destination) {
            return destination(Output.of(destination));
        }

        /**
         * @param destinationType The type of destination (queue or exchange).
         * 
         * @return builder
         * 
         */
        public Builder destinationType(Output<String> destinationType) {
            $.destinationType = destinationType;
            return this;
        }

        /**
         * @param destinationType The type of destination (queue or exchange).
         * 
         * @return builder
         * 
         */
        public Builder destinationType(String destinationType) {
            return destinationType(Output.of(destinationType));
        }

        /**
         * @param routingKey A routing key for the binding.
         * 
         * @return builder
         * 
         */
        public Builder routingKey(@Nullable Output<String> routingKey) {
            $.routingKey = routingKey;
            return this;
        }

        /**
         * @param routingKey A routing key for the binding.
         * 
         * @return builder
         * 
         */
        public Builder routingKey(String routingKey) {
            return routingKey(Output.of(routingKey));
        }

        /**
         * @param source The source exchange.
         * 
         * @return builder
         * 
         */
        public Builder source(Output<String> source) {
            $.source = source;
            return this;
        }

        /**
         * @param source The source exchange.
         * 
         * @return builder
         * 
         */
        public Builder source(String source) {
            return source(Output.of(source));
        }

        /**
         * @param vhost The vhost to create the resource in.
         * 
         * @return builder
         * 
         */
        public Builder vhost(Output<String> vhost) {
            $.vhost = vhost;
            return this;
        }

        /**
         * @param vhost The vhost to create the resource in.
         * 
         * @return builder
         * 
         */
        public Builder vhost(String vhost) {
            return vhost(Output.of(vhost));
        }

        public BindingArgs build() {
            $.destination = Objects.requireNonNull($.destination, "expected parameter 'destination' to be non-null");
            $.destinationType = Objects.requireNonNull($.destinationType, "expected parameter 'destinationType' to be non-null");
            $.source = Objects.requireNonNull($.source, "expected parameter 'source' to be non-null");
            $.vhost = Objects.requireNonNull($.vhost, "expected parameter 'vhost' to be non-null");
            return $;
        }
    }

}
