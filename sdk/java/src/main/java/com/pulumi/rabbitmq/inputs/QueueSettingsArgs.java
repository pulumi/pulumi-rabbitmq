// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rabbitmq.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class QueueSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final QueueSettingsArgs Empty = new QueueSettingsArgs();

    /**
     * Additional key/value settings for the queue.
     * All values will be sent to RabbitMQ as a string. If you require non-string
     * values, use `argumentsJson`.
     * 
     */
    @Import(name="arguments")
    private @Nullable Output<Map<String,String>> arguments;

    /**
     * @return Additional key/value settings for the queue.
     * All values will be sent to RabbitMQ as a string. If you require non-string
     * values, use `argumentsJson`.
     * 
     */
    public Optional<Output<Map<String,String>>> arguments() {
        return Optional.ofNullable(this.arguments);
    }

    /**
     * A nested JSON string which contains additional
     * settings for the queue. This is useful for when the arguments contain
     * non-string values.
     * 
     */
    @Import(name="argumentsJson")
    private @Nullable Output<String> argumentsJson;

    /**
     * @return A nested JSON string which contains additional
     * settings for the queue. This is useful for when the arguments contain
     * non-string values.
     * 
     */
    public Optional<Output<String>> argumentsJson() {
        return Optional.ofNullable(this.argumentsJson);
    }

    /**
     * Whether the queue will self-delete when all
     * consumers have unsubscribed.
     * 
     */
    @Import(name="autoDelete")
    private @Nullable Output<Boolean> autoDelete;

    /**
     * @return Whether the queue will self-delete when all
     * consumers have unsubscribed.
     * 
     */
    public Optional<Output<Boolean>> autoDelete() {
        return Optional.ofNullable(this.autoDelete);
    }

    /**
     * Whether the queue survives server restarts.
     * Defaults to `false`.
     * 
     */
    @Import(name="durable")
    private @Nullable Output<Boolean> durable;

    /**
     * @return Whether the queue survives server restarts.
     * Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> durable() {
        return Optional.ofNullable(this.durable);
    }

    private QueueSettingsArgs() {}

    private QueueSettingsArgs(QueueSettingsArgs $) {
        this.arguments = $.arguments;
        this.argumentsJson = $.argumentsJson;
        this.autoDelete = $.autoDelete;
        this.durable = $.durable;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(QueueSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private QueueSettingsArgs $;

        public Builder() {
            $ = new QueueSettingsArgs();
        }

        public Builder(QueueSettingsArgs defaults) {
            $ = new QueueSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arguments Additional key/value settings for the queue.
         * All values will be sent to RabbitMQ as a string. If you require non-string
         * values, use `argumentsJson`.
         * 
         * @return builder
         * 
         */
        public Builder arguments(@Nullable Output<Map<String,String>> arguments) {
            $.arguments = arguments;
            return this;
        }

        /**
         * @param arguments Additional key/value settings for the queue.
         * All values will be sent to RabbitMQ as a string. If you require non-string
         * values, use `argumentsJson`.
         * 
         * @return builder
         * 
         */
        public Builder arguments(Map<String,String> arguments) {
            return arguments(Output.of(arguments));
        }

        /**
         * @param argumentsJson A nested JSON string which contains additional
         * settings for the queue. This is useful for when the arguments contain
         * non-string values.
         * 
         * @return builder
         * 
         */
        public Builder argumentsJson(@Nullable Output<String> argumentsJson) {
            $.argumentsJson = argumentsJson;
            return this;
        }

        /**
         * @param argumentsJson A nested JSON string which contains additional
         * settings for the queue. This is useful for when the arguments contain
         * non-string values.
         * 
         * @return builder
         * 
         */
        public Builder argumentsJson(String argumentsJson) {
            return argumentsJson(Output.of(argumentsJson));
        }

        /**
         * @param autoDelete Whether the queue will self-delete when all
         * consumers have unsubscribed.
         * 
         * @return builder
         * 
         */
        public Builder autoDelete(@Nullable Output<Boolean> autoDelete) {
            $.autoDelete = autoDelete;
            return this;
        }

        /**
         * @param autoDelete Whether the queue will self-delete when all
         * consumers have unsubscribed.
         * 
         * @return builder
         * 
         */
        public Builder autoDelete(Boolean autoDelete) {
            return autoDelete(Output.of(autoDelete));
        }

        /**
         * @param durable Whether the queue survives server restarts.
         * Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder durable(@Nullable Output<Boolean> durable) {
            $.durable = durable;
            return this;
        }

        /**
         * @param durable Whether the queue survives server restarts.
         * Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder durable(Boolean durable) {
            return durable(Output.of(durable));
        }

        public QueueSettingsArgs build() {
            return $;
        }
    }

}
