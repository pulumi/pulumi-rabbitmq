// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rabbitmq.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ExchangeSettingsArgs extends com.pulumi.resources.ResourceArgs {

    public static final ExchangeSettingsArgs Empty = new ExchangeSettingsArgs();

    /**
     * Additional key/value settings for the exchange.
     * 
     */
    @Import(name="arguments")
    private @Nullable Output<Map<String,String>> arguments;

    /**
     * @return Additional key/value settings for the exchange.
     * 
     */
    public Optional<Output<Map<String,String>>> arguments() {
        return Optional.ofNullable(this.arguments);
    }

    /**
     * Whether the exchange will self-delete when all
     * queues have finished using it.
     * 
     */
    @Import(name="autoDelete")
    private @Nullable Output<Boolean> autoDelete;

    /**
     * @return Whether the exchange will self-delete when all
     * queues have finished using it.
     * 
     */
    public Optional<Output<Boolean>> autoDelete() {
        return Optional.ofNullable(this.autoDelete);
    }

    /**
     * Whether the exchange survives server restarts.
     * Defaults to `false`.
     * 
     */
    @Import(name="durable")
    private @Nullable Output<Boolean> durable;

    /**
     * @return Whether the exchange survives server restarts.
     * Defaults to `false`.
     * 
     */
    public Optional<Output<Boolean>> durable() {
        return Optional.ofNullable(this.durable);
    }

    /**
     * The type of exchange.
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return The type of exchange.
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private ExchangeSettingsArgs() {}

    private ExchangeSettingsArgs(ExchangeSettingsArgs $) {
        this.arguments = $.arguments;
        this.autoDelete = $.autoDelete;
        this.durable = $.durable;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ExchangeSettingsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ExchangeSettingsArgs $;

        public Builder() {
            $ = new ExchangeSettingsArgs();
        }

        public Builder(ExchangeSettingsArgs defaults) {
            $ = new ExchangeSettingsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param arguments Additional key/value settings for the exchange.
         * 
         * @return builder
         * 
         */
        public Builder arguments(@Nullable Output<Map<String,String>> arguments) {
            $.arguments = arguments;
            return this;
        }

        /**
         * @param arguments Additional key/value settings for the exchange.
         * 
         * @return builder
         * 
         */
        public Builder arguments(Map<String,String> arguments) {
            return arguments(Output.of(arguments));
        }

        /**
         * @param autoDelete Whether the exchange will self-delete when all
         * queues have finished using it.
         * 
         * @return builder
         * 
         */
        public Builder autoDelete(@Nullable Output<Boolean> autoDelete) {
            $.autoDelete = autoDelete;
            return this;
        }

        /**
         * @param autoDelete Whether the exchange will self-delete when all
         * queues have finished using it.
         * 
         * @return builder
         * 
         */
        public Builder autoDelete(Boolean autoDelete) {
            return autoDelete(Output.of(autoDelete));
        }

        /**
         * @param durable Whether the exchange survives server restarts.
         * Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder durable(@Nullable Output<Boolean> durable) {
            $.durable = durable;
            return this;
        }

        /**
         * @param durable Whether the exchange survives server restarts.
         * Defaults to `false`.
         * 
         * @return builder
         * 
         */
        public Builder durable(Boolean durable) {
            return durable(Output.of(durable));
        }

        /**
         * @param type The type of exchange.
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of exchange.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public ExchangeSettingsArgs build() {
            if ($.type == null) {
                throw new MissingRequiredPropertyException("ExchangeSettingsArgs", "type");
            }
            return $;
        }
    }

}
