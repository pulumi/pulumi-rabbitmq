// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rabbitmq;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.rabbitmq.Utilities;
import com.pulumi.rabbitmq.VHostArgs;
import com.pulumi.rabbitmq.inputs.VHostState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * The ``rabbitmq.VHost`` resource creates and manages a vhost.
 * 
 * ## Example Usage
 * 
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rabbitmq.VHost;
 * import com.pulumi.rabbitmq.VHostArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var myVhost = new VHost("myVhost", VHostArgs.builder()
 *             .name("my_vhost")
 *             .description("My Vhost")
 *             .defaultQueueType("quorum")
 *             .maxConnections("200")
 *             .maxQueues("100")
 *             .tracing(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * 
 * ## Import
 * 
 * Vhosts can be imported using the `name`, e.g.
 * 
 * ```sh
 * $ pulumi import rabbitmq:index/vHost:VHost my_vhost my_vhost
 * ```
 * 
 */
@ResourceType(type="rabbitmq:index/vHost:VHost")
public class VHost extends com.pulumi.resources.CustomResource {
    /**
     * default queue type for new queues
     * 
     */
    @Export(name="defaultQueueType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> defaultQueueType;

    /**
     * @return default queue type for new queues
     * 
     */
    public Output<Optional<String>> defaultQueueType() {
        return Codegen.optional(this.defaultQueueType);
    }
    /**
     * A friendly description.
     * 
     */
    @Export(name="description", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> description;

    /**
     * @return A friendly description.
     * 
     */
    public Output<Optional<String>> description() {
        return Codegen.optional(this.description);
    }
    /**
     * Maximum number of concurrent client connections to the vhost
     * 
     */
    @Export(name="maxConnections", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> maxConnections;

    /**
     * @return Maximum number of concurrent client connections to the vhost
     * 
     */
    public Output<Optional<String>> maxConnections() {
        return Codegen.optional(this.maxConnections);
    }
    /**
     * Maximum number of queues that can be created on the vhost
     * 
     */
    @Export(name="maxQueues", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> maxQueues;

    /**
     * @return Maximum number of queues that can be created on the vhost
     * 
     */
    public Output<Optional<String>> maxQueues() {
        return Codegen.optional(this.maxQueues);
    }
    /**
     * The name of the vhost.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the vhost.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    @Export(name="tracing", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tracing;

    public Output<Optional<Boolean>> tracing() {
        return Codegen.optional(this.tracing);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public VHost(java.lang.String name) {
        this(name, VHostArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public VHost(java.lang.String name, @Nullable VHostArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public VHost(java.lang.String name, @Nullable VHostArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rabbitmq:index/vHost:VHost", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private VHost(java.lang.String name, Output<java.lang.String> id, @Nullable VHostState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rabbitmq:index/vHost:VHost", name, state, makeResourceOptions(options, id), false);
    }

    private static VHostArgs makeArgs(@Nullable VHostArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? VHostArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static VHost get(java.lang.String name, Output<java.lang.String> id, @Nullable VHostState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new VHost(name, id, state, options);
    }
}
