// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rabbitmq;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.rabbitmq.inputs.PermissionsPermissionsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PermissionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final PermissionsArgs Empty = new PermissionsArgs();

    /**
     * The settings of the permissions. The structure is
     * described below.
     * 
     */
    @Import(name="permissions", required=true)
    private Output<PermissionsPermissionsArgs> permissions;

    /**
     * @return The settings of the permissions. The structure is
     * described below.
     * 
     */
    public Output<PermissionsPermissionsArgs> permissions() {
        return this.permissions;
    }

    /**
     * The user to apply the permissions to.
     * 
     */
    @Import(name="user", required=true)
    private Output<String> user;

    /**
     * @return The user to apply the permissions to.
     * 
     */
    public Output<String> user() {
        return this.user;
    }

    /**
     * The vhost to create the resource in.
     * 
     */
    @Import(name="vhost")
    private @Nullable Output<String> vhost;

    /**
     * @return The vhost to create the resource in.
     * 
     */
    public Optional<Output<String>> vhost() {
        return Optional.ofNullable(this.vhost);
    }

    private PermissionsArgs() {}

    private PermissionsArgs(PermissionsArgs $) {
        this.permissions = $.permissions;
        this.user = $.user;
        this.vhost = $.vhost;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PermissionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PermissionsArgs $;

        public Builder() {
            $ = new PermissionsArgs();
        }

        public Builder(PermissionsArgs defaults) {
            $ = new PermissionsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param permissions The settings of the permissions. The structure is
         * described below.
         * 
         * @return builder
         * 
         */
        public Builder permissions(Output<PermissionsPermissionsArgs> permissions) {
            $.permissions = permissions;
            return this;
        }

        /**
         * @param permissions The settings of the permissions. The structure is
         * described below.
         * 
         * @return builder
         * 
         */
        public Builder permissions(PermissionsPermissionsArgs permissions) {
            return permissions(Output.of(permissions));
        }

        /**
         * @param user The user to apply the permissions to.
         * 
         * @return builder
         * 
         */
        public Builder user(Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The user to apply the permissions to.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        /**
         * @param vhost The vhost to create the resource in.
         * 
         * @return builder
         * 
         */
        public Builder vhost(@Nullable Output<String> vhost) {
            $.vhost = vhost;
            return this;
        }

        /**
         * @param vhost The vhost to create the resource in.
         * 
         * @return builder
         * 
         */
        public Builder vhost(String vhost) {
            return vhost(Output.of(vhost));
        }

        public PermissionsArgs build() {
            $.permissions = Objects.requireNonNull($.permissions, "expected parameter 'permissions' to be non-null");
            $.user = Objects.requireNonNull($.user, "expected parameter 'user' to be non-null");
            return $;
        }
    }

}
