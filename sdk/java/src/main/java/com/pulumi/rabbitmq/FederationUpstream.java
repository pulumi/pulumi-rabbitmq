// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.rabbitmq;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.rabbitmq.FederationUpstreamArgs;
import com.pulumi.rabbitmq.Utilities;
import com.pulumi.rabbitmq.inputs.FederationUpstreamState;
import com.pulumi.rabbitmq.outputs.FederationUpstreamDefinition;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * The `rabbitmq.FederationUpstream` resource creates and manages a federation upstream parameter.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.rabbitmq.VHost;
 * import com.pulumi.rabbitmq.VHostArgs;
 * import com.pulumi.rabbitmq.Permissions;
 * import com.pulumi.rabbitmq.PermissionsArgs;
 * import com.pulumi.rabbitmq.inputs.PermissionsPermissionsArgs;
 * import com.pulumi.rabbitmq.Exchange;
 * import com.pulumi.rabbitmq.ExchangeArgs;
 * import com.pulumi.rabbitmq.inputs.ExchangeSettingsArgs;
 * import com.pulumi.rabbitmq.FederationUpstream;
 * import com.pulumi.rabbitmq.FederationUpstreamArgs;
 * import com.pulumi.rabbitmq.inputs.FederationUpstreamDefinitionArgs;
 * import com.pulumi.rabbitmq.Policy;
 * import com.pulumi.rabbitmq.PolicyArgs;
 * import com.pulumi.rabbitmq.inputs.PolicyPolicyArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App }{{@code
 *     public static void main(String[] args) }{{@code
 *         Pulumi.run(App::stack);
 *     }}{@code
 * 
 *     public static void stack(Context ctx) }{{@code
 *         var test = new VHost("test", VHostArgs.builder()
 *             .name("test")
 *             .build());
 * 
 *         var guest = new Permissions("guest", PermissionsArgs.builder()
 *             .user("guest")
 *             .vhost(test.name())
 *             .permissions(PermissionsPermissionsArgs.builder()
 *                 .configure(".*")
 *                 .write(".*")
 *                 .read(".*")
 *                 .build())
 *             .build());
 * 
 *         // downstream exchange
 *         var foo = new Exchange("foo", ExchangeArgs.builder()
 *             .name("foo")
 *             .vhost(guest.vhost())
 *             .settings(ExchangeSettingsArgs.builder()
 *                 .type("topic")
 *                 .durable("true")
 *                 .build())
 *             .build());
 * 
 *         // upstream broker
 *         var fooFederationUpstream = new FederationUpstream("fooFederationUpstream", FederationUpstreamArgs.builder()
 *             .name("foo")
 *             .vhost(guest.vhost())
 *             .definition(FederationUpstreamDefinitionArgs.builder()
 *                 .uri("amqp://guest:guest}{@literal @}{@code upstream-server-name:5672/%2f")
 *                 .prefetchCount(1000)
 *                 .reconnectDelay(5)
 *                 .ackMode("on-confirm")
 *                 .trustUserId(false)
 *                 .maxHops(1)
 *                 .build())
 *             .build());
 * 
 *         var fooPolicy = new Policy("fooPolicy", PolicyArgs.builder()
 *             .name("foo")
 *             .vhost(guest.vhost())
 *             .policy(PolicyPolicyArgs.builder()
 *                 .pattern(foo.name().applyValue(name -> String.format("(^%s$)", name)))
 *                 .priority(1)
 *                 .applyTo("exchanges")
 *                 .definition(Map.of("federation-upstream", fooFederationUpstream.name()))
 *                 .build())
 *             .build());
 * 
 *     }}{@code
 * }}{@code
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * A Federation upstream can be imported using the resource `id` which is composed of `name{@literal @}vhost`, e.g.
 * 
 * ```sh
 * $ pulumi import rabbitmq:index/federationUpstream:FederationUpstream foo foo{@literal @}test
 * ```
 * 
 */
@ResourceType(type="rabbitmq:index/federationUpstream:FederationUpstream")
public class FederationUpstream extends com.pulumi.resources.CustomResource {
    /**
     * Set to `federation-upstream` by the underlying RabbitMQ provider. You do not set this attribute but will see it in state and plan output.
     * 
     */
    @Export(name="component", refs={String.class}, tree="[0]")
    private Output<String> component;

    /**
     * @return Set to `federation-upstream` by the underlying RabbitMQ provider. You do not set this attribute but will see it in state and plan output.
     * 
     */
    public Output<String> component() {
        return this.component;
    }
    /**
     * The configuration of the federation upstream. The structure is described below.
     * 
     */
    @Export(name="definition", refs={FederationUpstreamDefinition.class}, tree="[0]")
    private Output<FederationUpstreamDefinition> definition;

    /**
     * @return The configuration of the federation upstream. The structure is described below.
     * 
     */
    public Output<FederationUpstreamDefinition> definition() {
        return this.definition;
    }
    /**
     * The name of the federation upstream.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return The name of the federation upstream.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The vhost to create the resource in.
     * 
     */
    @Export(name="vhost", refs={String.class}, tree="[0]")
    private Output<String> vhost;

    /**
     * @return The vhost to create the resource in.
     * 
     */
    public Output<String> vhost() {
        return this.vhost;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FederationUpstream(java.lang.String name) {
        this(name, FederationUpstreamArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FederationUpstream(java.lang.String name, FederationUpstreamArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FederationUpstream(java.lang.String name, FederationUpstreamArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rabbitmq:index/federationUpstream:FederationUpstream", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private FederationUpstream(java.lang.String name, Output<java.lang.String> id, @Nullable FederationUpstreamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("rabbitmq:index/federationUpstream:FederationUpstream", name, state, makeResourceOptions(options, id), false);
    }

    private static FederationUpstreamArgs makeArgs(FederationUpstreamArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? FederationUpstreamArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FederationUpstream get(java.lang.String name, Output<java.lang.String> id, @Nullable FederationUpstreamState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FederationUpstream(name, id, state, options);
    }
}
