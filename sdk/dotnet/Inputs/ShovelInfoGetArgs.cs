// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.RabbitMQ.Inputs
{

    public sealed class ShovelInfoGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Determines how the shovel should acknowledge messages. Possible values are: `on-confirm`, `on-publish` and `no-ack`.
        /// Defaults to `on-confirm`.
        /// </summary>
        [Input("ackMode")]
        public Input<string>? AckMode { get; set; }

        /// <summary>
        /// Whether to add `x-shovelled` headers to shovelled messages.
        /// </summary>
        [Input("addForwardHeaders")]
        public Input<bool>? AddForwardHeaders { get; set; }

        /// <summary>
        /// Determines when (if ever) the shovel should delete itself. Possible values are: `Never`, `queue-length` or an integer.
        /// </summary>
        [Input("deleteAfter")]
        public Input<string>? DeleteAfter { get; set; }

        /// <summary>
        /// Whether to add `x-shovelled` headers to shovelled messages.
        /// </summary>
        [Input("destinationAddForwardHeaders")]
        public Input<bool>? DestinationAddForwardHeaders { get; set; }

        [Input("destinationAddTimestampHeader")]
        public Input<bool>? DestinationAddTimestampHeader { get; set; }

        /// <summary>
        /// The AMQP 1.0 destination link address.
        /// </summary>
        [Input("destinationAddress")]
        public Input<string>? DestinationAddress { get; set; }

        [Input("destinationApplicationProperties")]
        private InputMap<string>? _destinationApplicationProperties;

        /// <summary>
        /// Application properties to set when shovelling messages.
        /// </summary>
        public InputMap<string> DestinationApplicationProperties
        {
            get => _destinationApplicationProperties ?? (_destinationApplicationProperties = new InputMap<string>());
            set => _destinationApplicationProperties = value;
        }

        /// <summary>
        /// The exchange to which messages should be published.
        /// Either this or `DestinationQueue` must be specified but not both.
        /// </summary>
        [Input("destinationExchange")]
        public Input<string>? DestinationExchange { get; set; }

        /// <summary>
        /// The routing key when using `DestinationExchange`.
        /// </summary>
        [Input("destinationExchangeKey")]
        public Input<string>? DestinationExchangeKey { get; set; }

        [Input("destinationProperties")]
        private InputMap<string>? _destinationProperties;

        /// <summary>
        /// Properties to overwrite when shovelling messages.
        /// 
        /// For more details regarding dynamic shovel parameters please have a look at the official reference documentaion at [RabbitMQ: Configuring Dynamic Shovels](https://www.rabbitmq.com/shovel-dynamic.html).
        /// </summary>
        public InputMap<string> DestinationProperties
        {
            get => _destinationProperties ?? (_destinationProperties = new InputMap<string>());
            set => _destinationProperties = value;
        }

        /// <summary>
        /// The protocol (`Amqp091` or `Amqp10`) to use when connecting to the destination.
        /// Defaults to `Amqp091`.
        /// </summary>
        [Input("destinationProtocol")]
        public Input<string>? DestinationProtocol { get; set; }

        [Input("destinationPublishProperties")]
        private InputMap<string>? _destinationPublishProperties;

        /// <summary>
        /// A map of properties to overwrite when shovelling messages.
        /// </summary>
        public InputMap<string> DestinationPublishProperties
        {
            get => _destinationPublishProperties ?? (_destinationPublishProperties = new InputMap<string>());
            set => _destinationPublishProperties = value;
        }

        /// <summary>
        /// The queue to which messages should be published.
        /// Either this or `DestinationExchange` must be specified but not both.
        /// </summary>
        [Input("destinationQueue")]
        public Input<string>? DestinationQueue { get; set; }

        [Input("destinationQueueArguments")]
        private InputMap<string>? _destinationQueueArguments;
        public InputMap<string> DestinationQueueArguments
        {
            get => _destinationQueueArguments ?? (_destinationQueueArguments = new InputMap<string>());
            set => _destinationQueueArguments = value;
        }

        /// <summary>
        /// The amqp uri for the destination .
        /// </summary>
        [Input("destinationUri", required: true)]
        public Input<string> DestinationUri { get; set; } = null!;

        /// <summary>
        /// The maximum number of unacknowledged messages copied over a shovel at any one time.
        /// </summary>
        [Input("prefetchCount")]
        public Input<int>? PrefetchCount { get; set; }

        /// <summary>
        /// The duration in seconds to reconnect to a broker after disconnected.
        /// Defaults to `1`.
        /// </summary>
        [Input("reconnectDelay")]
        public Input<int>? ReconnectDelay { get; set; }

        /// <summary>
        /// The AMQP 1.0 source link address.
        /// </summary>
        [Input("sourceAddress")]
        public Input<string>? SourceAddress { get; set; }

        /// <summary>
        /// Determines when (if ever) the shovel should delete itself. Possible values are: `Never`, `queue-length` or an integer.
        /// </summary>
        [Input("sourceDeleteAfter")]
        public Input<string>? SourceDeleteAfter { get; set; }

        /// <summary>
        /// The exchange from which to consume.
        /// Either this or `SourceQueue` must be specified but not both.
        /// </summary>
        [Input("sourceExchange")]
        public Input<string>? SourceExchange { get; set; }

        /// <summary>
        /// The routing key when using `SourceExchange`.
        /// </summary>
        [Input("sourceExchangeKey")]
        public Input<string>? SourceExchangeKey { get; set; }

        /// <summary>
        /// The maximum number of unacknowledged messages copied over a shovel at any one time.
        /// </summary>
        [Input("sourcePrefetchCount")]
        public Input<int>? SourcePrefetchCount { get; set; }

        /// <summary>
        /// The protocol (`Amqp091` or `Amqp10`) to use when connecting to the source.
        /// Defaults to `Amqp091`.
        /// </summary>
        [Input("sourceProtocol")]
        public Input<string>? SourceProtocol { get; set; }

        /// <summary>
        /// The queue from which to consume.
        /// Either this or `SourceExchange` must be specified but not both.
        /// </summary>
        [Input("sourceQueue")]
        public Input<string>? SourceQueue { get; set; }

        /// <summary>
        /// The amqp uri for the source.
        /// </summary>
        [Input("sourceUri", required: true)]
        public Input<string> SourceUri { get; set; } = null!;

        public ShovelInfoGetArgs()
        {
        }
        public static new ShovelInfoGetArgs Empty => new ShovelInfoGetArgs();
    }
}
