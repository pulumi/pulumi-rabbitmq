// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.RabbitMQ
{
    /// <summary>
    /// The ``rabbitmq..Policy`` resource creates and manages policies for exchanges
    /// and queues.
    /// 
    /// 
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-rabbitmq/blob/master/website/docs/r/policy.html.markdown.
    /// </summary>
    public partial class Policy : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The settings of the policy. The structure is
        /// described below.
        /// </summary>
        [Output("policy")]
        public Output<Outputs.PolicyPolicy> PolicyBlock { get; private set; } = null!;

        /// <summary>
        /// The vhost to create the resource in.
        /// </summary>
        [Output("vhost")]
        public Output<string> Vhost { get; private set; } = null!;


        /// <summary>
        /// Create a Policy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Policy(string name, PolicyArgs args, CustomResourceOptions? options = null)
            : base("rabbitmq:index/policy:Policy", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Policy(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
            : base("rabbitmq:index/policy:Policy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Policy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Policy Get(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new Policy(name, id, state, options);
        }
    }

    public sealed class PolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The settings of the policy. The structure is
        /// described below.
        /// </summary>
        [Input("policy", required: true)]
        public Input<Inputs.PolicyPolicyArgs> PolicyBlock { get; set; } = null!;

        /// <summary>
        /// The vhost to create the resource in.
        /// </summary>
        [Input("vhost", required: true)]
        public Input<string> Vhost { get; set; } = null!;

        public PolicyArgs()
        {
        }
    }

    public sealed class PolicyState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The settings of the policy. The structure is
        /// described below.
        /// </summary>
        [Input("policy")]
        public Input<Inputs.PolicyPolicyGetArgs>? PolicyBlock { get; set; }

        /// <summary>
        /// The vhost to create the resource in.
        /// </summary>
        [Input("vhost")]
        public Input<string>? Vhost { get; set; }

        public PolicyState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class PolicyPolicyArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Can either be "exchanges", "queues", or "all".
        /// </summary>
        [Input("applyTo", required: true)]
        public Input<string> ApplyTo { get; set; } = null!;

        [Input("definition", required: true)]
        private InputMap<object>? _definition;

        /// <summary>
        /// Key/value pairs of the policy definition. See the
        /// RabbitMQ documentation for definition references and examples.
        /// </summary>
        public InputMap<object> Definition
        {
            get => _definition ?? (_definition = new InputMap<object>());
            set => _definition = value;
        }

        /// <summary>
        /// A pattern to match an exchange or queue name.
        /// </summary>
        [Input("pattern", required: true)]
        public Input<string> Pattern { get; set; } = null!;

        /// <summary>
        /// The policy with the greater priority is applied first.
        /// </summary>
        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        public PolicyPolicyArgs()
        {
        }
    }

    public sealed class PolicyPolicyGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Can either be "exchanges", "queues", or "all".
        /// </summary>
        [Input("applyTo", required: true)]
        public Input<string> ApplyTo { get; set; } = null!;

        [Input("definition", required: true)]
        private InputMap<object>? _definition;

        /// <summary>
        /// Key/value pairs of the policy definition. See the
        /// RabbitMQ documentation for definition references and examples.
        /// </summary>
        public InputMap<object> Definition
        {
            get => _definition ?? (_definition = new InputMap<object>());
            set => _definition = value;
        }

        /// <summary>
        /// A pattern to match an exchange or queue name.
        /// </summary>
        [Input("pattern", required: true)]
        public Input<string> Pattern { get; set; } = null!;

        /// <summary>
        /// The policy with the greater priority is applied first.
        /// </summary>
        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        public PolicyPolicyGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class PolicyPolicy
    {
        /// <summary>
        /// Can either be "exchanges", "queues", or "all".
        /// </summary>
        public readonly string ApplyTo;
        /// <summary>
        /// Key/value pairs of the policy definition. See the
        /// RabbitMQ documentation for definition references and examples.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Definition;
        /// <summary>
        /// A pattern to match an exchange or queue name.
        /// </summary>
        public readonly string Pattern;
        /// <summary>
        /// The policy with the greater priority is applied first.
        /// </summary>
        public readonly int Priority;

        [OutputConstructor]
        private PolicyPolicy(
            string applyTo,
            ImmutableDictionary<string, object> definition,
            string pattern,
            int priority)
        {
            ApplyTo = applyTo;
            Definition = definition;
            Pattern = pattern;
            Priority = priority;
        }
    }
    }
}
