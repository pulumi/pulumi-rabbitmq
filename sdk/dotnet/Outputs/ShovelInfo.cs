// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.RabbitMQ.Outputs
{

    [OutputType]
    public sealed class ShovelInfo
    {
        /// <summary>
        /// Determines how the shovel should acknowledge messages. Possible values are: `on-confirm`, `on-publish` and `no-ack`.
        /// Defaults to `on-confirm`.
        /// </summary>
        public readonly string? AckMode;
        /// <summary>
        /// Whether to add `x-shovelled` headers to shovelled messages.
        /// </summary>
        public readonly bool? AddForwardHeaders;
        /// <summary>
        /// Determines when (if ever) the shovel should delete itself. Possible values are: `never`, `queue-length` or an integer.
        /// </summary>
        public readonly string? DeleteAfter;
        /// <summary>
        /// Whether to add `x-shovelled` headers to shovelled messages.
        /// </summary>
        public readonly bool? DestinationAddForwardHeaders;
        public readonly bool? DestinationAddTimestampHeader;
        /// <summary>
        /// The AMQP 1.0 destination link address.
        /// </summary>
        public readonly string? DestinationAddress;
        /// <summary>
        /// Application properties to set when shovelling messages.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? DestinationApplicationProperties;
        /// <summary>
        /// The exchange to which messages should be published.
        /// Either this or `destination_queue` must be specified but not both.
        /// </summary>
        public readonly string? DestinationExchange;
        /// <summary>
        /// The routing key when using `destination_exchange`.
        /// </summary>
        public readonly string? DestinationExchangeKey;
        /// <summary>
        /// Properties to overwrite when shovelling messages.
        /// 
        /// For more details regarding dynamic shovel parameters please have a look at the official reference documentaion at [RabbitMQ: Configuring Dynamic Shovels](https://www.rabbitmq.com/shovel-dynamic.html).
        /// </summary>
        public readonly ImmutableDictionary<string, string>? DestinationProperties;
        /// <summary>
        /// The protocol (`amqp091` or `amqp10`) to use when connecting to the destination.
        /// Defaults to `amqp091`.
        /// </summary>
        public readonly string? DestinationProtocol;
        /// <summary>
        /// A map of properties to overwrite when shovelling messages.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? DestinationPublishProperties;
        /// <summary>
        /// The queue to which messages should be published.
        /// Either this or `destination_exchange` must be specified but not both.
        /// </summary>
        public readonly string? DestinationQueue;
        public readonly ImmutableDictionary<string, string>? DestinationQueueArguments;
        /// <summary>
        /// The amqp uri for the destination .
        /// </summary>
        public readonly string DestinationUri;
        /// <summary>
        /// The maximum number of unacknowledged messages copied over a shovel at any one time.
        /// </summary>
        public readonly int? PrefetchCount;
        /// <summary>
        /// The duration in seconds to reconnect to a broker after disconnected.
        /// Defaults to `1`.
        /// </summary>
        public readonly int? ReconnectDelay;
        /// <summary>
        /// The AMQP 1.0 source link address.
        /// </summary>
        public readonly string? SourceAddress;
        /// <summary>
        /// Determines when (if ever) the shovel should delete itself. Possible values are: `never`, `queue-length` or an integer.
        /// </summary>
        public readonly string? SourceDeleteAfter;
        /// <summary>
        /// The exchange from which to consume.
        /// Either this or `source_queue` must be specified but not both.
        /// </summary>
        public readonly string? SourceExchange;
        /// <summary>
        /// The routing key when using `source_exchange`.
        /// </summary>
        public readonly string? SourceExchangeKey;
        /// <summary>
        /// The maximum number of unacknowledged messages copied over a shovel at any one time.
        /// </summary>
        public readonly int? SourcePrefetchCount;
        /// <summary>
        /// The protocol (`amqp091` or `amqp10`) to use when connecting to the source.
        /// Defaults to `amqp091`.
        /// </summary>
        public readonly string? SourceProtocol;
        /// <summary>
        /// The queue from which to consume.
        /// Either this or `source_exchange` must be specified but not both.
        /// </summary>
        public readonly string? SourceQueue;
        /// <summary>
        /// The amqp uri for the source.
        /// </summary>
        public readonly string SourceUri;

        [OutputConstructor]
        private ShovelInfo(
            string? ackMode,

            bool? addForwardHeaders,

            string? deleteAfter,

            bool? destinationAddForwardHeaders,

            bool? destinationAddTimestampHeader,

            string? destinationAddress,

            ImmutableDictionary<string, string>? destinationApplicationProperties,

            string? destinationExchange,

            string? destinationExchangeKey,

            ImmutableDictionary<string, string>? destinationProperties,

            string? destinationProtocol,

            ImmutableDictionary<string, string>? destinationPublishProperties,

            string? destinationQueue,

            ImmutableDictionary<string, string>? destinationQueueArguments,

            string destinationUri,

            int? prefetchCount,

            int? reconnectDelay,

            string? sourceAddress,

            string? sourceDeleteAfter,

            string? sourceExchange,

            string? sourceExchangeKey,

            int? sourcePrefetchCount,

            string? sourceProtocol,

            string? sourceQueue,

            string sourceUri)
        {
            AckMode = ackMode;
            AddForwardHeaders = addForwardHeaders;
            DeleteAfter = deleteAfter;
            DestinationAddForwardHeaders = destinationAddForwardHeaders;
            DestinationAddTimestampHeader = destinationAddTimestampHeader;
            DestinationAddress = destinationAddress;
            DestinationApplicationProperties = destinationApplicationProperties;
            DestinationExchange = destinationExchange;
            DestinationExchangeKey = destinationExchangeKey;
            DestinationProperties = destinationProperties;
            DestinationProtocol = destinationProtocol;
            DestinationPublishProperties = destinationPublishProperties;
            DestinationQueue = destinationQueue;
            DestinationQueueArguments = destinationQueueArguments;
            DestinationUri = destinationUri;
            PrefetchCount = prefetchCount;
            ReconnectDelay = reconnectDelay;
            SourceAddress = sourceAddress;
            SourceDeleteAfter = sourceDeleteAfter;
            SourceExchange = sourceExchange;
            SourceExchangeKey = sourceExchangeKey;
            SourcePrefetchCount = sourcePrefetchCount;
            SourceProtocol = sourceProtocol;
            SourceQueue = sourceQueue;
            SourceUri = sourceUri;
        }
    }
}
