// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.RabbitMQ.Outputs
{

    [OutputType]
    public sealed class ShovelInfo
    {
        /// <summary>
        /// Determines how the shovel should acknowledge messages.
        /// Defaults to `on-confirm`.
        /// </summary>
        public readonly string? AckMode;
        /// <summary>
        /// Whether to amqp shovel headers.
        /// Defaults to `false`.
        /// </summary>
        public readonly bool? AddForwardHeaders;
        /// <summary>
        /// Determines when (if ever) the shovel should delete itself .
        /// Defaults to `never`.
        /// </summary>
        public readonly string? DeleteAfter;
        /// <summary>
        /// The exchange to which messages should be published.
        /// Either this or destination_queue must be specified but not both.
        /// </summary>
        public readonly string? DestinationExchange;
        /// <summary>
        /// The routing key when using destination_exchange.
        /// </summary>
        public readonly string? DestinationExchangeKey;
        /// <summary>
        /// The queue to which messages should be published.
        /// Either this or destination_exchange must be specified but not both.
        /// </summary>
        public readonly string? DestinationQueue;
        /// <summary>
        /// The amqp uri for the destination .
        /// </summary>
        public readonly string DestinationUri;
        /// <summary>
        /// The maximum number of unacknowledged messages copied over a shovel at any one time.
        /// Defaults to `1000`.
        /// </summary>
        public readonly int? PrefetchCount;
        /// <summary>
        /// The duration in seconds to reconnect to a broker after disconnected.
        /// Defaults to `1`.
        /// </summary>
        public readonly int? ReconnectDelay;
        /// <summary>
        /// The exchange from which to consume.
        /// Either this or source_queue must be specified but not both.
        /// </summary>
        public readonly string? SourceExchange;
        /// <summary>
        /// The routing key when using source_exchange.
        /// </summary>
        public readonly string? SourceExchangeKey;
        /// <summary>
        /// The queue from which to consume.
        /// Either this or source_exchange must be specified but not both.
        /// </summary>
        public readonly string? SourceQueue;
        /// <summary>
        /// The amqp uri for the source.
        /// </summary>
        public readonly string SourceUri;

        [OutputConstructor]
        private ShovelInfo(
            string? ackMode,

            bool? addForwardHeaders,

            string? deleteAfter,

            string? destinationExchange,

            string? destinationExchangeKey,

            string? destinationQueue,

            string destinationUri,

            int? prefetchCount,

            int? reconnectDelay,

            string? sourceExchange,

            string? sourceExchangeKey,

            string? sourceQueue,

            string sourceUri)
        {
            AckMode = ackMode;
            AddForwardHeaders = addForwardHeaders;
            DeleteAfter = deleteAfter;
            DestinationExchange = destinationExchange;
            DestinationExchangeKey = destinationExchangeKey;
            DestinationQueue = destinationQueue;
            DestinationUri = destinationUri;
            PrefetchCount = prefetchCount;
            ReconnectDelay = reconnectDelay;
            SourceExchange = sourceExchange;
            SourceExchangeKey = sourceExchangeKey;
            SourceQueue = sourceQueue;
            SourceUri = sourceUri;
        }
    }
}
