// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.RabbitMQ
{
    /// <summary>
    /// The `rabbitmq.Exchange` resource creates and manages an exchange.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using RabbitMQ = Pulumi.RabbitMQ;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new RabbitMQ.VHost("test", new()
    ///     {
    ///         Name = "test",
    ///     });
    /// 
    ///     var guest = new RabbitMQ.Permissions("guest", new()
    ///     {
    ///         User = "guest",
    ///         Vhost = test.Name,
    ///         PermissionDetails = new RabbitMQ.Inputs.PermissionsPermissionsArgs
    ///         {
    ///             Configure = ".*",
    ///             Write = ".*",
    ///             Read = ".*",
    ///         },
    ///     });
    /// 
    ///     var testExchange = new RabbitMQ.Exchange("test", new()
    ///     {
    ///         Name = "test",
    ///         Vhost = guest.Vhost,
    ///         Settings = new RabbitMQ.Inputs.ExchangeSettingsArgs
    ///         {
    ///             Type = "fanout",
    ///             Durable = false,
    ///             AutoDelete = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Exchanges can be imported using the `id` which is composed of  `name@vhost`.
    /// 
    /// E.g.
    /// 
    /// ```sh
    /// $ pulumi import rabbitmq:index/exchange:Exchange test test@vhost
    /// ```
    /// </summary>
    [RabbitMQResourceType("rabbitmq:index/exchange:Exchange")]
    public partial class Exchange : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the exchange.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The settings of the exchange. The structure is
        /// described below.
        /// </summary>
        [Output("settings")]
        public Output<Outputs.ExchangeSettings> Settings { get; private set; } = null!;

        /// <summary>
        /// The vhost to create the resource in.
        /// </summary>
        [Output("vhost")]
        public Output<string?> Vhost { get; private set; } = null!;


        /// <summary>
        /// Create a Exchange resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Exchange(string name, ExchangeArgs args, CustomResourceOptions? options = null)
            : base("rabbitmq:index/exchange:Exchange", name, args ?? new ExchangeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Exchange(string name, Input<string> id, ExchangeState? state = null, CustomResourceOptions? options = null)
            : base("rabbitmq:index/exchange:Exchange", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Exchange resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Exchange Get(string name, Input<string> id, ExchangeState? state = null, CustomResourceOptions? options = null)
        {
            return new Exchange(name, id, state, options);
        }
    }

    public sealed class ExchangeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the exchange.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The settings of the exchange. The structure is
        /// described below.
        /// </summary>
        [Input("settings", required: true)]
        public Input<Inputs.ExchangeSettingsArgs> Settings { get; set; } = null!;

        /// <summary>
        /// The vhost to create the resource in.
        /// </summary>
        [Input("vhost")]
        public Input<string>? Vhost { get; set; }

        public ExchangeArgs()
        {
        }
        public static new ExchangeArgs Empty => new ExchangeArgs();
    }

    public sealed class ExchangeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the exchange.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The settings of the exchange. The structure is
        /// described below.
        /// </summary>
        [Input("settings")]
        public Input<Inputs.ExchangeSettingsGetArgs>? Settings { get; set; }

        /// <summary>
        /// The vhost to create the resource in.
        /// </summary>
        [Input("vhost")]
        public Input<string>? Vhost { get; set; }

        public ExchangeState()
        {
        }
        public static new ExchangeState Empty => new ExchangeState();
    }
}
