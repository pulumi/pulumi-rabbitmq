// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.RabbitMQ
{
    /// <summary>
    /// The ``rabbitmq..Exchange`` resource creates and manages an exchange.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-rabbitmq/blob/master/website/docs/r/exchange.html.markdown.
    /// </summary>
    public partial class Exchange : Pulumi.CustomResource
    {
        /// <summary>
        /// The name of the exchange.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The settings of the exchange. The structure is
        /// described below.
        /// </summary>
        [Output("settings")]
        public Output<Outputs.ExchangeSettings> Settings { get; private set; } = null!;

        /// <summary>
        /// The vhost to create the resource in.
        /// </summary>
        [Output("vhost")]
        public Output<string?> Vhost { get; private set; } = null!;


        /// <summary>
        /// Create a Exchange resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Exchange(string name, ExchangeArgs args, CustomResourceOptions? options = null)
            : base("rabbitmq:index/exchange:Exchange", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Exchange(string name, Input<string> id, ExchangeState? state = null, CustomResourceOptions? options = null)
            : base("rabbitmq:index/exchange:Exchange", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Exchange resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Exchange Get(string name, Input<string> id, ExchangeState? state = null, CustomResourceOptions? options = null)
        {
            return new Exchange(name, id, state, options);
        }
    }

    public sealed class ExchangeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the exchange.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The settings of the exchange. The structure is
        /// described below.
        /// </summary>
        [Input("settings", required: true)]
        public Input<Inputs.ExchangeSettingsArgs> Settings { get; set; } = null!;

        /// <summary>
        /// The vhost to create the resource in.
        /// </summary>
        [Input("vhost")]
        public Input<string>? Vhost { get; set; }

        public ExchangeArgs()
        {
        }
    }

    public sealed class ExchangeState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the exchange.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The settings of the exchange. The structure is
        /// described below.
        /// </summary>
        [Input("settings")]
        public Input<Inputs.ExchangeSettingsGetArgs>? Settings { get; set; }

        /// <summary>
        /// The vhost to create the resource in.
        /// </summary>
        [Input("vhost")]
        public Input<string>? Vhost { get; set; }

        public ExchangeState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ExchangeSettingsArgs : Pulumi.ResourceArgs
    {
        [Input("arguments")]
        private InputMap<object>? _arguments;
        public InputMap<object> Arguments
        {
            get => _arguments ?? (_arguments = new InputMap<object>());
            set => _arguments = value;
        }

        [Input("autoDelete")]
        public Input<bool>? AutoDelete { get; set; }

        [Input("durable")]
        public Input<bool>? Durable { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ExchangeSettingsArgs()
        {
        }
    }

    public sealed class ExchangeSettingsGetArgs : Pulumi.ResourceArgs
    {
        [Input("arguments")]
        private InputMap<object>? _arguments;
        public InputMap<object> Arguments
        {
            get => _arguments ?? (_arguments = new InputMap<object>());
            set => _arguments = value;
        }

        [Input("autoDelete")]
        public Input<bool>? AutoDelete { get; set; }

        [Input("durable")]
        public Input<bool>? Durable { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ExchangeSettingsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ExchangeSettings
    {
        public readonly ImmutableDictionary<string, object>? Arguments;
        public readonly bool? AutoDelete;
        public readonly bool? Durable;
        public readonly string Type;

        [OutputConstructor]
        private ExchangeSettings(
            ImmutableDictionary<string, object>? arguments,
            bool? autoDelete,
            bool? durable,
            string type)
        {
            Arguments = arguments;
            AutoDelete = autoDelete;
            Durable = durable;
            Type = type;
        }
    }
    }
}
